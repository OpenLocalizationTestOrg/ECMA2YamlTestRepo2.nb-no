### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACRIPEMD160
  id: HMACRIPEMD160
  children:
  - System.Security.Cryptography.HMACRIPEMD160.#ctor
  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160
  fullName: System.Security.Cryptography.HMACRIPEMD160
  type: Class
  summary: "Beregner en Hash-baserte Message Authentication Code (HMAC) ved hjelp av den <xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;> </xref> hash-funksjonen."
  remarks: "HMACRIPEMD160 er en type kodede nummeralgoritmen som konstruert fra RIPEMD&160; hash-funksjonen og brukes som en Hash-baserte Message Authentication Code (HMAC). Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 biter lang.       En HMAC kan brukes til å fastsette om en melding sendt via en usikker kanal tuklet med, forutsatt at avsender og mottakeren dele en hemmelig nøkkel. Avsenderen beregner hash-verdien for den opprinnelige dataene, og sender både de opprinnelige dataene og hash-verdien som én enkelt melding. Mottakeren beregner hash-verdien for den mottatte meldingen på nytt, og kontrollerer at beregnede HMAC samsvarer med overførte HMAC.       Endringer i dataene eller hash-verdien som fører til en konflikt fordi kunnskap om hemmelig nøkkel er nødvendig endre meldingen for å reprodusere riktig hash-verdien. Hvis opprinnelige og beregnede hash-verdiene er like, godkjennes derfor meldingen.       HMACRIPEMD160 godtar nøkler noen størrelsen, og produserer en hash-sekvens som 160 biter.       RIPEMD nummeralgoritmen og etterfølgende aktiviteter ble utviklet av europeiske MODEN prosjektet. Algoritmen RIPEMD er ment å erstatte MD4 og MD5 ble senere styrket og gi nytt navn RIPEMD&160;. RIPEMD 160 nummeralgoritmen produserer en 160-biters hash-verdi. {Algoritmen utviklere har satt den offentlig tilgjengelig."
  example:
  - "The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \n  \n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> klassen med en tilfeldig generert 64-biters nøkkel."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>er en type kodede nummeralgoritmen som konstruert fra RIPEMD&160; hash-funksjonen og brukes som en Hash-baserte Message Authentication Code (HMAC).</xref:System.Security.Cryptography.HMACRIPEMD160> Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 byte i lengde.       Denne konstruktøren bruker en 64-byte, tilfeldig generert nøkkel."
  syntax:
    content: public HMACRIPEMD160 ();
    parameters: []
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> klassen med de angitte key dataene."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>er en type kodede nummeralgoritmen som konstruert fra RIPEMD&160; hash-funksjonen og brukes som en Hash-baserte Message Authentication Code (HMAC).</xref:System.Security.Cryptography.HMACRIPEMD160> Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 byte i lengde."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.
  syntax:
    content: public HMACRIPEMD160 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "Hemmelig nøkkel for <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> kryptering. Nøkkelen kan være, men hvis det er flere enn 64 byte lang den er bruke hash-kode (ved hjelp av SHA-1) avledes en 64-biters nøkkel. Den anbefalte størrelsen på hemmelig nøkkel er derfor 64 byte."
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160.HMACRIPEMD160
