### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyProperty
  id: DependencyProperty
  children:
  - System.Windows.DependencyProperty.AddOwner(System.Type)
  - System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.DefaultMetadata
  - System.Windows.DependencyProperty.GetHashCode
  - System.Windows.DependencyProperty.GetMetadata(System.Type)
  - System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  - System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  - System.Windows.DependencyProperty.GlobalIndex
  - System.Windows.DependencyProperty.IsValidType(System.Object)
  - System.Windows.DependencyProperty.IsValidValue(System.Object)
  - System.Windows.DependencyProperty.Name
  - System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyProperty.OwnerType
  - System.Windows.DependencyProperty.PropertyType
  - System.Windows.DependencyProperty.ReadOnly
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  - System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  - System.Windows.DependencyProperty.ToString
  - System.Windows.DependencyProperty.UnsetValue
  - System.Windows.DependencyProperty.ValidateValueCallback
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
  type: Class
  summary: "Representerer en egenskap som kan angis via metoder som stiler, databinding, animasjonen og arv."
  remarks: "En DependencyProperty støtter følgende funksjoner i [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]:-egenskapen kan angis i en stil. Hvis du vil ha mer informasjon, se [stil og Templating](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan settes til databinding. Du finner mer informasjon om egenskaper for databinding avhengighet [slik: binde egenskaper for to kontrollene](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan angis med dynamiske ressursreferanse. Hvis du vil ha mer informasjon, se [XAML ressurser](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan arve verdien automatisk fra en overordnet element i treet for elementet. Hvis du vil ha mer informasjon, se [egenskapen verdien arv](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan være animerte. Hvis du vil ha mer informasjon, se [animasjonen oversikt over](~/add/includes/ajax-current-ext-md.md).      -Egenskapen kan rapportere når den forrige verdien for egenskapen er endret og egenskapsverdien kan konverteres. Hvis du vil ha mer informasjon, se [avhengighet egenskapen tilbakeringinger og validering](~/add/includes/ajax-current-ext-md.md).      -Egenskapen rapporterer informasjon til [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], for eksempel om endring av et egenskapen skal krever oppsett systemet for å lage de visuelle effektene for et element.      -Egenskapen mottar støtte i den [!INCLUDE[wpfdesigner_current_long](~/add/includes/wpfdesigner-current-long-md.md)].  For eksempel egenskapen kan redigeres i den **Egenskaper** vinduet.       Du kan lære mer om egenskaper for avhengighet i [avhengighet egenskaper oversikt over](~/add/includes/ajax-current-ext-md.md). Hvis du vil egenskaper i de egendefinerte typene støtter de som finnes i listen ovenfor, må du opprette en avhengighetsegenskapen.  Du kan lære hvordan du oppretter egenskaper for egendefinert avhengighet i [egenskaper for egendefinert avhengighet](~/add/includes/ajax-current-ext-md.md).       En vedlagte egenskapen er en egenskap som aktiverer et objekt til rapportinformasjon til typen som definerer den tilknyttede egenskapen. I [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], noen type som arver fra <xref:System.Windows.DependencyObject>kan bruke en vedlagte egenskapen uansett om typen arver fra typen som definerer egenskapen.</xref:System.Windows.DependencyObject> En vedlagte egenskapen er en funksjon i den [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] språk.  Angi en vedlagte egenskapen i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], bruker du *ownerType*.* propertyName* syntaks. Er et eksempel på en egenskap som er tilknyttet den <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>egenskapen.</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName> Hvis du vil opprette en egenskap som kan brukes på alle <xref:System.Windows.DependencyObject>datatyper, og du må opprette en tilknyttede egenskapen.</xref:System.Windows.DependencyObject> Hvis du vil vite mer om vedlagte egenskaper, inkludert hvordan du oppretter dem, kan du se [knyttet egenskaper oversikt over](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlAttributeUsage_DependencyProperty&quot;></a>## XAML Attributtbruk ```   <object property=&quot;dependencyPropertyName&quot;/>   - or -   <object property=&quot;ownerType.dependencyPropertyName&quot;/>   - or -   <object property=&quot;attachedPropertyOwnerType.attachedPropertyName&quot;/>   ``` <a name=&quot;xamlValues_DependencyProperty&quot;> </a> ## XAML verdier `dependencyPropertyName` en streng som angir den <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>for den ønskede avhengighetsegenskapen.</xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>       Dette kan være med en XML-navneområdeprefikset Hvis egenskapen ikke er i standard XML-navneområdet (Hvis du vil ha mer informasjon, se [XAML navneområder og Namespace tilordningen for WPF XAML](~/add/includes/ajax-current-ext-md.md).)       `ownerType`.`dependencyPropertyName`    En streng som angir en type for eieren av en avhengighetsegenskapen, punktum (.), og deretter <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName> `ownerType`kan også komme etter en XML-navneområdeprefikset. Dette er spesielt for sent bundet stiler og maler, der eieren av avhengighetsegenskapen må være angitt for analyse konteksten fordi det `TargetType` ennå ikke er kjent. Hvis du vil ha mer informasjon, se [stil og Templating](../Topic/Styling%20and%20Templating.md).       `attachedPropertyOwnerType` *.* `attachedPropertyName`En tekststreng som angir eieren av en vedlagte egenskap, punktum (.) og tilknyttede egenskapsnavnet. `attachedPropertyOwnerType`kan også komme etter en XML-navneområdeprefikset."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))]

      public sealed class DependencyProperty
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.AddOwner(System.Type)
  id: AddOwner(System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: AddOwner(Type)
  nameWithType: DependencyProperty.AddOwner(Type)
  fullName: System.Windows.DependencyProperty.AddOwner(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Legger til en annen type som en eier av en avhengighetsegenskap som er allerede registrert."
  remarks: "Denne metoden aktiverer egenskapen systemet ikke gjenkjenne en avhengighetsegenskapen for en type som ikke ble registrert at bestemt avhengighetsegenskapen i utgangspunktet.       AddOwner brukes vanligvis til å legge til avhengighetsegenskaper klasser som ikke eksponerer allerede avhengighetsegenskapen via administrerte klassearv (klassearv vil forårsake egenskapene wrapper skal arves av den utledede klassen, og dermed har generelle medlemmer tabell-tilgang til avhengighetsegenskapen allerede). AddOwner aktiverer egenskapen systemet ikke gjenkjenne en avhengighetsegenskapen for en type som ikke opprinnelig ble registrert som avhengighetsegenskapen.       Denne signaturen tillater ikke at for å angi metadata.  Når du bruker denne metoden, metadataene genereres automatisk for den nye <xref:System.Windows.DependencyProperty>og filtypen eieren.</xref:System.Windows.DependencyProperty> Metadataene som er automatisk generert er resultatet av den sammenslåtte metadata fra alle basistyper som har egenskapen definert. Hvis ingen sammenslåtte metadata er tilgjengelig, brukes standard metadataene for egenskapen. Hvis egenskapen er registrert ved hjelp av den <xref:System.Windows.DependencyProperty.RegisterAttached%2A>metoden og standard metadataene er identisk med metadataene som opprettes når <xref:System.Windows.DependencyProperty.RegisterAttached%2A>ble kalt.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> Hvis ikke, den <xref:System.Windows.PropertyMetadata>objekt er opprettet med den <xref:System.Windows.PropertyMetadata.DefaultValue%2A>egenskapen satt til standard egenskaps-typen og alle andre egenskaper for det <xref:System.Windows.PropertyMetadata>er satt til `null`.</xref:System.Windows.PropertyMetadata> </xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Bruk av <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>signatur Hvis du vil angi metadata for versjonen av avhengighetsegenskapen som legges til i den angitte typen.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>       Verdien som returneres av denne metoden brukes vanligvis deklarere for å vise avhengighetsegenskapen ved å lagre en egenskapsidentifikator avhengighet. Identifikatoren gir tilgang til avhengighetsegenskapen Hvis du vil kalle egenskapen system [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] mot avhengighetsegenskapen, spesielt som finnes på klassen for å legge til eieren. Samme egenskapsnavn for både opprinnelige eieren og tillagt eieren bør brukes til å angi lignende bruksområder. Du må bruke den <xref:System.Windows.DependencyProperty>returverdi av AddOwner-metoden til å definere egenskapsidentifikator avhengighet, og du kan også deklarere [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen-sikkerhetsgrupper for avhengighetsegenskaper som er lagt til bruk AddOwner.</xref:System.Windows.DependencyProperty>       AddOwner metoden som anbefales ovenfor brukes ved oppretting av egenskapene avhengighet som er angitt i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]. For eksempel både <xref:System.Windows.Controls.Border>og <xref:System.Windows.Controls.Control>definerer en `BorderBrush` avhengighetsegenskapen som har lignende bruksområder.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Border> <xref:System.Windows.Controls.Control>definerer den `BorderBrush` egenskapen egenskapen systemet ved å kalle AddOwner basert på den opprinnelige eieren <xref:System.Windows.Controls.Border>og den registrerte <xref:System.Windows.Controls.Border.BorderBrushProperty>avhengighet egenskapen ID.</xref:System.Windows.Controls.Border.BorderBrushProperty> </xref:System.Windows.Controls.Border></xref:System.Windows.Controls.Control> AddOwner returnere verdien deretter brukes til å opprette et nytt statisk <xref:System.Windows.DependencyProperty>felt (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for denne egenskapen i tillagt eieren, og en `BorderBrush` egenskapen wrapper også er deklarert.</xref:System.Windows.Controls.Control.BorderBrushProperty> </xref:System.Windows.DependencyProperty>"
  syntax:
    content: public System.Windows.DependencyProperty AddOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Skriv inn som en eier av dette avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En referanse til opprinnelige <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identifikator som identifiserer avhengighetsegenskapen. Denne identifikatoren skal vises ved å legge til klassen som en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> felt."
  overload: System.Windows.DependencyProperty.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  id: AddOwner(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: AddOwner(Type,PropertyMetadata)
  nameWithType: DependencyProperty.AddOwner(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.AddOwner(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Legger til en annen type som en eier av en avhengighetsegenskap som allerede er registrert, gir avhengighet egenskapmetadata for avhengighetsegenskapen som den skal finnes i den angitte eiertypen."
  remarks: "Denne metoden aktiverer egenskapen systemet ikke gjenkjenne en avhengighetsegenskapen for en type som ikke ble registrert at bestemt avhengighetsegenskapen i utgangspunktet.       Verdien som returneres av denne metoden brukes til å deklarere og vise avhengighetsegenskapen, spesielt den finnes på klassen for å legge til eieren. Vanligvis bør samme egenskapsnavn for både opprinnelige eieren og tillagt eieren brukes til å angi lignende bruksområder. Det er lurt å vise identifikatorer, i tillegg til nye [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen-sikkerhetsgrupper for avhengighetsegenskaper som er lagt til bruk <xref:System.Windows.DependencyProperty.AddOwner%2A>.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Den <xref:System.Windows.DependencyProperty.AddOwner%2A>metoden som anbefales ovenfor brukes ved oppretting av [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] deklarert i [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.DependencyProperty.AddOwner%2A> For eksempel både <xref:System.Windows.Controls.Border>og <xref:System.Windows.Controls.Control>definerer en `BorderBrush` avhengighetsegenskapen som har lignende bruksområder.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Border> <xref:System.Windows.Controls.Control>definerer den `BorderBrush` egenskapen egenskapen systemet ved å kalle <xref:System.Windows.DependencyProperty.AddOwner%2A>på opprinnelige eieren <xref:System.Windows.Controls.Border>og den registrerte <xref:System.Windows.Controls.Border.BorderBrushProperty>avhengighet egenskapen ID.</xref:System.Windows.Controls.Border.BorderBrushProperty> </xref:System.Windows.Controls.Border> </xref:System.Windows.DependencyProperty.AddOwner%2A></xref:System.Windows.Controls.Control> Den <xref:System.Windows.DependencyProperty.AddOwner%2A>returnere verdien deretter brukes til å opprette et statisk <xref:System.Windows.DependencyProperty>felt (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for denne egenskapen i tillagt eieren, og en `BorderBrush` egenskapen wrapper også er deklarert.</xref:System.Windows.Controls.Control.BorderBrushProperty> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.AddOwner%2A>       La til eieren av avhengighet egenskapsidentifikator skal brukes til operasjoner, for eksempel <xref:System.Windows.DependencyObject.GetValue%2A>.</xref:System.Windows.DependencyObject.GetValue%2A> Imidlertid typespesifikke operasjoner som omfatter typer eller forekomster av klassen som er lagt til som eier med forskjellige metadata kan fortsatt ikke returnere den forventede resultater selv om opprinnelige (ikke lagt til eieren av) avhengighet egenskapsidentifikator er angitt i kall til metoder for eksempel <xref:System.Windows.DependencyObject.GetValue%2A>eller <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</xref:System.Windows.DependencyProperty.GetMetadata%2A> </xref:System.Windows.DependencyObject.GetValue%2A> Metadataene for tillagt eieren perpetuated av AddOwner kalle seg selv, refererer ikke nødvendigvis utelukkende til å legge til feltet eier av klasse-IDen. Likevel det er lurt å vise identifikatoren for, i tillegg til nye [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] egenskapen-sikkerhetsgrupper for avhengighetsegenskaper som er lagt til bruk AddOwner, fordi ikke du gjør det. oppretter disparity mellom den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] og [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] representasjoner av egenskapene dine.       De angitte metadataene slås sammen med metadataene for egenskapen for avhengighetsegenskapen fordi det finnes i basistabellen eieren. Egenskaper som ble angitt i den opprinnelige base metadata vil beholde. Bare egenskaper som spesielt ble endret i den nye metadata overstyrer egenskaper base metadata. Noen egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, erstattes hvis de er angitt i de nye metadataene.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andre, slik som <xref:System.Windows.PropertyChangedCallback>, kombineres.</xref:System.Windows.PropertyChangedCallback> Merge-virkemåten avhenger av metadata egenskapstypen som brukes for overstyringen, og virkemåten her er for eksisterende egenskapen metadata klassene som brukes av [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] avhengighetsegenskaper. Hvis du vil ha mer informasjon, se [avhengighet egenskapmetadata](~/add/includes/ajax-current-ext-md.md) og [Framework egenskapmetadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Skriv inn som eier av dette avhengighetsegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadataene som kvalifiserer avhengighetsegenskapen som den finnes på den angitte typen."
    return:
      type: System.Windows.DependencyProperty
      description: "En referanse til opprinnelige <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identifikator som identifiserer avhengighetsegenskapen. Denne identifikatoren skal vises ved å legge til klassen som en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> felt."
  overload: System.Windows.DependencyProperty.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.DefaultMetadata
  id: DefaultMetadata
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
  fullName: System.Windows.DependencyProperty.DefaultMetadata
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter avhengighetsegenskapen standard metadataene."
  remarks: "Metadataene som standard er egenskapen metadataene som er tilgjengelig for dette bestemte objekt eller et objekt i en avledet type der ingen alternative metadata ble angitt av en eksplisitt <xref:System.Windows.DependencyProperty.Register%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>kall.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A>       Hvis den opprinnelige eieren brukes metadata på først <xref:System.Windows.DependencyProperty.Register%2A>oppringing som opprettet avhengighetsegenskapen, returneres den metadataen som DefaultMetadata.</xref:System.Windows.DependencyProperty.Register%2A>       Hvis ingen metadata ble brukt i opprinnelige <xref:System.Windows.DependencyProperty.Register%2A>ringe, og standard metadataene i den <xref:System.Windows.DependencyProperty.Register%2A>samtale- og denne verdien returneres som DefaultMetadata.</xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty.Register%2A>       Det primære formålet med med standard metadata som er knyttet til en <xref:System.Windows.DependencyProperty>er å angi en standardverdi for denne egenskapen noen <xref:System.Windows.DependencyObject>eller en avledet type.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyProperty>       For ikke-vedlagt egenskaper metadatatype som returneres av denne egenskapen kan ikke endres til avledede typer <xref:System.Windows.PropertyMetadata>skriver, selv om egenskapen opprinnelig ble registrert med en avledet metadatatype.</xref:System.Windows.PropertyMetadata> Hvis du vil opprinnelig registrerte metadataene inkludert filtypen kanskje avledede metadata, kaller <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29>i stedet sending av den opprinnelige under registrering av typen som en parameter.</xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29>       Hva slags metadata som returneres av denne egenskapen vil samsvare med typen som er angitt i opprinnelige for vedlagte Egenskaper <xref:System.Windows.DependencyProperty.RegisterAttached%2A>registrering-metoden.</xref:System.Windows.DependencyProperty.RegisterAttached%2A>"
  example:
  - "[!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#DPDefaultValue](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]\n[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]"
  syntax:
    content: public System.Windows.PropertyMetadata DefaultMetadata { get; }
    return:
      type: System.Windows.PropertyMetadata
      description: "Standard-metadata for avhengighetsegenskapen."
  overload: System.Windows.DependencyProperty.DefaultMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyProperty.GetHashCode()
  fullName: System.Windows.DependencyProperty.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerer en hash-kode for denne <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  remarks: "Egenskapen systemet bruker sine egne Unik identifikator <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, og verdien for denne egenskapen er returnert av GetHashCode.</xref:System.Windows.DependencyProperty.GlobalIndex%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Hash-kode for denne <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref>."
  overload: System.Windows.DependencyProperty.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Type)
  id: GetMetadata(System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(Type)
  nameWithType: DependencyProperty.GetMetadata(Type)
  fullName: System.Windows.DependencyProperty.GetMetadata(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerer metadataene for denne avhengighetsegenskapen slik at den finnes i en eksisterende type som er angitt."
  remarks: "Angir typen eller en objektreferanse skal brukes som type nødvendig fordi metadataene kan variere fra den opprinnelige registreringen grunn til <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>anrop som alter metadataene for avhengighetsegenskapen fordi det finnes for en type.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>"
  example:
  - "The following example gets metadata for a dependency property based on its type. The type is obtained by using a `typeof` operator.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataType](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatatype)]\n [!code-vb[PropertySystemEsoterics#GetMetadataType](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (Type forType);
    parameters:
    - id: forType
      type: System.Type
      description: "Bestemte typen som til å hente metadata for avhengighet-egenskapen."
    return:
      type: System.Windows.PropertyMetadata
      description: "Et metadataobjekt for egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  id: GetMetadata(System.Windows.DependencyObject)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(DependencyObject)
  nameWithType: DependencyProperty.GetMetadata(DependencyObject)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObject)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerer metadataene for denne avhengighetsegenskapen slik at den finnes i angitte objektforekomsten."
  remarks: "Angir typen eller en objektreferanse er nødvendig, ettersom metadataene for alle angitte avhengighetsegenskapen kan variere fra den opprinnelige registreringen grunn til <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>anrop som kan forbedre egenskapen metadataene fordi det finnes for en type.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>       Når du ber om egenskapen metadataene basert på en forekomst, sender du egentlig forekomsten slik at typen kan evalueres internt. Avhengighet egenskapen metadataene varierer ikke per forekomst. Det er alltid konsekvent for alle angitte Typeegenskapen kombinasjoner."
  example:
  - "The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataDOInstance](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]\n [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "En Avhengighetsobjekt som er merket av for å finne ut hvilken typespesifikke versjon av avhengighetsegenskapen metadataene bør komme fra-typen."
    return:
      type: System.Windows.PropertyMetadata
      description: "Et metadataobjekt for egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  id: GetMetadata(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GetMetadata(DependencyObjectType)
  nameWithType: DependencyProperty.GetMetadata(DependencyObjectType)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObjectType)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerer metadataene for denne avhengighetsegenskapen slik at det finnes for en angitt type."
  remarks: "Angir typen eller en objektreferanse er nødvendig, ettersom metadataene for alle angitte avhengighetsegenskapen kan variere fra den opprinnelige registreringen grunn til <xref:System.Windows.DependencyProperty.AddOwner%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>anrop som kan forbedre egenskapen metadataene fordi det finnes for en type.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A>"
  example:
  - "The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.  \n  \n [!code-cs[PropertySystemEsoterics#GetMetadataDOType](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/default.xaml.cs#getmetadatadotype)]\n [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/add/codesnippet/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]"
  syntax:
    content: public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);
    parameters:
    - id: dependencyObjectType
      type: System.Windows.DependencyObjectType
      description: "Et bestemt objekt som registrerer objekttypen avhengighet som ønskes avhengighet egenskapmetadata."
    return:
      type: System.Windows.PropertyMetadata
      description: "Et metadataobjekt for egenskapen."
  overload: System.Windows.DependencyProperty.GetMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.GlobalIndex
  id: GlobalIndex
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
  fullName: System.Windows.DependencyProperty.GlobalIndex
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter en verdi for internt genererte som identifiserer avhengighetsegenskapen."
  remarks: "Denne verdien er et heltall, ikke en [!INCLUDE[TLA#tla_guid](~/add/includes/ajax-current-ext-md.md)]. Vanligvis bruker denne indeksverdien er ikke obligatorisk, og det er ingen indeksen tilgang til tabellene for alle egenskaper for avhengighet. Egenskaper for avhengighet må i stedet referert til av sine ID-felt.       GlobalIndex brukes internt for rask tilgang til datastrukturer som bruker GlobalIndex som en nullbasert matrise-indeks. Et lignende bruksområde kan ha programmer for utviklere eller verktøy."
  syntax:
    content: public int GlobalIndex { get; }
    return:
      type: System.Int32
      description: "En unik, numerisk identifikator."
  overload: System.Windows.DependencyProperty.GlobalIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.IsValidType(System.Object)
  id: IsValidType(System.Object)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: IsValidType(Object)
  nameWithType: DependencyProperty.IsValidType(Object)
  fullName: System.Windows.DependencyProperty.IsValidType(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Bestemmer om en angitt verdi godtas for dette avhengighetsegenskapen typen som kontrollert mot egenskapstype som er angitt i den opprinnelige avhengighet egenskap registreringen."
  remarks: "Verdien `null` er en gyldig type for referanse avhengighet typeegenskaper eller en <xref:System.Nullable%601>avhengighetsegenskapen, og returnerer `true` for disse tilfellene.</xref:System.Nullable%601> I tilfeller der avhengighetsegenskapen er verken en referanse eller en <xref:System.Nullable%601>typen IsValidType tilbakestiller `false` for en null-verdi i stedet for Hev et unntak.</xref:System.Nullable%601>"
  example:
  - "The following example uses IsValidType as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.  \n  \n [!code-cs[PropertySystemEsoterics#TrySetValue](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#trysetvalue)]\n [!code-vb[PropertySystemEsoterics#TrySetValue](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]"
  syntax:
    content: public bool IsValidType (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Verdien som skal se."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den angitte verdien er registrert egenskapstypen eller en gyldig avledet type. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.IsValidType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.IsValidValue(System.Object)
  id: IsValidValue(System.Object)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: IsValidValue(Object)
  nameWithType: DependencyProperty.IsValidValue(Object)
  fullName: System.Windows.DependencyProperty.IsValidValue(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Bestemmer om den angitte verdien er godkjent for egenskapstypen via kontroll av enkel type, og også potensielt hvis den er i det tillatte verdiområdet for denne typen."
  remarks: "Det tillatte verdiområdet for denne typen kan angis for en avhengighetsegenskapen, via en <xref:System.Windows.ValidateValueCallback>som er angitt i egenskapen registreringen avhengighet.</xref:System.Windows.ValidateValueCallback>       Denne metoden kaller <xref:System.Windows.DependencyProperty.IsValidType%2A>internt.</xref:System.Windows.DependencyProperty.IsValidType%2A> Hvis den aktuelle avhengighetsegenskapen har ingen <xref:System.Windows.ValidateValueCallback>kaller denne metoden tilsvarer effektivt kaller <xref:System.Windows.DependencyProperty.IsValidType%2A>.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Windows.ValidateValueCallback> Hvis avhengighetsegenskapen, har en <xref:System.Windows.ValidateValueCallback>, og hvis <xref:System.Windows.DependencyProperty.IsValidType%2A>ville ha returnert `true`, og deretter returverdien blir som implementert i tilbakeringing.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Windows.ValidateValueCallback>       En null-verdi er en gyldig verdi for referanse avhengighet typeegenskaper eller en <xref:System.Nullable%601>avhengighetsegenskapen, og returnerer `true` for disse tilfellene.</xref:System.Nullable%601> I tilfeller der avhengighetsegenskapen er verken en referanse eller en <xref:System.Nullable%601>typen <xref:System.Windows.DependencyProperty.IsValidType%2A>tilbakestiller `false` for en null-verdi i stedet for Hev et unntak.</xref:System.Windows.DependencyProperty.IsValidType%2A> </xref:System.Nullable%601>"
  example:
  - "The following example uses IsValidValue as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.  \n  \n [!code-cs[PropertySystemEsoterics#TrySetValueWithValidate](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]\n [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]"
  syntax:
    content: public bool IsValidValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Verdien som skal se."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis verdien er godkjent, og er av riktig type eller en avledet type. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.IsValidValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Name
  id: Name
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Name
  nameWithType: DependencyProperty.Name
  fullName: System.Windows.DependencyProperty.Name
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter navnet på avhengighetsegenskapen."
  remarks: "Denne egenskapen henter navnet som er angitt som den `name` parameteren under avhengighet egenskapen registreringen. Dette navnet er uforanderlig og kan ikke `null` eller en tom streng. Duplisert navneregistreringer på den samme eiertypen tillates ikke, og Iverksett et unntak når du prøver å registrere duplisert.      > [!IMPORTANT] > I navnet på en avhengighetsegenskap må følge convention av samsvarer med navnet på den avhengighet egenskapsidentifikator minus suffikset &quot;Egenskapen&quot;. Hvis du vil ha mer informasjon, se [egenskaper for egendefinert avhengighet](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example queries various characteristics of a dependency property identifier, including the Name.  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "Navnet på egenskapen."
  overload: System.Windows.DependencyProperty.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Angir alternative metadata for denne avhengighetsegenskapen når det finnes på forekomster av angitt type, overstyrer metadataene som fantes for avhengighetsegenskapen som den er arvet fra basistyper."
  remarks: "Avhengighet egenskapmetadata skal overstyres før egenskapen systemet bruker avhengighetsegenskapen. Dette lik klokkeslettet da bestemte forekomster er opprettet ved hjelp av klassen som registrerer avhengighetsegenskapen. Kall til OverrideMetadata kan bare utføres i statiske konstruktører av typen som gir seg selv som den `forType` parameteren av denne metoden eller via lignende objektforekomst. Forsøk på å endre metadata etter forekomster av eieren finnes, vil ikke heve unntak, men vil føre til inkonsekvente virkemåter i egenskapen systemet.       Etter metadata for en bestemt utledede klassen overstyringen er opprettet med denne metoden, vise senere forsøk på å overstyre metadata på denne samme utledede klassen et unntak.       De angitte metadataene slås sammen med metadataene for egenskapen for avhengighetsegenskapen fordi det finnes i basistabellen eieren. Egenskaper som ble angitt i den opprinnelige base metadata vil beholde; bare egenskaper som spesielt ble endret i den nye metadata overstyrer egenskaper base metadata. Noen egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>erstattes hvis angitt i de nye metadataene.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andre, slik som <xref:System.Windows.PropertyChangedCallback>, kombineres.</xref:System.Windows.PropertyChangedCallback> Merge-virkemåten avhenger av metadata egenskapstypen som brukes for overstyringen, og virkemåten her er for eksisterende egenskapen metadata klassene som brukes av [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] avhengighetsegenskaper. Hvis du vil ha mer informasjon, se [avhengighet egenskapmetadata](~/add/includes/ajax-current-ext-md.md) og [Framework egenskapmetadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "Typen der denne avhengighetsegenskapen arves og hvor de angitte metadataene for alternativ brukes."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadataene som skal brukes til avhengighetsegenskapen for overstyre typen."
  overload: System.Windows.DependencyProperty.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Forsøkte å overstyre metadata på en skrivebeskyttet avhengighetsegenskapen (operasjonen ikke kan utføres ved hjelp av denne signaturen)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Metadata ble allerede opprettet for avhengighetsegenskapen som den finnes på den angitte typen."
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Utstyr alternativ metadata for en skrivebeskyttet avhengighetsegenskapen når det finnes i forekomster av angitt type, overstyrer metadataene som ble angitt i den første avhengighet egenskap registreringen. Du må bestå av <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> for skrivebeskyttet avhengighetsegenskapen for å unngå å vise et unntak."
  remarks: "Denne signaturen gir underliggende implementering for en skrivebeskyttet avhengighet egenskapsidentifikator (<xref:System.Windows.DependencyPropertyKey>) metoden.</xref:System.Windows.DependencyPropertyKey> Hvis overstyrer metadata for en skrivebeskyttet avhengighetsegenskapen, kan du bruke <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>       Avhengighet egenskapmetadata skal overstyres før egenskapen systemet bruker avhengighetsegenskapen. Dette lik klokkeslettet da bestemte objekter er opprettet for klassen som registrerer avhengighetsegenskapen. Kall til <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>kan bare utføres i statiske konstruktører av typen som gir seg selv som den `forType` parameteren av denne metoden eller via lignende objektforekomst.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> Forsøk på å endre metadata etter forekomster av eieren finnes, vil ikke heve unntak, men vil føre til inkonsekvente virkemåter i egenskapen systemet.       Etter metadata for en bestemt utledede klassen overstyringen er opprettet med denne metoden, vise senere forsøk på å overstyre metadata på denne samme utledede klassen et unntak.       De angitte metadataene slås sammen med metadataene for egenskapen for avhengighetsegenskapen fordi det finnes i basistabellen eieren. Egenskaper som ble angitt i den opprinnelige base metadata vil beholde; bare egenskaper som spesielt ble endret i den nye metadata overstyrer egenskaper base metadata. Noen egenskaper som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>erstattes hvis angitt i de nye metadataene.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> Andre, slik som <xref:System.Windows.PropertyChangedCallback>, kombineres.</xref:System.Windows.PropertyChangedCallback> Virkemåte for sammenslåing avhenger av metadata egenskapstypen som brukes for overstyringen. Hvis du vil ha mer informasjon, se [avhengighet egenskapmetadata](~/add/includes/ajax-current-ext-md.md) og [Framework egenskapmetadata](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);
    parameters:
    - id: forType
      type: System.Type
      description: "Typen der denne avhengighetsegenskapen arves og hvor de angitte metadataene for alternativ brukes."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadataene som skal brukes til avhengighetsegenskapen for overstyre typen."
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "Hurtigtasten for en skrivebeskyttet avhengighetsegenskapen."
  overload: System.Windows.DependencyProperty.OverrideMetadata*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.OwnerType
  id: OwnerType
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
  fullName: System.Windows.DependencyProperty.OwnerType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter objekttypen som registrert avhengighetsegenskapen med egenskapen systemet, eller legge til seg selv som eier av egenskapen."
  remarks: "Denne verdien ble angitt under registrering av egenskapen. Eieren blir enten den opprinnelige registrering typen med en <xref:System.Windows.DependencyProperty>identifikator som er generert fra en <xref:System.Windows.DependencyProperty.Register%2A>kall eller typen som legges til seg selv som eier med en <xref:System.Windows.DependencyProperty>identifikator som er generert fra en <xref:System.Windows.DependencyProperty.AddOwner%2A>kall.</xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty>       OwnerType noen angitt <xref:System.Windows.DependencyProperty>er uforanderlig og kan ikke `null` i en gyldig <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty>"
  example:
  - "The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier. This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]"
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "Typen for objektet som er registrert egenskapen eller legges til seg selv som eier av egenskapen."
  overload: System.Windows.DependencyProperty.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.PropertyType
  id: PropertyType
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
  fullName: System.Windows.DependencyProperty.PropertyType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter typen som bruker avhengighetsegenskapen for verdien."
  remarks: "Denne egenskapen rapporterer hva slags egenskapsverdien som deklarert av den opprinnelige egenskapen-registreringen via den `propertyType` parameteren. Ligner den <xref:System.Windows.DependencyProperty.Name%2A>, en avhengighetsegenskapen egenskapstype er uforanderlig etter registrering.</xref:System.Windows.DependencyProperty.Name%2A>"
  example:
  - "The following example queries various characteristics of a dependency property identifier, including the PropertyType. The type name string of the PropertyType is obtained from the returned <xref:System.Type>.  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public Type PropertyType { get; }
    return:
      type: System.Type
      description: "Den <xref:System.Type>på egenskapsverdien.</xref:System.Type>"
  overload: System.Windows.DependencyProperty.PropertyType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ReadOnly
  id: ReadOnly
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
  fullName: System.Windows.DependencyProperty.ReadOnly
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter en verdi som angir om avhengighetsegenskapen identifisert av dette <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> forekomsten er en skrivebeskyttet avhengighetsegenskapen."
  remarks: "Egenskaper for skrivebeskyttet avhengighet registreres i systemet egenskapen ved å kalle den <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>metoden i stedet for den <xref:System.Windows.DependencyProperty.Register%2A>metoden.</xref:System.Windows.DependencyProperty.Register%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> Vedlagte egenskaper kan også være registrert som skrivebeskyttet. Se <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>       Skrivebeskyttet avhengighetsegenskaper krever en <xref:System.Windows.DependencyPropertyKey>identifikator i stedet for en <xref:System.Windows.DependencyProperty>ID til å utføre metadata operasjoner, for eksempel overstyrer metadataene eller angivelse av verdien.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey> Hvis du kjøpte en samling av <xref:System.Windows.DependencyProperty>identifikatorer via et kall til <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>eller en annen [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] som viser identifikatorer, sjekk verdien for ReadOnly før du prøver å kalle <xref:System.Windows.DependencyObject.SetValue%2A>eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>bruker egenskapsidentifikator som avhengighet som en inndataparameter for å bekrefte at avhengighetsegenskapen identifikatoren representerer ikke er skrivebeskyttet.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> </xref:System.Windows.DependencyProperty> Hvis verdien ReadOnly `true` på en avhengighetsegenskapen det er ingen programmatisk mulighet til å hente en referanse til det <xref:System.Windows.DependencyPropertyKey>identifikatoren for den avhengighetsegenskapen fra metadataene eller den <xref:System.Windows.DependencyProperty>identifikator; identifikatoren må være tilgjengelige som et statisk felt for å kalle <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>mot en skrivebeskyttet avhengighetsegenskapen.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> </xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey>       Når du oppretter en egendefinert avhengighetsegenskapen og registrere den som skrivebeskyttet, må du definere bare en get-aksessor for den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper egenskapen. Klassen må ellers en forvirrende objektmodell for den egenskap wrapperen sammenlignet med tilgang til avhengighetsegenskapen sikkerhetskopiering. Hvis du vil ha mer informasjon, se [egenskaper for egendefinert avhengighet](~/add/includes/ajax-current-ext-md.md) eller [egenskaper for skrivebeskyttelse avhengighet](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPProps](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpprops)]\n [!code-vb[PropertySystemEsoterics#DPProps](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpprops)]"
  syntax:
    content: public bool ReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis avhengighetsegenskapen er skrivebeskyttet. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyProperty.ReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  id: Register(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type)
  nameWithType: DependencyProperty.Register(String,Type,Type)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en avhengighetsegenskapen med det angitte egenskapsnavnet egenskapstype og Eiertype."
  remarks: "For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - >-
    [!code-cs[WPFAquariumSln#Register3Param](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#register3param)]
     [!code-vb[WPFAquariumSln#Register3Param](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#register3param)]
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere. Navnet må være unike innenfor navneområdet registrering av eiertypen."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en avhengighetsegenskapen med det angitte egenskapsnavnet egenskapstype, Eiertype og egenskapmetadata."
  remarks: "For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en avhengighetsegenskapen med det angitte egenskapsnavnet egenskapstype, Eiertype, egenskapmetadata og en tilbakeringing for validering av verdien for egenskapen."
  remarks: "For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).  \n  \n [!code-cs[DPCallbackOverride#CurrentDefinitionWithWrapper](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]\n [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]"
  syntax:
    content: public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referanse til en tilbakeringing som må utføre en egendefinert validering på avhengighet egenskapsverdien utover validering vanlig type."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.Register*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  id: RegisterAttached(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en vedlagte egenskap med det angitte egenskapsnavnet egenskapstype og Eiertype."
  remarks: "En vedlagte egenskap er et egenskapen begrep som er definert av [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]implementerer kobles egenskaper som avhengighetsegenskaper. Fordi den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] vedlagte er avhengighetsegenskaper, de kan ha metadataene som brukes som kan brukes av den generelle egenskapen for operasjoner, for eksempel reporting oppsettet egenskaper. Hvis du vil ha mer informasjon, se [knyttet egenskaper oversikt over](~/add/includes/ajax-current-ext-md.md).       For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers an attached property on an abstract class using this RegisterAttached signature.  \n  \n [!code-cs[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]\n [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]"
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en vedlagte egenskap med det angitte egenskapsnavnet egenskapstype, Eiertype og egenskapmetadata."
  remarks: "An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implements attached properties as dependency properties. Because the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property with RegisterAttached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with RegisterAttached even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use RegisterAttached to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen. Dette kan omfatte standardverdien, samt andre egenskaper."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en vedlagte egenskap med angitt egenskapstype, Eiertype, egenskapmetadata og verdien validering tilbakeringing for egenskapen."
  remarks: "An attached property is a property concept defined by [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]. [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implements attached properties as dependency properties. Because the [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics. For more information, see [Attached Properties Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example registers an attached property on an abstract class using this RegisterAttached signature. This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.  \n  \n [!code-cs[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]\n [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]"
  syntax:
    content: public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen. Dette kan omfatte standardverdien, samt andre egenskaper."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referanse til en tilbakeringing som må utføre en egendefinert validering på avhengighet egenskapsverdien utover validering vanlig type."
    return:
      type: System.Windows.DependencyProperty
      description: "En egenskapsidentifikator for avhengighet som skal brukes til å angi verdien for en <xref uid=&quot;langword_csharp_public static readonly&quot; name=&quot;public static readonly&quot; href=&quot;&quot;> </xref> i klassen. Denne identifikatoren brukes deretter å referere til avhengighetsegenskapen senere for operasjoner, for eksempel angi verdien programmatisk eller henting av metadata."
  overload: System.Windows.DependencyProperty.RegisterAttached*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en skrivebeskyttet vedlagte egenskap med angitt egenskapstype, Eiertype og egenskapmetadata."
  remarks: "This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> as a `public static readonly` field on your class.  \n  \n Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property as attached is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En avhengig egenskap nøkkel som skal brukes til å angi verdien for statiske skrivebeskyttet felt i klassen, som deretter brukes til å referere til avhengighetsegenskapen senere."
  overload: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en skrivebeskyttet vedlagte egenskap med angitt egenskapstype, Eiertype, egenskapmetadata og tilbakeringing validering."
  remarks: "This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>. Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>. Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic. It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> as a `public static readonly` field on your class.  \n  \n Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Without a public setter, an attached property cannot be set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax.  \n  \n For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.  \n  \n## Use RegisterAttached for Value-inheriting Dependency Properties  \n One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance. You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get* and Set\\* static methods to provide true attached property support accessors.   Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined. Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree. Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata. For more information, see [Property Value Inheritance](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: defaultMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referanse til en brukeropprettede tilbakeringing som må utføre en egendefinert validering på avhengighet egenskapsverdien utover validering vanlig type."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En avhengig egenskap nøkkel som skal brukes til å angi verdien for statiske skrivebeskyttet felt i klassen, som deretter brukes til å referere til avhengighetsegenskapen."
  overload: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  id: RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en skrivebeskyttet avhengighetsegenskapen med angitt egenskapstype, Eiertype og egenskapmetadata."
  remarks: "Denne metoden returnerer typen <xref:System.Windows.DependencyPropertyKey>, mens <xref:System.Windows.DependencyProperty.RegisterAttached%2A>returnerer typen <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyPropertyKey> Vanligvis er nøkler som representerer skrivebeskyttede egenskaper ikke offentliggjort, fordi nøklene kan brukes til å angi egenskapsverdien avhengighet ved å kalle <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> Klassen utformingen påvirker dine behov, men det anbefales vanligvis til å begrense tilgang og synligheten for noen <xref:System.Windows.DependencyPropertyKey>på de delene av koden som er nødvendig for å angi at avhengighetsegenskapen som en del av klasse eller en bestemt applikasjon logic.</xref:System.Windows.DependencyPropertyKey> Det anbefales at du viser en avhengighet egenskapsidentifikator for avhengighetsegenskapen skrivebeskyttet ved at verdien for <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>som en `public static readonly` på din klasse.</xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>       Skrivebeskyttet avhengighet er en ganske vanlige scenario begge i den eksisterende [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] og tilpassing scenarioer fordi andre [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] funksjoner kan krever en avhengighetsegenskap selv om denne egenskapen ikke er ment å være angis av brukere. Du kan bruke verdien til en skrivebeskyttet avhengighetsegenskapen som grunnlag for andre egenskapen system-operasjoner som tar en avhengighetsegenskapen, for eksempel basere en <xref:System.Windows.Trigger>på avhengighetsegenskapen i en stil.</xref:System.Windows.Trigger>       For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers an `AquariumSize` dependency property as read-only. The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`. Also, a wrapper is created for `AquariumSize`, with only a get accessor.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En avhengig egenskap nøkkel som skal brukes til å angi verdien for statiske skrivebeskyttet felt i klassen, som deretter brukes til å referere til avhengighetsegenskapen."
  overload: System.Windows.DependencyProperty.RegisterReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  id: RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Registrerer en skrivebeskyttet avhengighetsegenskapen med angitt egenskapstype, Eiertype, egenskapmetadata og tilbakeringing validering."
  remarks: "Denne metoden returnerer typen <xref:System.Windows.DependencyPropertyKey>, mens <xref:System.Windows.DependencyProperty.RegisterAttached%2A>returnerer typen <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyProperty.RegisterAttached%2A> </xref:System.Windows.DependencyPropertyKey> Vanligvis er nøkler som representerer skrivebeskyttede egenskaper ikke offentliggjort, fordi nøklene kan brukes til å angi egenskapsverdien avhengighet ved å kalle <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> Klassen utformingen påvirker dine behov, men det anbefales vanligvis til å begrense tilgang og synligheten for noen <xref:System.Windows.DependencyPropertyKey>på de delene av koden som er nødvendig for å angi at avhengighetsegenskapen som en del av klasse eller en bestemt applikasjon logic.</xref:System.Windows.DependencyPropertyKey> Det anbefales at du viser en avhengighet egenskapsidentifikator for avhengighetsegenskapen skrivebeskyttet ved at verdien for <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>som en `public static readonly` på din klasse.</xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName>       Skrivebeskyttet avhengighet er en ganske vanlige scenarioet. Du kan bruke verdien til en skrivebeskyttet avhengighetsegenskapen som grunnlag for andre egenskapen system-operasjoner som tar en avhengighetsegenskapen, for eksempel basere en <xref:System.Windows.Trigger>på avhengighetsegenskapen i en stil.</xref:System.Windows.Trigger>       For mer informasjon om avhengighet egenskapen registrering, kan du se <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>       Validering av en skrivebeskyttet avhengighetsegenskapen kanskje mindre viktige. Ikke-offentlig tilgangsnivået du angir for nøkkelen reduserer sannsynligheten for tilfeldig ugyldige inndata."
  syntax:
    content: public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på avhengighetsegenskapen til å registrere."
    - id: propertyType
      type: System.Type
      description: "Typen for egenskapen."
    - id: ownerType
      type: System.Type
      description: "Eiertypen som registrerer avhengighetsegenskapen."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Egenskapmetadata for avhengighetsegenskapen."
    - id: validateValueCallback
      type: System.Windows.ValidateValueCallback
      description: "En referanse til en brukeropprettede tilbakeringing som må utføre en egendefinert validering på avhengighet egenskapsverdien utover validering vanlig type."
    return:
      type: System.Windows.DependencyPropertyKey
      description: "En avhengig egenskap nøkkel som skal brukes til å angi verdien for statiske skrivebeskyttet felt i klassen, som deretter brukes til å referere til avhengighetsegenskapen senere."
  overload: System.Windows.DependencyProperty.RegisterReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ToString
  id: ToString
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ToString()
  nameWithType: DependencyProperty.ToString()
  fullName: System.Windows.DependencyProperty.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Returnerer strengrepresentasjon av avhengighetsegenskapen."
  remarks: "Returnerer for denne implementeringen av <xref:System.Windows.DependencyProperty.Name%2A>egenskapsverdi.</xref:System.Windows.DependencyProperty.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Strengrepresentasjon av avhengighetsegenskapen."
  overload: System.Windows.DependencyProperty.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.UnsetValue
  id: UnsetValue
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: UnsetValue
  nameWithType: DependencyProperty.UnsetValue
  fullName: System.Windows.DependencyProperty.UnsetValue
  type: Field
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Angir en statisk verdi som brukes av den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] egenskapen system snarere enn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> til å angi at egenskapen finnes, men har ikke verdien som er angitt av egenskapen-systemet."
  remarks: "UnsetValue er en sentinel-verdi som skal brukes for scenarioer der den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] egenskapen systemet er kan ikke fastsette en forespurte <xref:System.Windows.DependencyProperty>verdi.</xref:System.Windows.DependencyProperty> UnsetValue brukes snarere enn `null`fordi `null` kan være en gyldig egenskapsverdi, i tillegg til en gyldig (og ofte brukte) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</xref:System.Windows.PropertyMetadata.DefaultValue%2A>       UnsetValue returneres aldri utenfor <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName>.</xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName> Når du kaller <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName>på en avhengighetsegenskap i en <xref:System.Windows.DependencyObject>forekomsten gjelder én av følgende: – en avhengighetsegenskapen har en standardverdi som er opprettet i metadata, og denne verdien, returneres.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName> Denne verdien kan komme fra <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</xref:System.Windows.DependencyProperty.DefaultMetadata%2A>      – En annen verdi ble opprettet av egenskapen systemet, og standardverdien er ikke lenger relevant. Hvis du vil ha mer informasjon, se [avhengighet egenskapen verdien prioriteten](~/add/includes/ajax-current-ext-md.md).       Angi en <xref:System.Windows.PropertyMetadata.DefaultValue%2A>av UnsetValue er spesielt ikke tillatt.</xref:System.Windows.PropertyMetadata.DefaultValue%2A>       <xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName>Returnerer UnsetValue når den forespurte egenskapen ikke ble angitt lokalt.</xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName>       UnsetValue er en spesiell betydning når den brukes som verdien som returneres av en <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Hvis du vil ha mer informasjon, se [avhengighet egenskapen tilbakeringinger og validering](~/add/includes/ajax-current-ext-md.md).       Hvis du binder til en database, Vær oppmerksom på at UnsetValue ikke tilsvarer <xref:System.DBNull.Value>, på samme måten hvordan <xref:System.DBNull.Value>tilsvarer ikke en true null.</xref:System.DBNull.Value> </xref:System.DBNull.Value>"
  syntax:
    content: public static readonly object UnsetValue;
    return:
      type: System.Object
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyProperty.ValidateValueCallback
  id: ValidateValueCallback
  parent: System.Windows.DependencyProperty
  langs:
  - csharp
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
  fullName: System.Windows.DependencyProperty.ValidateValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter validering tilbakeringing verdien for avhengighetsegenskapen."
  remarks: "Denne egenskapen vil inneholde `null` for alle avhengighetsegenskapen med tilbakeringing ingen registrerte validering.       Kontrollere verdi tilbakeringinger må utføre en handling i en statisk meningsløst: validering brukt gjennom den <xref:System.Windows.ValidateValueCallback>kan ikke avgjøre om den angitte verdien er ugyldig for en bestemt forekomst.</xref:System.Windows.ValidateValueCallback> Tilbakeringing kan bare finne ut om alle objekter som har avhengighetsegenskapen må eller bør ikke godtar den angitte verdien som gyldig. Hvis du trenger å utføre validering som er avhengig vel vitende om verdiene i andre avhengighetsegenskaper på en bestemt forekomst, Bruk et <xref:System.Windows.CoerceValueCallback>i stedet.</xref:System.Windows.CoerceValueCallback> Den <xref:System.Windows.CoerceValueCallback>er registrert som en del av avhengighet egenskapmetadata i stedet for direkte i egenskapsidentifikator avhengighet.</xref:System.Windows.CoerceValueCallback> Hvis du vil ha mer informasjon, se [avhengighet egenskapen tilbakeringinger og validering](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.ValidateValueCallback ValidateValueCallback { get; }
    return:
      type: System.Windows.ValidateValueCallback
      description: "Verdien validering tilbakeringing for denne avhengighetsegenskapen, som er oppgitt den <code> validateValueCallback </code> parameter i den opprinnelige avhengighet egenskap registreringen."
  overload: System.Windows.DependencyProperty.ValidateValueCallback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyProperty.AddOwner(System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner(Type)
  nameWithType: DependencyProperty.AddOwner(Type)
  fullName: System.Windows.DependencyProperty.AddOwner(Type)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner(Type,PropertyMetadata)
  nameWithType: DependencyProperty.AddOwner(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.AddOwner(Type,PropertyMetadata)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty.DefaultMetadata
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
  fullName: System.Windows.DependencyProperty.DefaultMetadata
- uid: System.Windows.DependencyProperty.GetHashCode
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyProperty.GetHashCode()
  fullName: System.Windows.DependencyProperty.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyProperty.GetMetadata(System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(Type)
  nameWithType: DependencyProperty.GetMetadata(Type)
  fullName: System.Windows.DependencyProperty.GetMetadata(Type)
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(DependencyObject)
  nameWithType: DependencyProperty.GetMetadata(DependencyObject)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata(DependencyObjectType)
  nameWithType: DependencyProperty.GetMetadata(DependencyObjectType)
  fullName: System.Windows.DependencyProperty.GetMetadata(DependencyObjectType)
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyProperty.GlobalIndex
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
  fullName: System.Windows.DependencyProperty.GlobalIndex
- uid: System.Windows.DependencyProperty.IsValidType(System.Object)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidType(Object)
  nameWithType: DependencyProperty.IsValidType(Object)
  fullName: System.Windows.DependencyProperty.IsValidType(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.DependencyProperty.IsValidValue(System.Object)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidValue(Object)
  nameWithType: DependencyProperty.IsValidValue(Object)
  fullName: System.Windows.DependencyProperty.IsValidValue(Object)
- uid: System.Windows.DependencyProperty.Name
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Name
  nameWithType: DependencyProperty.Name
  fullName: System.Windows.DependencyProperty.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  nameWithType: DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
  fullName: System.Windows.DependencyProperty.OverrideMetadata(Type,PropertyMetadata,DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyProperty.OwnerType
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
  fullName: System.Windows.DependencyProperty.OwnerType
- uid: System.Windows.DependencyProperty.PropertyType
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
  fullName: System.Windows.DependencyProperty.PropertyType
- uid: System.Windows.DependencyProperty.ReadOnly
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
  fullName: System.Windows.DependencyProperty.ReadOnly
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type)
  nameWithType: DependencyProperty.Register(String,Type,Type)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type)
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.Register(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.ValidateValueCallback
  parent: System.Windows
  isExternal: false
  name: ValidateValueCallback
  nameWithType: ValidateValueCallback
  fullName: System.Windows.ValidateValueCallback
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type)
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttached(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterAttachedReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata)
- uid: System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  nameWithType: DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
  fullName: System.Windows.DependencyProperty.RegisterReadOnly(String,Type,Type,PropertyMetadata,ValidateValueCallback)
- uid: System.Windows.DependencyProperty.ToString
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ToString()
  nameWithType: DependencyProperty.ToString()
  fullName: System.Windows.DependencyProperty.ToString()
- uid: System.Windows.DependencyProperty.UnsetValue
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: UnsetValue
  nameWithType: DependencyProperty.UnsetValue
  fullName: System.Windows.DependencyProperty.UnsetValue
- uid: System.Windows.DependencyProperty.ValidateValueCallback
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
  fullName: System.Windows.DependencyProperty.ValidateValueCallback
- uid: System.Windows.DependencyProperty.AddOwner*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: AddOwner
  nameWithType: DependencyProperty.AddOwner
- uid: System.Windows.DependencyProperty.DefaultMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: DefaultMetadata
  nameWithType: DependencyProperty.DefaultMetadata
- uid: System.Windows.DependencyProperty.GetHashCode*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyProperty.GetHashCode
- uid: System.Windows.DependencyProperty.GetMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GetMetadata
  nameWithType: DependencyProperty.GetMetadata
- uid: System.Windows.DependencyProperty.GlobalIndex*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: GlobalIndex
  nameWithType: DependencyProperty.GlobalIndex
- uid: System.Windows.DependencyProperty.IsValidType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidType
  nameWithType: DependencyProperty.IsValidType
- uid: System.Windows.DependencyProperty.IsValidValue*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: IsValidValue
  nameWithType: DependencyProperty.IsValidValue
- uid: System.Windows.DependencyProperty.Name*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Name
  nameWithType: DependencyProperty.Name
- uid: System.Windows.DependencyProperty.OverrideMetadata*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyProperty.OverrideMetadata
- uid: System.Windows.DependencyProperty.OwnerType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: OwnerType
  nameWithType: DependencyProperty.OwnerType
- uid: System.Windows.DependencyProperty.PropertyType*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: PropertyType
  nameWithType: DependencyProperty.PropertyType
- uid: System.Windows.DependencyProperty.ReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ReadOnly
  nameWithType: DependencyProperty.ReadOnly
- uid: System.Windows.DependencyProperty.Register*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: Register
  nameWithType: DependencyProperty.Register
- uid: System.Windows.DependencyProperty.RegisterAttached*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttached
  nameWithType: DependencyProperty.RegisterAttached
- uid: System.Windows.DependencyProperty.RegisterAttachedReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterAttachedReadOnly
  nameWithType: DependencyProperty.RegisterAttachedReadOnly
- uid: System.Windows.DependencyProperty.RegisterReadOnly*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: RegisterReadOnly
  nameWithType: DependencyProperty.RegisterReadOnly
- uid: System.Windows.DependencyProperty.ToString*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ToString
  nameWithType: DependencyProperty.ToString
- uid: System.Windows.DependencyProperty.ValidateValueCallback*
  parent: System.Windows.DependencyProperty
  isExternal: false
  name: ValidateValueCallback
  nameWithType: DependencyProperty.ValidateValueCallback
