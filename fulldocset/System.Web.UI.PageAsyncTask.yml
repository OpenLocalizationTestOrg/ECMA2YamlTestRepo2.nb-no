### YamlMime:ManagedReference
items:
- uid: System.Web.UI.PageAsyncTask
  id: PageAsyncTask
  children:
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  - System.Web.UI.PageAsyncTask.BeginHandler
  - System.Web.UI.PageAsyncTask.EndHandler
  - System.Web.UI.PageAsyncTask.ExecuteInParallel
  - System.Web.UI.PageAsyncTask.State
  - System.Web.UI.PageAsyncTask.TimeoutHandler
  langs:
  - csharp
  name: PageAsyncTask
  nameWithType: PageAsyncTask
  fullName: System.Web.UI.PageAsyncTask
  type: Class
  summary: "Inneholder informasjon om en asynkron oppgave som er registrert på en side. Denne klassen kan ikke arves."
  remarks: "ASP.NET-versjon 2.0, kan du registrere flere aktiviteter på en side og kjører asynkront før gjengivelse av siden. Du kan angi at en oppgave kjøres asynkront, hvis det er en treg prosess, og du ikke vil at andre prosesser som skal knyttes mens den kjører. De asynkrone oppgavene kan kjøres parallelt eller etter hverandre.       Et PageAsyncTask-objekt må være registrert til å bla gjennom den <xref:System.Web.UI.Page.RegisterAsyncTask%2A>metoden.</xref:System.Web.UI.Page.RegisterAsyncTask%2A> Selve siden har ikke behandles asynkront for å utføre asynkrone oppgaver. Du kan angi den `Async` attributt enten `true` (som vises i følgende kodeeksempel) eller `false` på siden med direktivet og asynkrone oppgaver fremdeles behandles asynkront: `<%@ Page Async=&quot;true&quot; %>` når den `Async` attributtet er satt til `false`, tråden som utfører siden vil bli blokkert inntil alle asynkrone oppgaver er fullført.       Asynkrone oppgaver registrert før den <xref:System.Web.UI.Page.PreRenderComplete>hendelsen kjøres automatisk av siden hvis de ikke har allerede er utført.</xref:System.Web.UI.Page.PreRenderComplete> Disse asynkrone oppgaver registrert etter den <xref:System.Web.UI.Page.PreRenderComplete>hendelsen må utføres eksplisitt gjennom den <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metoden.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> </xref:System.Web.UI.Page.PreRenderComplete> Den <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metoden kan også brukes til å starte aktiviteter før den <xref:System.Web.UI.Page.PreRenderComplete>hendelsen.</xref:System.Web.UI.Page.PreRenderComplete> </xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Den <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metoden utfører alle registrerte asynkrone oppgaver på siden som ikke er utført.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>       En asynkron oppgaven skal som standard tidsavbrudd Hvis det ikke er fullført innen 45 sekunder. Du kan angi en annen Tidsavbruddverdien i Web.config-filen eller page-direktivet. Den `<pages>` -delen i Web.config-filen inneholder en `asyncTimeout` attributt, som vist nedenfor.       `<system.web>`       `<pages asyncTimeout=&quot;30&quot;>`       `</pages>`       `</system.web>`Direktivet siden inneholder en `AsyncTimeout` attributtet.       `<%@ Page AsyncTimeout=&quot;30&quot; %>`"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_2.cs)]"
  syntax:
    content: public sealed class PageAsyncTask
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> klasse ved hjelp av en hendelsesbehandling som lar oppgaven avbrytes."
  remarks: "Denne konstruktøren bryter en <xref:System.Web.CancellableTaskEventHandler>delegere slik at den <xref:System.Web.UI.PageAsyncTask>objekt kan integrere asynkrone koden (basert på <xref:System.Threading.Tasks.Task>objekter) med funksjonen for asynkrone sider eksisterende ASP.NET Web-skjemaer.</xref:System.Threading.Tasks.Task> </xref:System.Web.UI.PageAsyncTask> </xref:System.Web.CancellableTaskEventHandler> ASP.NET signaliserer i <xref:System.Threading.CancellationToken>objekt som er sendt til en <xref:System.Web.CancellableTaskEventHandler>delegere annulleringen basert på den <xref:System.Web.UI.Page.AsyncTimeout%2A>attributtet angitt i den `@ Page` direktivet av websiden.</xref:System.Web.UI.Page.AsyncTimeout%2A> </xref:System.Web.CancellableTaskEventHandler> </xref:System.Threading.CancellationToken> Når den <xref:System.Web.UI.Page.AsyncTimeout%2A>verdi er nådd, den <xref:System.Threading.CancellationToken>objektet vil signaliseres.</xref:System.Threading.CancellationToken> </xref:System.Web.UI.Page.AsyncTimeout%2A> Den `CancellationToken` parameteren må sendes til en asynkron API-er som kalles av implementeringen din av <xref:System.Web.CancellableTaskEventHandler>klasse.</xref:System.Web.CancellableTaskEventHandler>"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "Hendelsesbehandling."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> klasse ved hjelp av en hendelsesbehandling som lar oppgaven skal behandles."
  syntax:
    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.Tasks.Task}
      description: "Hendelsesbehandling."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> klasse bruker standardverdien for kjøres parallelt."
  remarks: "Denne implementeringen av konstruktøren angir den <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>egenskapen `false` slik aktiviteten asynkrone ikke behandles parallelt med andre oppgaver på siden.</xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "Behandlingsprogrammet å kalle når du begynner en asynkron oppgave."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "Behandlingsprogrammet å kalle når oppgaven fullføres innen tidsavbruddsperioden."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "Behandlingsprogrammet å kalle når oppgaven ikke er fullført innen tidsavbruddsperioden."
    - id: state
      type: System.Object
      description: "Objektet som representerer tilstanden til aktiviteten."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <code> beginHandler </code> parameteren eller <code> endHandler </code> parameteren er ikke angitt."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> klasse ved hjelp av den angitte verdien for kjøres parallelt."
  remarks: "Denne implementeringen av konstruktøren, kan du angi om aktiviteten asynkrone behandles parallelt med andre oppgaver på siden."
  example:
  - "The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/3bf006c1-f830-4b70-9cc2-_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/3bf006c1-f830-4b70-9cc2-_1.aspx)]"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "Behandlingsprogrammet å kalle når du begynner en asynkron oppgave."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "Behandlingsprogrammet å kalle når oppgaven fullføres innen tidsavbruddsperioden."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "Behandlingsprogrammet å kalle når oppgaven ikke er fullført innen tidsavbruddsperioden."
    - id: state
      type: System.Object
      description: "Objektet som representerer tilstanden til aktiviteten."
    - id: executeInParallel
      type: System.Boolean
      description: "Verdi som angir om oppgaven kan behandles parallelt med andre oppgaver."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <code> beginHandler </code> parameteren eller <code> endHandler </code> parameteren er ikke angitt."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  id: BeginHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Metoden for å kalle når henter begynnelsen av en asynkron oppgave."
  remarks: "Representanten BeginHandler er angitt i konstruktøren."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_2.cs)]"
  syntax:
    content: public System.Web.BeginEventHandler BeginHandler { get; }
    return:
      type: System.Web.BeginEventHandler
      description: "En <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> representanten som representerer metoden for å kalle når du begynner aktiviteten asynkrone."
  overload: System.Web.UI.PageAsyncTask.BeginHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.EndHandler
  id: EndHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Henter metoden å kalle når oppgaven er fullført innen tidsavbruddsperioden."
  remarks: "Representanten EndHandler er angitt i konstruktøren."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler EndHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "En <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> representanten som representerer metoden å kalle når oppgaven er fullført innen tidsavbruddsperioden."
  overload: System.Web.UI.PageAsyncTask.EndHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  id: ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Henter en verdi som angir om oppgaven kan behandles parallelt med andre oppgaver."
  remarks: "Egenskapen ExecuteInParallel er angitt i konstruktøren. Når flere aktiviteter er registrert i en side og ExecuteInParallel-egenskapen er satt til `true`, og deretter aktivitetene behandles samtidig. Men hvis egenskapen ExecuteInParallel er satt til `false`, og deretter aktivitetene behandlet etter hverandre. For eksempel hvis en side inneholdt to asynkrone oppgaver som hver tok 5 sekunder å fullføre og ExecuteInParallel er satt til `true`, både oppgaver fullfører i 5 sekunder. Hvis ExecuteInParallel er satt til `false` for disse samme aktiviteter to, og deretter den første aktiviteten fullfører i 5 sekunder, og den andre aktiviteten fullfører 5 sekunder etter fullføring av den første aktiviteten."
  example:
  - "The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_3_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_3_1.aspx)]"
  syntax:
    content: public bool ExecuteInParallel { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis oppgaven skal behandles parallelt med andre oppgaver. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.State
  id: State
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Henter et objekt som representerer tilstanden til aktiviteten."
  remarks: "State-egenskapen er angitt i konstruktøren, og kan ikke endres under kjøring av aktiviteten asynkrone. Du kan skille asynkrone oppgaver i en side ved å tilordne unike strengverdier til de respektive egenskapene for tilstand."
  example:
  - "The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_4_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_4_1.aspx)]"
  syntax:
    content: public object State { get; }
    return:
      type: System.Object
      description: "En <xref:System.Object>som representerer tilstanden til aktiviteten.</xref:System.Object>"
  overload: System.Web.UI.PageAsyncTask.State*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  id: TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Henter metoden å kalle når aktiviteten ikke fullført innen tidsavbruddsperioden."
  remarks: "Representanten TimeoutHandler er angitt i konstruktøren."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler TimeoutHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "En <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> representanten som representerer metoden å kalle når aktiviteten ikke fullført innen tidsavbruddsperioden."
  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
- uid: System.Web.UI.PageAsyncTask.#ctor*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask
  nameWithType: PageAsyncTask.PageAsyncTask
- uid: System.Web.UI.PageAsyncTask.BeginHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
