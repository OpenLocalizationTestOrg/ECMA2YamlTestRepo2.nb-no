### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Inneholder protokollen UDP (User Datagram) nettverk."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse."
  remarks: "Denne konstruktøren oppretter en ny <xref:System.Net.Sockets.UdpClient>og gjør den underliggende leverandøren for å tilordne mest aktuelle lokale IPv4-adresse og port nummer.</xref:System.Net.Sockets.UdpClient> Hvis denne konstruktøren brukes, den <xref:System.Net.Sockets.UdpClient>forekomsten med som er angitt en adresseserien med IPv4 som ikke kan endres eller overskrevet av et koble metodekall med et IPv6-mål.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Denne konstruktøren, kan ikke brukes for å bli med i en multikastings gruppe fordi den ikke utfører socket-binding. Også fungerer den bare med IPv4-adressetyper."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse og bindes til det lokale portnummeret som er angitt."
  remarks: "Denne konstruktøren oppretter en underliggende <xref:System.Net.Sockets.Socket>og bindes til portnummeret du skal kommunisere.</xref:System.Net.Sockets.Socket> Bruk denne konstruktøren Hvis du bare er interessert i innstillingen lokale portnummeret. Leverandøren av underliggende tilordne den lokale IP-adressen. Hvis du sender 0 til konstruktøren, tilordne underliggende tjenesteleverandøren et portnummer. Hvis denne konstruktøren brukes, den <xref:System.Net.Sockets.UdpClient>forekomsten med som er angitt en adresseserien med IPv4 som ikke kan endres eller overskrevet av et koble metodekall med et IPv6-mål.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Denne konstruktøren fungerer bare med IPv4-adressetyper."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "Lokale portnummeret du skal kommunisere."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den <code> port </code> parameteren er større enn <xref:System.Net.IPEndPoint.MaxPort>eller mindre enn <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> </xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse og bindes til det angitte lokale sluttpunktet."
  remarks: "Denne konstruktøren oppretter en ny <xref:System.Net.Sockets.UdpClient>og binder den til den <xref:System.Net.IPEndPoint>angitt av den `localEP` parameteren.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> Før du kaller opp denne konstruktøren, må du opprette en <xref:System.Net.IPEndPoint>ved hjelp av IP-adresse og port. hvor du vil sende og motta data.</xref:System.Net.IPEndPoint> Du trenger ikke angi en lokal IP-adressen og portnummeret for sending og mottak av data. Hvis du ikke gjør dette, tilordne underliggende tjenesteleverandøren mest aktuelle lokale IP-adresse og port. tallet.       Hvis denne konstruktøren brukes, den <xref:System.Net.Sockets.UdpClient>forekomsten er angitt med adresse familien angitt av den `localEP` parameter som ikke endres eller overskrevet av et koble metodekall med en annen adresse serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "En <xref:System.Net.IPEndPoint>som respresents det lokale sluttpunktet som du binder UDP-tilkobling.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse."
  remarks: "Den `family` parameteren bestemmer om lytteobjektet bruker en IP-versjon 4-adresse (IPv4) eller versjon 6 (IPv6) en IP-adresse. Hvis du vil bruke en IPv4-adresse, sendes det <xref:System.Net.Sockets.AddressFamily>verdi.</xref:System.Net.Sockets.AddressFamily> Hvis du vil bruke en IPv6-adresse, sendes det <xref:System.Net.Sockets.AddressFamily>verdi.</xref:System.Net.Sockets.AddressFamily> Sending av en annen verdi vil føre til at metoden skal returneres <xref:System.ArgumentException>.</xref:System.ArgumentException>       Hvis denne konstruktøren brukes, den <xref:System.Net.Sockets.UdpClient>forekomsten er angitt med adresse familien angitt av den `family` parameter som ikke endres eller overskrevet av et koble metodekall med en annen adresse serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       UdpClient passer ikke for deltakelse en multikastings gruppen fordi den ikke utfører socket-binding."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Én av de <xref:System.Net.Sockets.AddressFamily>verdier som angir adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse og bindes til det lokale portnummeret som er angitt."
  remarks: "Denne konstruktøren oppretter en underliggende <xref:System.Net.Sockets.Socket>og bindes til portnummeret du skal kommunisere.</xref:System.Net.Sockets.Socket>       Den `family` parameteren bestemmer om lytteobjektet bruker en IP-versjon 4-adresse (IPv4) eller versjon 6 (IPv6) en IP-adresse. Hvis du vil bruke en IPv4-adresse, sendes det <xref:System.Net.Sockets.AddressFamily>verdi.</xref:System.Net.Sockets.AddressFamily> Hvis du vil bruke en IPv6-adresse, sendes det <xref:System.Net.Sockets.AddressFamily>verdi.</xref:System.Net.Sockets.AddressFamily> Sending av en annen verdi vil føre til at metoden skal returneres <xref:System.ArgumentException>.</xref:System.ArgumentException>       Hvis denne konstruktøren brukes, den <xref:System.Net.Sockets.UdpClient>forekomsten er angitt med adresse familien angitt av den `family` parameter som ikke endres eller overskrevet av et koble metodekall med en annen adresse serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "Porten for lytting for innkommende tilkoblingsforsøk."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Én av de <xref:System.Net.Sockets.AddressFamily>verdier som angir adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>er større enn <xref:System.Net.IPEndPoint.MaxPort> eller mindre enn <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse og oppretter en standard ekstern vert."
  remarks: "Denne konstruktøren initialiserer en ny <xref:System.Net.Sockets.UdpClient>og oppretter en ekstern vert ved hjelp av den `hostname` og `port` parametere.</xref:System.Net.Sockets.UdpClient> Oppretter en standard ekstern vert er valgfrie. Hvis du bruker denne konstruktøren, har du ikke angir en ekstern vert i hvert kall til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A> Angir standard ekstern vert er begrenset til bare som er vert for. Du kan endre den eksterne Standardverten når som helst ved å kalle den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du vil angi en ekstern vert i kallet til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden, bruker ikke denne konstruktøren.</xref:System.Net.Sockets.UdpClient.Send%2A>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "Navnet på den eksterne DNS-verten som du har tenkt å koble til."
    - id: port
      type: System.Int32
      description: "Eksterne portnummeret du vil koble til."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>er ikke mellom <xref:System.Net.IPEndPoint.MinPort> og <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en verdi som angir om det er opprettet en standard ekstern vert."
  remarks: "Klasser som er avledet fra <xref:System.Net.Sockets.UdpClient>kan bruke denne egenskapen til å fastsette om det er opprettet en standard ekstern vert.</xref:System.Net.Sockets.UdpClient> Du kan opprette en ekstern standardvert ved å bruke riktig konstruktør eller ved å kalle den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du opprette en ekstern standardvert, kan du angi en ekstern vert i kallet til <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en tilkobling er aktiv. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aktiverer eller deaktiverer {traversering oversettelsen (Network Address Translation) på en <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> forekomsten."
  remarks: "Metoden AllowNatTraversal brukes til å aktivere eller deaktivere NAT-gjennomgang for en <xref:System.Net.Sockets.UdpClient>forekomsten.</xref:System.Net.Sockets.UdpClient> {Traversering NAT kan angis ved hjelp av Teredo, 6to4 eller en ISATAP-tunnel.       Når den `allowed` parameteren er USANN, <xref:System.Net.Sockets.SocketOptionName>alternativet tilknyttede socket er satt til <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Dette deaktiverer eksplisitt NAT-gjennomgang for en <xref:System.Net.Sockets.UdpClient>forekomsten.</xref:System.Net.Sockets.UdpClient>       Når den `allowed` parameteren er SANN, <xref:System.Net.Sockets.SocketOptionName>alternativet tilknyttede socket er satt til <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Dette kan gjøre at traversering NAT for en <xref:System.Net.Sockets.UdpClient>avhengig av brannmurreglene på plass på systemet.</xref:System.Net.Sockets.UdpClient>       En Teredo-adresse er en IPv6-adresse med prefikset for 2001:: / 32. Teredo-adresser kan returneres via normal DNS-navneoppløsning eller listes opp som et IPv6-adresse som tilordnes til et lokalt grensesnitt."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "En boolsk verdi som angir om å aktivere eller deaktivere NAT-gjennomgang."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter mengden data som er mottatt fra nettverket som er klart til å lese."
  remarks: "Egenskapen tilgjengelig brukes til å finne ut hvor mye data i kø i nettverket bufferen for lesing. Hvis data er tilgjengelig, kaller <xref:System.Net.Sockets.NetworkStream.Read%2A>å hente data.</xref:System.Net.Sockets.NetworkStream.Read%2A> Hvis ingen data er tilgjengelig, returnerer den tilgjengelige egenskapen 0.       Hvis den eksterne verten avsluttes eller lukker tilkoblingen, oppstår tilgjengelig egenskapen <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>laster du ned feilkoden og i Windows Sockets versjon 2 API feil kode dokumentasjonen på MSDN-biblioteket på [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for en detaljert beskrivelse av feilen.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "Antall byte mottatt fra nettverket."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under forsøk på å få tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Mottar en datagram asynkront fra ekstern vert."
  remarks: "Den asynkrone operasjonen BeginReceive må være fullført kaller den <xref:System.Net.Sockets.UdpClient.EndReceive%2A>metoden.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> Vanligvis metoden startes av den `requestCallback` delegere.       Denne metoden blokkerer ikke før operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke den <xref:System.Net.Sockets.UdpClient.Receive%2A>metoden.</xref:System.Net.Sockets.UdpClient.Receive%2A>       Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når operasjonen er fullført.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Et brukerdefinert objekt som inneholder informasjon om receive-operasjonen. Dette objektet er sendt til den `requestCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objektet som refererer til den asynkrone receive.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en datagram asynkront til en ekstern vert. Målet ble angitt tidligere av et kall til <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*>"
  remarks: "Den asynkrone operasjonen BeginSend må være fullført kaller den <xref:System.Net.Sockets.UdpClient.EndSend%2A>metoden.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Vanligvis metoden startes av den `requestCallback` delegere.       Denne metoden blokkerer ikke før operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Sockets.UdpClient.Send%2A>metoden overbelastninger.</xref:System.Net.Sockets.UdpClient.Send%2A>       Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som inneholder dataene du vil bli sendt.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte som skal sendes."
    - id: requestCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når operasjonen er fullført.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Et brukerdefinert objekt som inneholder informasjon om sendeoperasjonen. Dette objektet er sendt til den `requestCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objektet som refererer til den asynkrone send.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en datagram asynkront til et mål. Målet er angitt i en <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint>"
  remarks: "Den asynkrone operasjonen BeginSend må være fullført kaller den <xref:System.Net.Sockets.UdpClient.EndSend%2A>metoden.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Vanligvis metoden startes av den `requestCallback` delegere.       Denne metoden blokkerer ikke før operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Sockets.UdpClient.Send%2A>metoden overbelastninger.</xref:System.Net.Sockets.UdpClient.Send%2A>       Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som inneholder dataene du vil bli sendt.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte som skal sendes."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Den <xref:System.Net.EndPoint>som representerer målet for dataene.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når operasjonen er fullført.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Et brukerdefinert objekt som inneholder informasjon om sendeoperasjonen. Dette objektet er sendt til den `requestCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objektet som refererer til den asynkrone send.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en datagram asynkront til et mål. Målet er angitt i vertsnavnet og portnummeret."
  remarks: "Den asynkrone operasjonen BeginSend må være fullført kaller den <xref:System.Net.Sockets.UdpClient.EndSend%2A>metoden.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Vanligvis metoden startes av den `requestCallback` delegere.       Denne metoden blokkerer ikke før operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Sockets.UdpClient.Send%2A>metoden overbelastninger.</xref:System.Net.Sockets.UdpClient.Send%2A>       Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som inneholder dataene du vil bli sendt.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte som skal sendes."
    - id: hostname
      type: System.String
      description: "Målvert."
    - id: port
      type: System.Int32
      description: "Portnummeret for målet."
    - id: requestCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når operasjonen er fullført.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Et brukerdefinert objekt som inneholder informasjon om sendeoperasjonen. Dette objektet er sendt til den `requestCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objektet som refererer til den asynkrone send.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir det underliggende nettverket <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>oppretter en <xref:System.Net.Sockets.Socket>brukes til å sende og motta data via et nettverk.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> Klasser som er avledet fra <xref:System.Net.Sockets.UdpClient>kan bruke denne egenskapen for å hente eller angi <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient> Bruk den underliggende <xref:System.Net.Sockets.Socket>returnert fra klienten Hvis du trenger tilgang enn det som <xref:System.Net.Sockets.UdpClient>gir.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> Du kan også bruke klienten til den underliggende <xref:System.Net.Sockets.Socket>til en eksisterende <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket> Dette er nyttig hvis du vil dra nytte av enkelt med <xref:System.Net.Sockets.UdpClient>en eksisterende <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "Det underliggende nettverket <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Lukker UDP-tilkobling."
  remarks: "Avsluttende deaktiverer underliggende <xref:System.Net.Sockets.Socket>og frigir alle behandlet ressurser som er knyttet til <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Oppretter en ekstern vert ved hjelp av angitt nettverkssted endepunktet."
  remarks: "Den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden oppretter en ekstern vert med verdien som er angitt i den `endPoint` parameteren.</xref:System.Net.Sockets.UdpClient.Connect%2A> Når du opprettet, du har ikke til å angi en ekstern vert i hvert kall til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A>       Oppretter en standard ekstern vert er valgfrie. Angir standard ekstern vert er begrenset til bare som er vert for. Hvis du vil sende datagram til en annen ekstern vert, må du gjøre et annet kall til den <xref:System.Net.Sockets.UdpClient.Connect%2A>metode, eller Opprett en ny <xref:System.Net.Sockets.UdpClient>uten en standard ekstern vert.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du har opprettet en standard eksterne angi verten, og du også en ekstern vert i samtalen til <xref:System.Net.Sockets.UdpClient.Send%2A>metoden, <xref:System.Net.Sockets.UdpClient.Send%2A>vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Hvis du kaller den <xref:System.Net.Sockets.Socket.Connect%2A>metoden, datagram som kommer fra en adresse enn den angitte standarden, forkastes.</xref:System.Net.Sockets.Socket.Connect%2A> Du kan ikke angi standard ekstern vert til en kringkasting adresse med denne metoden hvis du arve fra <xref:System.Net.Sockets.UdpClient>, Bruk metoden klienten til å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Du kan imidlertid, kringkasting data til standard kringkasting adresse, 255.255.255.255, hvis du angir <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>i kallet til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Hvis programmet krever større kontroll over kringkasting adresser, kan du kan også gå til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Fordi det UDP-protokollen er forbindelsesløs, den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden ikke blokker.</xref:System.Net.Sockets.UdpClient.Connect%2A> Ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden hvis du ønsker å motta multicasted datagram.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "En <xref:System.Net.IPEndPoint>som angir nettverksendepunktet som du har tenkt å sende data.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Oppretter en ekstern vert med det angitte IP-adresse og port. tallet."
  remarks: "Den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden oppretter en ekstern vert ved hjelp av verdiene som er angitt i den `addr` og `port` parametere.</xref:System.Net.Sockets.UdpClient.Connect%2A> Når du opprettet, du har ikke til å angi en ekstern vert i hvert kall til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A>       Oppretter en standard ekstern vert er valgfrie. Angir standard ekstern vert er begrenset til bare som er vert for. Hvis du vil sende datagram til en annen ekstern vert, må du gjøre et annet kall til den <xref:System.Net.Sockets.UdpClient.Connect%2A>metode, eller Opprett en ny <xref:System.Net.Sockets.UdpClient>uten en standard ekstern vert.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du har opprettet en standard eksterne angi verten, og du også en ekstern vert i samtalen til <xref:System.Net.Sockets.UdpClient.Send%2A>metoden, <xref:System.Net.Sockets.UdpClient.Send%2A>vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Hvis du kaller den <xref:System.Net.Sockets.Socket.Connect%2A>metoden, datagram som kommer fra en adresse enn den angitte standarden, forkastes.</xref:System.Net.Sockets.Socket.Connect%2A> Du kan ikke angi standard ekstern vert til en kringkasting adresse med denne metoden hvis du arve fra <xref:System.Net.Sockets.UdpClient>, Bruk metoden klienten til å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Du kan imidlertid, kringkasting data til standard kringkasting adresse, 255.255.255.255, hvis du angir <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>i kallet til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Hvis programmet krever større kontroll over kringkasting adresser, kan du kan også gå til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Fordi det UDP-protokollen er forbindelsesløs, den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden ikke blokker.</xref:System.Net.Sockets.UdpClient.Connect%2A> Ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden hvis du ønsker å motta multicasted datagram.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "Den <xref:System.Net.IPAddress>til den eksterne verten som du har tenkt å sende data.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "Portnummeret du vil sende data."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>er lukket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>er ikke mellom <xref:System.Net.IPEndPoint.MinPort> og <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Oppretter en ekstern vert parametersettet med de angitte vert navnet og porten."
  remarks: "Metoden Connect oppretter en ekstern vert ved hjelp av verdiene som er angitt i den `port` og `hostname` parametere. Når du opprettet, du har ikke til å angi en ekstern vert i hvert kall til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A>       Oppretter en standard ekstern vert er valgfrie. Angir standard ekstern vert er begrenset til bare som er vert for. Hvis du vil sende datagram til en annen ekstern vert, må du opprette et annet kall til metoden Connect eller Opprett en ny <xref:System.Net.Sockets.UdpClient>uten en standard ekstern vert.</xref:System.Net.Sockets.UdpClient>       Hvis du har opprettet en standard eksterne angi verten, og du også en ekstern vert i samtalen til <xref:System.Net.Sockets.UdpClient.Send%2A>metoden, <xref:System.Net.Sockets.UdpClient.Send%2A>vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Hvis du kaller den <xref:System.Net.Sockets.Socket.Connect%2A>metoden, datagram som kommer fra en adresse enn den angitte standarden, forkastes.</xref:System.Net.Sockets.Socket.Connect%2A> Du kan ikke angi standard ekstern vert til en kringkasting adresse med denne metoden hvis du arve fra <xref:System.Net.Sockets.UdpClient>, Bruk metoden klienten til å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Du kan imidlertid, kringkasting data til standard kringkasting adresse, 255.255.255.255, hvis du angir <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>i kallet til den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Hvis programmet krever større kontroll over kringkasting adresser, kan du kan også gå til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Fordi det UDP-protokollen er forbindelsesløs, blokkerer ikke Connect-metoden. Ikke Kall metoden Connect Hvis du ønsker å motta multicasted datagram."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "DNS-navnet til den eksterne verten du vil sende data."
    - id: port
      type: System.Int32
      description: "Portnummeret på den eksterne verten som du har tenkt å sende data."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>er ikke mellom <xref:System.Net.IPEndPoint.MinPort> og <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Frigir behandlet ressursene som brukes av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> og eventuelt frigir administrerte ressurser."
  remarks: "Denne metoden kalles av offentlig `Dispose()`metoden og <xref:System.Object.Finalize%2A>metode.</xref:System.Object.Finalize%2A> `Dispose()`Aktiverer den beskyttede `Dispose(Boolean)` metoden med den `disposing` parameteren satt til `true`. <xref:System.Object.Finalize%2A>aktiverer `Dispose` med `disposing` satt til `false`.</xref:System.Object.Finalize%2A>       Når den `disposing` -parameteren er SANN, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.Net.Sockets.UdpClient>referanser.</xref:System.Net.Sockets.UdpClient> Denne metoden starter den `Dispose()` metode for hver referert objekt."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en <xref:System.Boolean>verdi som angir om den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> tillater IP (Internet Protocol) datagram være fragmentert.</xref:System.Boolean>"
  remarks: "Datagram krever fragmentert når størrelse overskrider den maksimale overføre MTU (Unit) overføring middels. Datagram kan være fragmentert av verten som sender eller av en mellomliggende ruter. Hvis en datagram må være fragmentert, og <xref:System.Net.Sockets.Socket.DontFragment%2A>alternativet er angitt i datagram forkastes og feilmeldingen Internet Control Message Protocol (ICMP) sendes tilbake til avsenderen av datagrammet.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> tillater datagram fragmentert; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Denne egenskapen kan bare angis for socketer som bruker den <xref:System.Net.Sockets.AddressFamily>flagget eller <xref:System.Net.Sockets.AddressFamily>flagg.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Forlater en multikastings gruppe."
  remarks: "Metoden DropMulticastGroup trekker <xref:System.Net.Sockets.UdpClient>fra gruppen multikastingsbyte identifisert av den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Etter å metoden DropMulticastGroup den underliggende <xref:System.Net.Sockets.Socket>sender en pakke for Internet Group Management Protocol (IGMP) til ruter, fjerner ruteren fra gruppen multikastingsbyte.</xref:System.Net.Sockets.Socket> Etter en <xref:System.Net.Sockets.UdpClient>trekker fra gruppen, vil den ikke lenger kunne motta sendte til denne gruppen.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Den <xref:System.Net.IPAddress>av gruppen multikastingsbyte forlate.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-adressen er ikke kompatibel med den <xref:System.Net.Sockets.AddressFamily>verdi som definerer adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Forlater en multikastings gruppe."
  remarks: "Metoden DropMulticastGroup trekker <xref:System.Net.Sockets.UdpClient>fra gruppen multikastingsbyte identifisert av den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Etter å metoden DropMulticastGroup den underliggende <xref:System.Net.Sockets.Socket>sender en pakke for Internet Group Management Protocol (IGMP) til ruter, fjerner ruteren fra gruppen multikastingsbyte.</xref:System.Net.Sockets.Socket> Etter en <xref:System.Net.Sockets.UdpClient>trekker fra gruppen, vil den ikke lenger kunne motta sendte til denne gruppen.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Hvis du får en <xref:System.Net.Sockets.SocketException>, bruker du <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>til å hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Den <xref:System.Net.IPAddress>av gruppen multikastingsbyte forlate.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "Den lokale adressen av gruppen multikastingsbyte forlate."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-adressen er ikke kompatibel med den <xref:System.Net.Sockets.AddressFamily>verdi som definerer adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en <xref:System.Boolean>verdi som angir om den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kan sende eller motta kringkasting pakker.</xref:System.Boolean>"
  remarks: "Kringkasting er begrenset til et bestemt delnett. Du kan kringkasting til din lokale delnettet ved å sende en pakke 255.255.255.255; eller du kan bruke styrt kringkasting adressen som nettverksdelen av et Internet Protocol IP-adresse med alle bitsettet i vertsdelen. Hvis IP-adressen er 192.168.1.40 (en klasse C-adresse med nettverk-del som de første tre oktettene og vertsdelen er den siste oktetten), er kontrollert kringkasting adressen 192.168.1.255 samsvare med."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> tillater kringkasting pakker; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Slutter en ventende asynkron motta."
  remarks: "Denne metoden blokker før operasjonen er fullført.       For å utføre denne operasjonen synkront, kan du bruke den <xref:System.Net.Sockets.UdpClient.Receive%2A>metoden.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Et <xref:System.IAsyncResult>objekt returneres av et kall til <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> </xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Det angitte eksterne endepunktet."
    return:
      type: System.Byte[]
      description: "Hvis det er fullført, antall byte mottatt. Hvis det ikke lykkes, returnerer denne metoden 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>ble ikke returnert av et kall til den <xref:System.Net.Sockets.UdpClient.BeginReceive*> metoden."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive ble tidligere kalt for asynkron lesing."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feilen under forsøk på å få tilgang til den underliggende <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Se kommentarer for mer informasjon."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Avslutter en ventende asynkron sending."
  remarks: "Denne metoden blokker før operasjonen er fullført.       For å utføre denne operasjonen synkront, kan du bruke den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Et <xref:System.IAsyncResult>objekt returneres av et kall til <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Hvis fullført, antall byte sendt til den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>ble ikke returnert av et kall til den <xref:System.Net.Sockets.Socket.BeginSend*> metoden."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>ble tidligere kalt for asynkron lesing.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under forsøk på å få tilgang til den underliggende socketen. Se kommentarer for mer informasjon."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en <xref:System.Boolean>verdi som angir om den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> tillater bare én klienten til å bruke en port.</xref:System.Boolean>"
  remarks: "Som standard kan flere klienter bruke en bestemt port; bare én av klienter kan imidlertid utføre operasjoner på nettverkstrafikk som er sendt til porten. Du kan bruke egenskapen ExclusiveAddressUse for å hindre at flere klienter ved hjelp av en bestemt port.       Denne egenskapen må angis før den underliggende socketen er bundet til en Klientport. Hvis du kaller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, eller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>klientporten er bundet som en side effekten av konstruktøren, og du kan ikke angi egenskapen ExclusiveAddressUse senere</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> tillater bare én klienten til å bruke en bestemt port; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> for Windows Server 2003 og Windows XP Service Pack 2 eller senere, og <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> for alle andre versjoner."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under forsøk på å få tilgang til den underliggende socketen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Legger til en <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> til en multikastings gruppe."
  remarks: "Metoden JoinMulticastGroup abonnerer <xref:System.Net.Sockets.UdpClient>til en multikastings gruppe ved hjelp av den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Etter å metoden JoinMulticastGroup den underliggende <xref:System.Net.Sockets.Socket>sender en pakke for Internet Group Management Protocol (IGMP) til ruter ber om medlemskap i gruppen multikastingsbyte.</xref:System.Net.Sockets.Socket> Multikastadresse er mellom 224.0.0.0 til 239.255.255.255. Hvis du angir en adresse utenfor dette området ikke eller ruter som forespørselen sendes multikastingsbyte aktivert, <xref:System.Net.Sockets.UdpClient>vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen. Én gang i <xref:System.Net.Sockets.UdpClient>er oppført med ruter som medlem av gruppen multikastingsbyte, vil den ikke kunne få multicasted datagram som er sendt til den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Må du opprette den <xref:System.Net.Sockets.UdpClient>ved hjelp av multikastingsbyte portnummeret; ellers du vil ikke kunne få multicasted datagram.</xref:System.Net.Sockets.UdpClient> Ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden før du kaller metoden JoinMulticastGroup eller <xref:System.Net.Sockets.UdpClient.Receive%2A>metoden vil ikke fungere.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Du trenger ikke hører til en multikastings gruppe sende datagram til en multikastings-IP-adresse.       Før du legger til en multikastings gruppe, kontroller at socketen er bundet til port eller sluttpunktet. Du kan gjøre dette ved å kalle én av konstruktører som godtar en port eller et endepunkt som en parameter.       Hvis du vil slutte å motta multicasted datagram ved kall av <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>metoden og gir den <xref:System.Net.IPAddress>for gruppen du vil trekke tilbake som.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > I IPv6 fall finner flere multikastadresse områder som du kan velge blant. Se IETF RFC 2375.      > [!NOTE] > Du kan ikke kalle <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>på en <xref:System.Net.Sockets.UdpClient>konstruert uten en bestemt lokale port (det vil si ved hjelp av den <xref:System.Net.Sockets.UdpClient.%23ctor>eller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>konstruktøren).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Multikast <xref:System.Net.IPAddress>for gruppen du vil delta.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-adressen er ikke kompatibel med den <xref:System.Net.Sockets.AddressFamily>verdi som definerer adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Legger til en <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> til en multikastings gruppe."
  remarks: "Før du legger til en multikastings gruppe, pass på socketen er bundet til port eller sluttpunktet. Du kan gjøre dette ved å kalle én av konstruktører som godtar en port og et endepunkt som parameter.       Den `infindex` parameteren brukes til å identifisere en maskinvare-grensesnittet på den samme koblingen.      > [!NOTE] > Det er flere multikastadresse områder du kan velge blant. Se IETF RFC 2375.      > [!NOTE] > Du kan ikke kalle <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>på en <xref:System.Net.Sockets.UdpClient>konstruert uten en bestemt lokale port (det vil si ved hjelp av den <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>eller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>konstruktøren).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "Grensesnittindeksen som er knyttet til den lokale IP-adressen som skal bli med i multikastingsbyte gruppen."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Multikast <xref:System.Net.IPAddress>for gruppen du vil delta.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Legger til en <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> til en multikastings gruppe med den angitte tiden til Live (TTL)."
  remarks: "<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>Metoden abonnerer den <xref:System.Net.Sockets.UdpClient>til en multikastings gruppe i den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Etter kall av <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>metode, og den underliggende <xref:System.Net.Sockets.Socket>sender en pakke for Internet Group Management Protocol (IGMP) til ruter ber om medlemskap i gruppen multikastingsbyte.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Multikastadresse er mellom 224.0.0.0 til 239.255.255.255. Hvis du angir en adresse utenfor dette området ikke eller ruter som forespørselen sendes multikastingsbyte aktivert, <xref:System.Net.Sockets.UdpClient>vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen. Den `timeToLive` parameteren angir hvor mange ruter mellomstasjoner tillates for en multicasted datagram før den forkastes. Én gang i <xref:System.Net.Sockets.UdpClient>er oppført med ruter som medlem av gruppen multikastingsbyte, vil den ikke kunne få multicasted datagram som er sendt til den angitte <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Må du opprette den <xref:System.Net.Sockets.UdpClient>ved hjelp av multikastingsbyte portnummeret Hvis du vil ikke kunne motta multicasted datagram.</xref:System.Net.Sockets.UdpClient> Ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden før du kaller den <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>metoden eller receive-metoden vil ikke fungere.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Du trenger ikke hører til en multikastings gruppe sende datagram til en multikastings-IP-adresse.       Kontroller at socketen er bundet til port eller endpoint før du legger til en multikastings gruppe. Du kan gjøre dette ved å kalle én av konstruktører som godtar som parameter, en port eller et endepunkt.       Hvis du vil slutte å motta multicasted datagram ved kall av <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>metoden og gir den <xref:System.Net.IPAddress>for gruppen du vil trekke tilbake som.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > Du kan ikke kalle <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>på en <xref:System.Net.Sockets.UdpClient>konstruert uten en bestemt lokale port (det vil si ved hjelp av den <xref:System.Net.Sockets.UdpClient.%23ctor>eller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>konstruktøren).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Den <xref:System.Net.IPAddress>av gruppen multikastingsbyte koble.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "Tidspunktet til Live (TTL), målt i ruter hopp."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "TTL angitt er ikke mellom 0 og 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-adressen er ikke kompatibel med den <xref:System.Net.Sockets.AddressFamily>verdi som definerer adresseringsskjemaet for socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Legger til en <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> til en multikastings gruppe."
  remarks: "Før du koble til en multikastings gruppe, må du kontrollere at socketen er bundet til port eller sluttpunktet. Du kan gjøre dette ved å kalle én av konstruktører som godtar en port og et endepunkt som parameter.      > [!NOTE] > Det er flere multikastadresse områder du kan velge blant. Du finner dem i IETF RFC 2375.      > [!NOTE] > Du kan ikke kalle <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>på en <xref:System.Net.Sockets.UdpClient>konstruert uten en bestemt lokale port (det vil si ved hjelp av den <xref:System.Net.Sockets.UdpClient.%23ctor>eller <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>konstruktøren).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Multikast <xref:System.Net.IPAddress>for gruppen du vil delta.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "Lokalt <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en <xref:System.Boolean>verdi som angir om utgående multikastingsbyte pakker leveres til avsenderprogrammet.</xref:System.Boolean>"
  remarks: "Multikast er en skalerbar metode for mange-til-mange-kommunikasjon på Internett. Hvis en prosess abonnerer på multikastadresse, vil alle pakker som er sendt av at prosessen mottas med alle andre prosesser har abonnert på multikastadressen."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> mottar Utgående multikastingsbyte pakker; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Returnerer en UDP-datagram som ble sendt av en ekstern vert."
  remarks: "Blokkerer Receive-metoden til et datagram kommer fra en ekstern vert. Når data er tilgjengelig, leser første i kø datagram og returner datadelen som en bytematrise Receive-metoden. Denne metoden fyller ut den `remoteEP` parameter med den <xref:System.Net.IPAddress>og portnummeret for avsenderen.</xref:System.Net.IPAddress>       Hvis du angir en standard ekstern vert i den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden Receive-metoden godtar datagram fra bare som er vert.</xref:System.Net.Sockets.UdpClient.Connect%2A> Alle andre datagram, forkastes.       Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.      > [!NOTE] > Hvis du ønsker å motta multicasted datagram, ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden før du kaller Receive-metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Den <xref:System.Net.Sockets.UdpClient>du bruker til å motta datagram må opprettes ved hjelp av multikastingsbyte portnummeret.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "En <xref:System.Net.IPEndPoint>som representerer den eksterne verten som dataene ble sendt.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som inneholder datagram data.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Returnerer en UDP-datagram asynkront som ble sendt av en ekstern vert."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>> objektet fullfører etter UDP-pakken er mottatt.</xref:System.Threading.Tasks.Task%601>       Hvis du angir en standard ekstern vert i den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden, denne metoden godtar datagram fra bare som er vert.</xref:System.Net.Sockets.UdpClient.Connect%2A> Alle andre datagram, forkastes.       Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.      > [!WARNING] > Hvis du ønsker å motta multicasted datagram, ikke kall den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden før du kaller denne metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Den <xref:System.Net.Sockets.UdpClient>du bruker til å motta datagram må opprettes ved hjelp av multikastingsbyte portnummeret.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den underliggende <xref:System.Net.Sockets.Socket>har blitt lukket.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram til en ekstern vert."
  remarks: "Denne overlasten sender datagram til den eksterne verten opprettet i den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden og returnerer antall byte sendt.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du ikke kaller <xref:System.Net.Sockets.UdpClient.Connect%2A>før du kaller opp denne overlasten <xref:System.Net.Sockets.UdpClient.Send%2A>metoden vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Hvis du vil sende datagram til en annen ekstern vert, må du kaller den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden og angi den ønskede eksterne verten.</xref:System.Net.Sockets.UdpClient.Connect%2A> Bruk en av de andre <xref:System.Net.Sockets.UdpClient.Send%2A>metoden overlastingene sende datagram til en kringkasting adresse.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du har tenkt å sende representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    return:
      type: System.Int32
      description: "Antall byte sendt."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> har allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram til verten på det angitte eksterne endepunktet."
  remarks: "Send-metoden sender datagram til det angitte sluttpunktet, og returnerer antall byte som er sendt. Før du kaller opp denne overlasten, må du først opprette en <xref:System.Net.IPEndPoint>med IP-adresse og port. nummeret til den eksterne verten din datagram, leveres.</xref:System.Net.IPEndPoint> Du kan sende datagram til standard kringkasting adresse, 255.255.255.255, ved å angi <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>for <xref:System.Net.IPAddress.Address%2A>egenskapen for <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Når du har opprettet <xref:System.Net.IPEndPoint>, sende den til metoden Send som den `endPoint` parameteren.</xref:System.Net.IPEndPoint>       Hvis du vil sende datagram til andre kringkasting adresse, kan du bruke den <xref:System.Net.Sockets.UdpClient.Client%2A>metode for å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Du kan også gå tilbake til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Ikke angir en `endPoint` parameteren til denne metoden hvis du allerede har opprettet en ekstern vert med den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du gjør, throw Send-metoden <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du vil sende, representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "En <xref:System.Net.IPEndPoint>som representerer vert og port som skal brukes av datagram.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "Antall byte sendt."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>er allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram til en angitt port på en angitt ekstern vert."
  remarks: "Den <xref:System.Net.Sockets.UdpClient.Send%2A>metoden sender datagram til verdiene som er angitt av den `hostname` og `port` parametere og returnerer antall byte sendt.</xref:System.Net.Sockets.UdpClient.Send%2A> Du kan sende datagram til standard kringkasting adressen ved å angi &quot;255.255.255.255&quot; for den `hostname` parameterverdi.       Hvis du vil sende datagram til andre kringkasting adresse, kan du bruke den <xref:System.Net.Sockets.UdpClient.Client%2A>metode for å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Du kan også gå tilbake til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Ikke angi et vertsnavn eller portnummeret til denne metoden hvis du allerede har opprettet en ekstern vert med den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du gjør, <xref:System.Net.Sockets.UdpClient.Send%2A>metoden vil throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du har tenkt å sende representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    - id: hostname
      type: System.String
      description: "Navnet på den eksterne verten som du har tenkt å sende datagrammet."
    - id: port
      type: System.Int32
      description: "Eksterne portnummeret du har tenkt å kommunisere."
    return:
      type: System.Int32
      description: "Antall byte sendt."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> har allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram asynkront til en ekstern vert."
  remarks: "Denne overlasten sender datagram til den eksterne verten opprettet i den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du ikke kaller <xref:System.Net.Sockets.UdpClient.Connect%2A>før du kaller opp denne overlasten vil metoden throw <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen.       Hvis du vil sende datagram til en annen ekstern vert, må du kaller den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden og angi den ønskede eksterne verten.</xref:System.Net.Sockets.UdpClient.Connect%2A> Bruk en av de andre <xref:System.Net.Sockets.UdpClient.SendAsync%2A>metoden overlastingene sende datagram til en kringkasting adresse.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du har tenkt å sende representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> har allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram asynkront til en ekstern vert."
  remarks: "Denne metoden sender datagram til det angitte sluttpunktet. Før du kaller opp denne overlasten, må du først opprette en <xref:System.Net.IPEndPoint>med IP-adresse og port. nummeret til den eksterne verten din datagram, leveres.</xref:System.Net.IPEndPoint> Du kan sende datagram til standard kringkasting adresse, 255.255.255.255, ved å angi <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>for <xref:System.Net.IPAddress.Address%2A>egenskapen for <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Når du har opprettet <xref:System.Net.IPEndPoint>, sendes til denne metoden som den `endPoint` parameteren.</xref:System.Net.IPEndPoint>       Hvis du vil sende datagram til andre kringkasting adresse, kan du bruke den <xref:System.Net.Sockets.UdpClient.Client%2A>metode for å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Du kan også gå tilbake til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Ikke angir en `endPoint` parameteren til denne metoden hvis du allerede har opprettet en ekstern vert med den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du gjør, throw denne metoden <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du har tenkt å sende representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "En <xref:System.Net.IPEndPoint>som representerer vert og port som skal brukes av datagram.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>er allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Sender en UDP-datagram asynkront til en ekstern vert."
  remarks: "Denne metoden sender datagram til verdiene som er angitt av den `hostname` og `port` parametere. Du kan sende datagram til standard kringkasting adressen ved å angi &quot;255.255.255.255&quot; for den `hostname` parameterverdi.       Hvis du vil sende datagram til andre kringkasting adresse, kan du bruke den <xref:System.Net.Sockets.UdpClient.Client%2A>metode for å hente den underliggende <xref:System.Net.Sockets.Socket>, og angi alternativet socket <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Du kan også gå tilbake til ved hjelp av <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Ikke angi et vertsnavn eller portnummeret til denne metoden hvis du allerede har opprettet en ekstern vert med den <xref:System.Net.Sockets.UdpClient.Connect%2A>metoden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Hvis du gjør, throw denne metoden <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Hvis du får en <xref:System.Net.Sockets.SocketException>, Bruk <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>ikke hente feilkoden.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Når du har fått denne koden, kan du se Windows Sockets versjon 2 API feil code-dokumentasjonen i MSDN for en detaljert beskrivelse av feilen."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "En matrise av typen <xref:System.Byte>som angir UDP-datagram som du har tenkt å sende representert som en bytematrise.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Antall byte i datagrammet."
    - id: hostname
      type: System.String
      description: "Navnet på den eksterne verten som du har tenkt å sende datagrammet."
    - id: port
      type: System.Int32
      description: "Eksterne portnummeret du har tenkt å kommunisere."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> har allerede opprettet en standard ekstern vert."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> er lukket."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Det oppstod en feil under tilgang til socket. Se kommentarer for mer informasjon."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Henter eller angir en verdi som angir tiden Live (TTL) verdien IP (Internet Protocol)-pakker som er sendt av den <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  remarks: "TTL-verdien angir det maksimale antallet rutere en pakke kan bla gjennom før ruteren forkastes pakken og en Internet Control Message Protocol (ICMP) &quot;TTL overskredet&quot; feilmelding returneres til avsenderen."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "TTL-verdien."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
