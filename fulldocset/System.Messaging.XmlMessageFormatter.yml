### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "Serializes og deserializes objekter til eller fra brødteksten i en melding i XML-formatet som er basert på XSD-skjemadefinisjon."
  remarks: "XmlMessageFormatter er standard formatering som en forekomst av <xref:System.Messaging.MessageQueue>bruker til å serialisere meldinger som er skrevet til køen.</xref:System.Messaging.MessageQueue> Når du oppretter en forekomst av <xref:System.Messaging.MessageQueue>en forekomst av XmlMessageFormatter er opprettet for deg og tilknyttet <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue> Du kan angi en annen formatering ved å opprette den i koden, og tilordne til <xref:System.Messaging.MessageQueue.Formatter%2A>egenskapen for <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Formatter%2A>       En kø XmlMessageFormatter standardforekomsten kan brukes til å skrive til køen, men den kan ikke brukes til å lese fra køen før du angir enten den <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>eller <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>egenskap i formateringen.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Du kan enten angi ett av eller begge av disse verdiene på formatering standardforekomsten, eller du kan opprette en ny forekomst av formateringen og angi verdier automatisk ved å sende dem som argumenter til riktig <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>konstruktør.</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       Når du angir <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>snarere enn <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, typen forekomsten kontrolleres på kompileringstidspunktet i stedet for skrivebeskyttede tid som reduserer muligheten for feil.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>krever hver være fullstendig kvalifisert, ved å angi navnet på samlingen.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Videre når du arbeider med flere samtidige versjoner, må versjonsnummeret også være lagt til navnet på målet også.       Den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dette gjør at formatering til å tolke meldingsteksten.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Bare ett av de to egenskapene må angis ved lesing fra køen, men du kan angi begge. Settet med typer er kombinert settet fra to egenskaper. Avgjørelsen av hvilke til å bruke er spesifikke for programmet. Hvis meldingsteksten inneholder en type der skjemaet ikke samsvarer med noen av typene i matrisen for en av egenskapene, vil bli utløst et unntak under meldingen blir lest.       XmlMessageFormatter er viktige komponenter i løst koblet XML-baserte meldinger. XSD.exe-verktøyet bruker XML-formatet som brukes til å generere XML-skjemaet, for eksempel når du bruker verktøyet til å serialisere en klasse som brukes av programmet. Klassen må ha en standardkonstruktør.       Formatet som brukes på nytt i omvendt prosessen når verktøyet genererer en klasse som er basert på skjemaet du distribuerer for å beskrive klassen dataene. Bruk av verktøyet og XML-skjema genereres gjør at du kan unngå redistributing.dll filer hver gang du kompilere en klasse etter implementeringen av klassen er endret. Så lenge skjemaet ikke endres på klienten eller serveren, påvirker andre endringer på hver side ikke den andre."
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> uten target-klassen datatyper sett."
  remarks: "Denne konstruktøren-overlasten brukes oftest under skriving til køen måltyper er obligatorisk når skriving.       Kan lese en melding fra en kø ved hjelp av en forekomst av <xref:System.Messaging.XmlMessageFormatter>opprettet med denne konstruktøren, må du angi den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>eller <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper slik at formateringen vet hva datatyper under forsøk på å deserialisere.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       Når du oppretter en ny <xref:System.Messaging.MessageQueue>, standard <xref:System.Messaging.XmlMessageFormatter>forekomst er opprettet uten target typer settet.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> Som med en formatering opprettes med denne konstruktøren, må du angi måltyper for den forekomsten formatering hvis du ønsker å lese fra køen."
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klassen innstillingen måltyper sendes som en matrise av (fullstendige) strengverdier."
  remarks: "Konstruktører med typen målparameterne er mest brukte ved lesing fra køen. Når du skriver, er det ikke nødvendig å angi måltyper.       Denne overbelastning av den <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>konstruktøren angir den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>egenskapen Matriseverdiene som er sendt til den `targetTypeNames` parameteren.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Innstillingen for denne egenskapen kan en <xref:System.Messaging.MessageQueue>å bruke denne <xref:System.Messaging.XmlMessageFormatter>forekomst til å lese meldinger som inneholder objekter av gitt typer.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Både den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dette gjør at formatering til å tolke meldingsteksten.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Bare ett av de to egenskapene må angis ved lesing fra køen, men du kan angi begge. Settet med typer er kombinert settet fra to egenskaper. Beslutningstreet som som skal brukes, er spesifikke for programmet. Hvis meldingsteksten inneholder en type der skjemaet ikke samsvarer med noen av typene i matrisen for en av egenskapene, vil bli utløst et unntak skrivebeskyttede gangen."
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "En matrise av typen <xref:System.String>som angir settet med mulige typer som deserialiseres av formatering fra angitt melding.</xref:System.String> Disse verdiene må være fullstendig, for eksempel &quot;MyNamespace.MyOrders, MyOrdersAssemblyName&quot;."
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klassen innstillingen måltyper sendes som en matrise av objekttyper."
  remarks: "Konstruktører med typen målparameterne er mest brukte ved lesing fra køen. Når du skriver, er det ikke nødvendig å angi måltyper.       Denne overbelastning av den <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>konstruktøren angir den <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>egenskapen Matriseverdiene som er sendt til den `targetTypes` parameteren.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Innstillingen for denne egenskapen kan en <xref:System.Messaging.MessageQueue>å bruke denne <xref:System.Messaging.XmlMessageFormatter>forekomst til å lese meldinger som inneholder objekter av de angitte typene.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Både den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dette gjør at formatering til å tolke meldingsteksten.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Bare ett av de to egenskapene må angis ved lesing fra køen, men du kan angi begge. Settet med typer er kombinert settet fra to egenskaper. Beslutningstreet som som skal brukes, er spesifikke for programmet. Hvis meldingsteksten inneholder en type der skjemaet ikke samsvarer med noen av typene i matrisen for en av egenskapene, vil bli utløst et unntak skrivebeskyttede gangen.       Når du angir <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>snarere enn <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, typen forekomsten kontrolleres på kompileringstidspunktet i stedet for skrivebeskyttede tid som reduserer muligheten for feil.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>krever hver være fullstendig kvalifisert, ved å angi navnet på samlingen.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Videre når du arbeider med flere samtidige versjoner, må versjonsnummeret også være lagt til navnet på målet også.       Når du bruker <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, kan du legge til alle objektene (for eksempel `MyClass`) i listen på en måte som har vist av C# koden nedenfor.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "En matrise av typen <xref:System.Type>som angir settet med mulige typer som deserialiseres av formatering fra angitt melding.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Bestemmer om formateringen kan deserialisere meldingen."
  remarks: "Når CanRead kalles, prøver du formatering du fastslår om innholdet i meldingen finnes noe den kan deserialisere. Formateringen kan bare deserialisere meldingen hvis typen i meldingsteksten har samme XML-skjemaet som en av typene i matrisen som representerer den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Returnerer CanRead `false` følgende betingelser to:-meldingen ble ikke er formatert med <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      -Skjemaet for meldingsteksten er ikke blant de som er oppført i enten den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>eller <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>egenskapen.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilke objekttyper som den må være kan ikke deserialisere.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Hvis en annen type mangler fra listen ennå ikke finnes i meldingen, CanRead returnerer `false`."
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "Den <xref href=&quot;System.Messaging.Message&quot;> </xref> skal undersøkes."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis XML-formatering kan deserialisere meldingen. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Verken den <> </> *> eller <> </> *> egenskapen er angitt."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Oppretter en forekomst av den <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> klasse med lese-og skrivetilgang (sett med måltyper) er den samme som gjeldende <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> forekomsten."
  remarks: "Denne metoden opprettes en kopi av formateringen og initialiserer alle egenskapene til verdiene for dette <xref:System.Messaging.XmlMessageFormatter>objektet.</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Et objekt som er identisk med i dette <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> forekomsten, men metadataene som angir det er en forekomst av klassen formatering."
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Viser innholdet fra den gitte meldingen, og oppretter et objekt som inneholder deserialisert meldingen."
  remarks: "Både den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Én av disse egenskapene må angis før meldingen kan deserialiseres.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Target-typen har ikke angis for å skrive til køen."
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "Den <xref href=&quot;System.Messaging.Message&quot;> </xref>, i XML-format, deserialisering."
    return:
      type: System.Object
      description: "Deserialisert meldingen."
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Verken den <> </> *> eller <> </> *> egenskapen er angitt.       - eller - forekomsten serialisert i meldingsteksten samsvarer ikke med noen av XML-skjemaene som er representert av typene i den <> </> *> og <> </> *> egenskaper."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Angir settet med mulige typer som deserialiseres av formatering fra den angitte meldingen."
  remarks: "Både TargetTypeNames og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper Fortell formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Dette gjør at formatering til å tolke meldingsteksten.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Bare ett av de to egenskapene må angis ved lesing fra køen, men du kan angi begge. Settet med typer er kombinert settet fra to egenskaper. Avgjørelsen av hvilke til å bruke er spesifikke for programmet. Hvis meldingsteksten inneholder en type der skjemaet ikke samsvarer med noen av typene i matrisen for en av egenskapene, vil bli utløst et unntak under meldingen blir lest.       TargetTypeNames krever hver være fullstendig kvalifisert, ved å angi navnet på samlingen. Videre når du arbeider med flere samtidige versjoner, må versjonsnummeret også være lagt til navnet på målet også.       Target-typer er bare nødvendig ved lesing fra køen. TargetTypeNames og <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Egenskaper trenger ikke angis til å skrive til køen.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "En matrise av typen <xref:System.String>som angir hvilken type objekter ikke deserialisere fra meldingsteksten under lesing av meldingen.</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Egenskapen TargetTypeNames <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Angir settet med mulige typer som deserialiseres av formatering fra den angitte meldingen."
  remarks: "Både den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og TargetTypes egenskaper be formateringen hvilken skjemaer under forsøk på å samsvare med under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Dette gjør at formatering til å tolke meldingsteksten.       Forekomsten serialisert i meldingsteksten må samsvare med én av XML-skjemaene som er representert i matrisen type. Når du lese meldingen ved hjelp av <xref:System.Messaging.MessageQueue.Receive%2A>metoden, metoden oppretter et objekt av typen som tilsvarer skjemaet identifisert og leser meldingsteksten i det.</xref:System.Messaging.MessageQueue.Receive%2A>       Bare ett av de to egenskapene må angis ved lesing fra køen, men du kan angi begge. Settet med typer er kombinert settet fra to egenskaper. Avgjørelsen av hvilke til å bruke er spesifikke for programmet. Hvis meldingsteksten inneholder en type der skjemaet ikke samsvarer med noen av typene i matrisen for en av egenskapene, vil bli utløst et unntak under meldingen blir lest.       Target-typer er bare nødvendig ved lesing fra køen. Den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>og TargetTypes egenskaper trenger ikke angis til å skrive til køen.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Angir når TargetTypes snarere enn <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, typen forekomsten kontrolleres på kompileringstidspunktet i stedet for skrivebeskyttede tid som reduserer muligheten for feil.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Når du bruker TargetTypes, kan du legge til alle objektene (for eksempel `MyClass`) i listen på en måte som har vist som koden C# `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "En matrise av typen <xref:System.Type>som angir hvilken type objekter ikke deserialisere fra meldingsteksten under lesing av meldingen.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Egenskapen TargetTypes <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Serializes et objekt i meldingsteksten i meldingen."
  remarks: "Target-typen må ikke angis til å skrive til køen som de må være under lesing av. Den <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>eller <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>egenskapen brukes av formateringen under deserialisering av en melding.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       Den <xref:System.Messaging.XmlMessageFormatter>bruker den <xref:System.Xml.Serialization.XmlSerializer>klassen som definerer hva som kan serialiseres.</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> Offentlig felt og offentlig egenskaper kan bare serialiseres. Strukturer, strukturer med matriser og matriser av strukturer er alle serialiserbare, så lenge de ikke bruker kodet stilen med SOAP-protokollen."
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "Den <xref href=&quot;System.Messaging.Message&quot;> </xref> der <xref:System.Messaging.Message.Body*>egenskapen skal inneholde serialiserte objektet.</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "Den <xref:System.Object>serialiseres i meldingsteksten.</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
