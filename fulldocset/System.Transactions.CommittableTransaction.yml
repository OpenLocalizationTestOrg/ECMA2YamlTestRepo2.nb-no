### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "Beskriver en transaksjon som ikke kan lagres."
  remarks: "Klassen CommittableTransaction inneholder en eksplisitt metode for programmer å bruke en transaksjon, i motsetning til ved hjelp av den <xref:System.Transactions.TransactionScope>klasse implisitt.</xref:System.Transactions.TransactionScope> I motsetning til det <xref:System.Transactions.TransactionScope>klassen, program-skriveren må kalle spesielt den <xref:System.Transactions.CommittableTransaction.Commit%2A>og <xref:System.Transactions.Transaction.Rollback%2A>metoder for å lagre eller avbryte transaksjonen.</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> Bare oppretteren av en transaksjon kan imidlertid gjennomføre transaksjonen. Derfor kopier av en transaksjon som ikke kan lagres, som er anskaffet via den <xref:System.Transactions.Transaction.Clone%2A>metoden er ikke som ikke kan lagres.</xref:System.Transactions.Transaction.Clone%2A>      > [!NOTE] > Det anbefales at du oppretter implisitte transaksjoner ved hjelp av <xref:System.Transactions.TransactionScope>class, slik at de omkringliggende Transaksjonskonteksten administreres automatisk for deg.</xref:System.Transactions.TransactionScope> Du bør også bruke den <xref:System.Transactions.TransactionScope>og <xref:System.Transactions.DependentTransaction>klasse for programmer som krever bruk av den samme transaksjonen på tvers av flere funksjonskall eller flere tråd anrop.</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> For mer informasjon om denne modellen, kan du se den [implementere en implisitt transaksjon ved hjelp av transaksjonsområdet](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) emnet.       Oppretter en CommittableTransaction er satt av omkringliggende transaksjonen, som utfører koden i transaksjonen. Du kan hente eller angi omkringliggende transaksjonen ved å kalle statiske <xref:System.Transactions.Transaction.Current%2A>-egenskapen til den globale <xref:System.Transactions.Transaction>objektet.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> For mer informasjon om omkringliggende transaksjoner, i avsnittet &quot;Behandle transaksjonen flyten ved hjelp av TransactionScopeOption&quot; for den [implementere en implisitt transaksjon ved hjelp av transaksjonsområdet](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) emnet. Hvis omkringliggende transaksjonen ikke er angitt er noen operasjon på en ressursansvarlig ikke del av transaksjonen. Du må angi og tilbakestille den omsluttende transaksjonen, for å sikre at ressursbehandlinger fungere i den høyre Transaksjonskonteksten eksplisitt.       Før en CommittableTransaction har blitt lagret, låses fortsatt alle ressurser som er involvert i transaksjonen.       Et CommittableTransaction-objekt kan ikke brukes på nytt. Når den er iverksatt eller rullet tilbake, kan ikke brukes på nytt i en transaksjon eller angitt som omkringliggende Transaksjonskonteksten."
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Et forsøk på å opprette en transaksjon under Windows 98, Windows 98 Second Edition eller installasjonen."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> klassen med den angitte <code> timeout </code> verdi."
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Maksimum tid transaksjonen kan eksistere før den ble avbrutt."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Et forsøk på å opprette en transaksjon under Windows 98, Windows 98 Second Edition eller installasjonen."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> angitte transaksjonsalternativene klasse."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "En <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> -strukturen som beskriver transaksjonsalternativene skal brukes for den nye transaksjonen."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Et forsøk på å opprette en transaksjon under Windows 98, Windows 98 Second Edition eller installasjonen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>er ugyldig."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Starter et forsøk på å utføre transaksjonen asynkront."
  remarks: "Denne metoden returnerer umiddelbart før transaksjonen er fullført. Transaksjonen deretter utfører på en annen tråd og `asyncCallback` representanten aktiveres når den er fullført. Når denne metoden kalles, mottar du ikke resultatet av transaksjonen før du kaller <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A>      > [!NOTE] > Commit-prosessen kan fullføre synkront i metodekallet."
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Den <xref:System.AsyncCallback>representanten aktiveres når transaksjonen er fullført.</xref:System.AsyncCallback> Denne parameteren kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, da programmet ikke blir varslet om transaksjonen er fullført. I stedet programmet må bruke den <xref:System.IAsyncResult>grensesnitt for å se etter fullføring og vent tilsvarende, eller ring <xref:System.Transactions.CommittableTransaction.EndCommit*>ikke vente på fullføring.</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "Et objekt som kan inneholde tilfeldig statusinformasjon, som er tilknyttet den asynkrone avtale. Dette objektet er sendt til tilbakeringing, og ikke tolkes av <xref href=&quot;System.Transactions&quot;> </xref>. En nullreferanse er tillatt."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>grensesnitt som kan brukes av oppkalleren Kontroller statusen for den asynkrone operasjonen eller vente for å fullføre operasjonen.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Forsøk på å utføre transaksjonen."
  remarks: "Når denne metoden kalles, alle objekter som er registrert for å delta i transaksjonen er forespurt og uavhengig kan tyde på deres stemme til lagre eller rulle tilbake transaksjonen. Hvis deltakeren anser å rulle tilbake transaksjonen, den er rullet tilbake, og denne metoden oppstår en <xref:System.Transactions.TransactionException>unntak.</xref:System.Transactions.TransactionException> Dette er en vanlig forekomst for en transaksjon og koden skal opp og behandle slike unntak.       Lagre og <xref:System.Transactions.CommittableTransaction.EndCommit%2A>blokkeres til den første fasen av transaksjonsbehandling er fullført.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> Den første fasen slutter etter alle ressursbehandlinger og opplistinger i transaksjonen har stemte på transaksjonsutfallet og <xref:System.Transactions.TransactionManager>robust har valgt å lagre eller avbryte transaksjonen.</xref:System.Transactions.TransactionManager> Fase av behandlingen er alltid asynkront. Det er derfor ikke garantere at data skrevet bare fra i en gitt transaksjon blir umiddelbart tilgjengelige etterpå når du ikke bruker en annen transaksjon for å vise disse dataene.       Fordi denne metoden blokker til den første fasen av transaksjonsbehandling er fullført, bør du passe ekstremt ved bruk av denne metoden i en Windows-skjema (WinForm)-applikasjon, eller en vranglås kan oppstå. Hvis du kalle denne metoden i en WinForm kontrollhendelsen (for eksempel en knappen), og bruker den synkron <xref:System.Windows.Forms.Control.Invoke%2A>metoden direkte kontrollen for å utføre noen UI-aktiviteter (for eksempel endre farger) mens transaksjonen, skjer en vranglås.</xref:System.Windows.Forms.Control.Invoke%2A> Fordi den <xref:System.Windows.Forms.Control.Invoke%2A>metoden er synkron og blokkerer Arbeidstråden til UI-tråden er ferdig med jobben.</xref:System.Windows.Forms.Control.Invoke%2A> Imidlertid i scenariet vårt venter UI-tråden også Arbeidstråden ikke gjennomføre transaksjonen. Resultatet er at ingen kan fortsette og omfanget venter på ubestemt tid å fullføre transaksjonen. Du må bruke <xref:System.Windows.Forms.Control.BeginInvoke%2A>snarere enn <xref:System.Windows.Forms.Control.Invoke%2A>der det er mulig, fordi den er asynkront og dermed mindre utsatt for vranglås.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "Lagre kalles på en transaksjon, og transaksjonen blir <xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>."
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "Lagre kalles, og transaksjonen ruller tilbake for første gang."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Avslutter et forsøk på å utføre transaksjonen asynkront."
  remarks: "Du må kalle denne metoden i tilbakeringing representant som er angitt som en parameter i <xref:System.Transactions.CommittableTransaction.BeginCommit%2A>metoden når du er ferdig oppryddingsarbeid knyttet til den asynkrone forpliktelsen.</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> Du kan også kalle denne metoden tidlig uten å vente på representanten. Hvis transaksjonen ikke er fullført før du kalle denne metoden, venter denne metoden på at den er fullføringen.      > [!CAUTION] > Den <xref:System.IAsyncResult.CompletedSynchronously%2A>egenskapen som er returnert av `asyncResult` alltid `false`, selv om operasjonen fullføres synkront.</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>og EndCommit blokkerer til den første fasen av transaksjonsbehandling er fullført.</xref:System.Transactions.CommittableTransaction.Commit%2A> Den første fasen slutter etter alle ressursbehandlinger og opplistinger i transaksjonen har stemte på transaksjonsutfallet og <xref:System.Transactions.TransactionManager>robust har valgt å lagre eller avbryte transaksjonen.</xref:System.Transactions.TransactionManager> Fase av behandlingen er alltid asynkront. Det er derfor ikke garantere at data skrevet bare fra i en gitt transaksjon blir umiddelbart tilgjengelige etterpå når du ikke bruker en annen transaksjon for å vise disse dataene."
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Den <xref:System.IAsyncResult>tilknyttet den asynkrone forpliktelsen.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>kalles og transaksjonen ruller tilbake for første gang.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Henter objektet som ble angitt som den siste parameteren i <xref:System.Transactions.CommittableTransaction.BeginCommit*>metodekallet.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "Objektet som ble angitt som den siste parameteren i <xref:System.Transactions.CommittableTransaction.BeginCommit*>metodekallet.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Henter en <xref:System.Threading.WaitHandle>som brukes til å vente på en asynkron operasjon skal bli fullført.</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "En <xref:System.Threading.WaitHandle>som brukes til å vente på en asynkron operasjon skal bli fullført.</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Henter en angivelse av om asynkrone bekreftelsesoperasjonen fullført synkront."
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den asynkrone bekreftelsesoperasjonen fullført synkront; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Denne egenskapen returnerer alltid <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> selv om synkront fullføre operasjonen."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Henter en indikasjon på om den asynkrone bekreftelsesoperasjonen er fullført."
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis operasjonen er fullført; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
