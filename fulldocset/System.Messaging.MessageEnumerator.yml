### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "Inneholder et radsett bare peker til nummerere meldinger i køen for meldinger."
  remarks: "Bruk MessageEnumerator for dynamiske samhandling med meldinger i en kø. Metodene som er tilgjengelige via den <xref:System.Messaging.MessageQueue>klassen kan returnere en MessageEnumerator som peker til en dynamisk liste over meldinger i køen, eller en matrise som inneholder en kopi på en angitt instant - et statisk utvalg - køens da den angitte metoden ble kalt.</xref:System.Messaging.MessageQueue>       I motsetning til en statisk kopi kan en opplisting du endre samlingen. Bruker en MessageEnumerator, kan du fjerne meldinger fra køen, og endringene gjenspeiles umiddelbart i køen.       En opplisting fjernes ikke meldingene i køen når den spørringer køen. Returnerer informasjon om melding ved gjeldende markørposisjon, men den forlater meldingen i køen.       En MessageEnumerator er en markør, initialiseres til head en dynamisk liste. Listerekkefølgen er den samme som rekkefølgen meldingene i køen, i henhold til meldingsprioritet. Du kan flytte pekeren til den første meldingen i køen ved å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Når enumeratoren er initialisert, kan du bruke <xref:System.Messaging.MessageEnumerator.MoveNext%2A>til Gjennomfør Videresend gjenværende meldingene.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Du kan angi om man skal vente på en melding blir tilgjengelig ved å sende et tidsavbrudd i den <xref:System.Messaging.MessageEnumerator.MoveNext%2A>metoden.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Fordi opplistingen for dynamiske, kan en melding som føyes utover den markøren gjeldende posisjon (for eksempel på grunn av lite prioritet), åpnes av enumeratoren. En melding som settes inn før den gjeldende markørposisjon ikke kan åpnes. Det er ikke mulig å gå tilbake med en MessageEnumerator. En markør kan bare fremover flytting. Den <xref:System.Messaging.MessageEnumerator.Reset%2A>gjør det mulig å plassere markøren tilbake ved starten av køen.</xref:System.Messaging.MessageEnumerator.Reset%2A>       Forekomster av MessageEnumerator for en angitt kø fungerer uavhengig. Du kan opprette to MessageEnumerator-forekomster som gjelder samme køen. Endringer som én MessageEnumerator gjør på meldingene i køen gjenspeiles umiddelbart i andre enumeratoren Hvis andre enumeratoren er plassert før først. Men hvis to enumeratorene har samme og én av dem fjerner meldingen fra denne plasseringen, et unntak hvis andre enumeratoren prøver å hente verdien for den <xref:System.Messaging.MessageEnumerator.Current%2A>egenskapen på meldingen nå slettet.</xref:System.Messaging.MessageEnumerator.Current%2A>      > [!NOTE] > Hvis du oppretter en forekomst av <xref:System.Messaging.MessageQueue>med <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>satt til `true`, ikke andre programmer kan endre meldingene i din enumeratoren mens tilkobling til køen.</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue>"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Frigjør ressursene som er knyttet til opplistingen."
  remarks: "Operativsystemet beholder en åpen referanse til køen i levetiden for markøren. Når du er ferdig med å arbeide med enumeratoren kall Lukk for å frigjøre ressurser som er forbundet med referansen."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Henter gjeldende <xref href=&quot;System.Messaging.Message&quot;> </xref> at denne enumeratoren peker til."
  remarks: "Når enumeratoren opprettes, peker til head av køen, på et sted før den første meldingen. I dette tilfellet gjeldende er ikke gyldig, og Iverksett et unntak hvis den er åpnet. Du må kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>til Plasser markøren på den første meldingen i køen.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "Gjeldende melding."
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Du kalte gjeldende før det første kallet til <> </> *>. Markøren er plassert før det første elementet i nummerering for meldingen.       - eller - du kalte gjeldende etter et kall til <> </> *> hadde returnert <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (som angir markøren er plassert etter det siste elementet i nummerering for meldingen.)"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Meldingen enumeratoren peker lenger finnes. Det kan ha blitt slettet."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Henter den opprinnelige Message Queuing markøren referansen brukes til å søke etter meldinger i køen."
  remarks: "Denne egenskapen inneholder den opprinnelige referansen til opplistingen. Når du er ferdig arbeide med enumeratoren, kaller <xref:System.Messaging.MessageEnumerator.Close%2A>å gi denne ressursen.</xref:System.Messaging.MessageEnumerator.Close%2A>"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "Den opprinnelige markør referansen."
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Referansen finnes ikke."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Frigir alle ressursene som brukes av den <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>."
  remarks: "Kaller avhending tillater ressursene som brukes av den <xref:System.Messaging.MessageEnumerator>til tildeles på nytt til andre formål.</xref:System.Messaging.MessageEnumerator> Du finner mer informasjon om avhending [Rydder opp uforvaltede ressurser](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref> og eventuelt frigir administrerte ressurser."
  remarks: "Denne metoden kalles av offentlig <xref:System.Messaging.MessageEnumerator.Dispose%2A>metoden og <xref:System.Object.Finalize%2A>metode.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageEnumerator.Dispose%2A> `Dispose()`Aktiverer den beskyttede `Dispose(Boolean)` metoden med den `disposing` parameteren satt til `true`. <xref:System.Object.Finalize%2A>aktiverer `Dispose` med `disposing` satt til `false`.</xref:System.Object.Finalize%2A>       Når den `disposing` parameteren er `true`, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.Messaging.MessageEnumerator>referanser.</xref:System.Messaging.MessageEnumerator> Denne metoden starter den `Dispose()` metode for hver referert objekt."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frigi ressurser både administrerte og uforvaltede; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Flytter enumeratoren til neste melding i køen, hvis det finnes for øyeblikket."
  remarks: "Denne overlasten returnerer umiddelbart hvis det er ingen melding i køen. Det er en annen overlasting som venter på et angitt <xref:System.TimeSpan>for en melding kommer.</xref:System.TimeSpan>       Om en melding ikke er tilgjengelig fordi køen er tom, eller fordi du har flyttet forbi det siste elementet i samlingen, MoveNext returnerer `false` til kall-metoden.       Når det er opprettet, en opplisting begrepsmessig er plassert før den første meldingen i køen, og det første kallet til MoveNext gir den første meldingen i køen til visningen."
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis enumeratoren ble Avansert til neste melding; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis Enumeratoren har nådd slutten av køen."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Det oppstod et unntak som er spesifikke for Message Queuing."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Flytter enumeratoren til neste melding i køen. Hvis enumeratoren er plassert på slutten av køen, <xref:System.Messaging.MessageEnumerator.MoveNext*>venter til en melding er tilgjengelig, eller den angitte tiden for tidsavbruddet er utløpt.</xref:System.Messaging.MessageEnumerator.MoveNext*>"
  remarks: "Denne overlasten venter Hvis det er ingen melding i køen, eller hvis markøren har nådd slutten av køen. Hvis en melding ikke er tilgjengelig fordi køen er tom, eller fordi du har flyttet forbi det siste elementet i samlingen <xref:System.Messaging.MessageEnumerator.MoveNext%2A>venter angitt tidsavbrudd.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Hvis pekeren er allerede på slutten av køen, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>returnerer bare `true` Hvis det kommer ny melding i det angitte tidsintervallet, er lavere prioritet enn alle meldinger som er i køen og er plassert på slutten av køen.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Overbelastning ingen parameter returnerer umiddelbart hvis det er ingen flere meldinger i køen.       Når det er opprettet, plassert en opplisting begrepsmessig før den første meldingen i opplistingen, og det første kallet til <xref:System.Messaging.MessageEnumerator.MoveNext%2A>gir den første meldingen i opplistingen til visningen.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Den <xref:System.TimeSpan>man skal vente på meldingen skal være tilgjengelige hvis enumeratoren er plassert på slutten av køen.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis enumeratoren Avansert ble til neste melding; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis Enumeratoren har nådd slutten av køen, og en melding blir ikke tilgjengelig innen angitt av den <code> timeout </code> parameteren."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den angitte verdien for tidsavbruddparameteren er ugyldig. Det kan representere et negativt tall."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Det oppstod et unntak som er spesifikke for Message Queuing.       - eller - tidsavbruddet er utløpt."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding fra en transaksjons- eller ikke-transaksjonell kø, og returnerer meldingen til programmet som kaller. Det er ingen tidsavbruddet som er angitt for en melding kommer i køen."
  remarks: "RemoveCurrent fjerner, og returnerer melding ved gjeldende plassering i den markøren.       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller RemoveCurrent.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Hvis du kaller denne overlasten på en transaksjonskø, oppretter Message Queuing en enkelt intern transaksjon."
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding fra en transaksjonskø, og returnerer meldingen til programmet som kaller. Det er ingen tidsavbruddet som er angitt for en melding kommer i køen."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>fjerner og returnerer meldingen ved av markøren gjeldende plassering med intern transaksjonskontekst som er definert av den `transaction` parameteren.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du arbeider med transaksjonskøer, tilbakerulling av en transaksjon fører til at alle meldinger som er fjernet av et kall til <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>som skal returneres til køen.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Fjerning er ikke permanent før transaksjonen er fullført.       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "Den <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objekt som angir transaksjonen meldingen vil bli fjernet."
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding fra en kø, og returnerer meldingen til programmet som kaller. Det er ingen tidsavbruddet som er angitt for en melding kommer i køen."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>fjerner og returnerer meldingen ved av markøren gjeldende plassering med en transaksjonskontekst som er definert av den `transactionType` parameteren.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Angi `Automatic` for den `transactionType` parameteren hvis det finnes allerede en ekstern transaksjonskontekst som er knyttet til tråden som du vil bruke til å motta meldingen. Angi `Single` Hvis du vil motta melding som én enkelt intern transaksjon. Du kan angi `None` Hvis du vil motta en melding fra en transaksjonskø utenfor en transaksjonskontekst.       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du arbeider med transaksjonskøer, tilbakerulling av en transaksjon fører til at alle meldinger som er fjernet av et kall til <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>som skal returneres til køen.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Fjerning er ikke permanent før transaksjonen er fullført.       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Én av de <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> verdier, som beskriver typen transaksjonskontekst å knytte til meldingen."
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Den <code> transactionType </code> parameteren er ikke én av de <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> medlemmer."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding i køen, og returnerer meldingen til programmet som kaller. Hvis det er en melding til å fjerne, returneres den umiddelbart. Metoden venter Hvis ikke det angitte tiden for tidsavbruddet for en ny melding kommer."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>fjerner, og returnerer melding ved gjeldende plassering i den markøren.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Hvis pekeren er på slutten av køen, denne overlasten for metoden venter til en melding som er tilgjengelig eller intervallet som er angitt av den `timeout` parameteren har utløpt.       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Hvis du kaller denne overlasten på en transaksjonskø, oppretter Message Queuing en enkelt intern transaksjon."
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervallet ventetid for en melding kommer i køen."
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den angitte verdien for den <code> timeout </code> parameteren er ugyldig."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Tidsavbruddet er utløpt."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding fra en transaksjonskø, og returnerer meldingen til programmet som kaller. Hvis det er en melding til å fjerne, returneres den umiddelbart. Metoden venter Hvis ikke det angitte tiden for tidsavbruddet for en ny melding kommer."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>fjerner, og returnerer melding ved gjeldende plassering i den markøren.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Hvis pekeren er på slutten av køen, denne overlasten for metoden venter til en melding som er tilgjengelig eller intervallet som er angitt av den `timeout` parameteren har utløpt.       Når du arbeider med transaksjonskøer, tilbakerulling av en transaksjon fører til at alle meldinger som er fjernet av et kall til <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>som skal returneres til køen.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Fjerning er ikke permanent før transaksjonen er fullført.       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Hvor lenge man skal vente på meldingen som skal fjernes."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "Den <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> objekt som angir transaksjonskontekst for meldingen."
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den angitte verdien for den <code> timeout </code> parameteren er ugyldig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Tidsavbruddet er utløpt."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Fjerner gjeldende melding fra en kø, og returnerer meldingen til programmet som kaller. Hvis det er en melding til å fjerne, returneres den umiddelbart. Metoden venter Hvis ikke det angitte tiden for tidsavbruddet for en ny melding kommer."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>fjerner og returnerer meldingen ved av markøren gjeldende plassering med en transaksjonskontekst som er definert av den `transactionType` parameteren.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Hvis pekeren er på slutten av køen, denne overlasten for metoden venter til en melding som er tilgjengelig eller intervallet som er angitt av den `timeout` parameteren har utløpt.       Angi `Automatic` for den `transactionType` parameteren hvis det finnes allerede en ekstern transaksjonskontekst som er knyttet til tråden som du vil bruke til å motta meldingen. Angi `Single` Hvis du vil motta melding som én enkelt intern transaksjon. Du kan angi `None` Hvis du vil motta en melding fra en transaksjonskø utenfor en transaksjonskontekst.       Hvis du bruker loggføringsnivåene for køen, fjerner meldingen forårsaker en kopi som skal beholdes i loggkø, akkurat slik det <xref:System.Messaging.MessageQueue>klassens <xref:System.Messaging.MessageQueue.Receive%2A>metoden samsvarer.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Når du arbeider med transaksjonskøer, tilbakerulling av en transaksjon fører til at alle meldinger som er fjernet av et kall til <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>som skal returneres til køen.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Fjerning er ikke permanent før transaksjonen er fullført.       Når du fjerner gjeldende melding, flyttes pekeren til neste melding. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter kaller <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Hvor lenge man skal vente på meldingen som skal fjernes."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Én av de <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> verdier, som beskriver typen transaksjonskontekst å knytte til meldingen."
    return:
      type: System.Messaging.Message
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til den første meldingen i køen."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den angitte verdien for den <code> timeout </code> parameteren er ugyldig."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Tidsavbruddet er utløpt."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Den <code> transactionType </code> parameteren er ikke én av de <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> medlemmer."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Tilbakestiller gjeldende enumeratoren slik at den henviser til lederen for køen."
  remarks: "En opplisting kan bare flytte fremover. Bruk denne metoden til å starte på nytt ved starten av køen.       Etter å tilbakestille pekeren peker til den første meldingen. Du trenger ikke å kalle <xref:System.Messaging.MessageEnumerator.MoveNext%2A>etter å tilbakestille for å flytte pekeren videresende til den første meldingen i køen.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Returnerer en <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til melding ved gjeldende markørposisjon."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "En <xref href=&quot;System.Messaging.Message&quot;> </xref> som refererer til melding ved gjeldende markørposisjon."
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
