### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermissionAttribute
  id: PrincipalPermissionAttribute
  children:
  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  - System.Security.Permissions.PrincipalPermissionAttribute.Name
  - System.Security.Permissions.PrincipalPermissionAttribute.Role
  langs:
  - csharp
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute
  fullName: System.Security.Permissions.PrincipalPermissionAttribute
  type: Class
  summary: "Tillater Sikkerhetshandlinger for <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> som skal brukes til å bruke deklarerende sikkerhet-kode. Denne klassen kan ikke arves."
  remarks: "PrincipalPermissionAttribute kan brukes til å deklarativt krever at brukere som kjører koden hører til en bestemt rolle eller er godkjent. Bruke <xref:System.Security.Permissions.PermissionState>oppretter en <xref:System.Security.Permissions.PrincipalPermission>med <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>satt til `true` og <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>og <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>satt til `null`.</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermission> </xref:System.Security.Permissions.PermissionState>       Avhengig av omfanget deklarasjonen som er tillatt i <xref:System.Security.Permissions.SecurityAction>som brukes.</xref:System.Security.Permissions.SecurityAction> PrincipalPermissionAttribute kan ikke brukes på nivå samlingen.       Sikkerhetsinformasjonen deklarert av et sikkerhetsattributt med er lagret i metadataene for attributtet, og brukes under kjøring av systemet. Av sikkerhetsattributter brukes bare for deklarerende sikkerhet. For viktig sikkerhet, kan du bruke den tilsvarende tillatelse-klassen.      > [!IMPORTANT] > Før du bruker denne klassen behov principal tillatelse, må du angi den gjeldende programdomenet principal policyen til opplistingsverdien <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Som standard er principal policyen satt til <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Hvis du ikke angir principal policyen <xref:System.Security.Principal.PrincipalPolicy>, en forespørsel om principal tillatelse mislykkes.</xref:System.Security.Principal.PrincipalPolicy> Følgende kode bør kjøres før sikkerhetskontohaveren tillatelsen er etterspørsel etter:`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;> </xref> klassen med den angitte <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  remarks: '`Demand`, `InheritanceDemand`, og `LinkDemand` er bare verdiene i <xref:System.Security.Permissions.SecurityAction>som har betydning for dette attributtet.</xref:System.Security.Permissions.SecurityAction> Andre handlinger gjelder ikke for tillatelsene som ikke er koden tilgangstillatelser.'
  example:
  - "The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]"
  syntax:
    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Én av de <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> verdier."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  id: Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Henter eller angir en verdi som angir om den gjeldende sikkerhetskontohaveren er godkjent av den underliggende leverandøren rollebasert sikkerhet."
  syntax:
    content: public bool Authenticated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis gjeldende sikkerhetskontohaveren er godkjent; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Oppretter og returnerer en ny <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
  remarks: "Denne metoden kan bare kalles av sikkerhetssystemer, aldri av programmet kode.       På kompileringstidspunktet konvertere attributter sikkerhet deklareringer til en serialisert form i metadataene. Deklarerende sikkerhetsdata i metadataene er opprettet fra tillatelsen som returnerer denne metoden som samsvarer med attributtet."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "En <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> som samsvarer med attributtet."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  id: Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Henter eller angir navnet på identiteten som er knyttet til gjeldende sikkerhetskontohaveren."
  remarks: "Hvis godkjenningstjenesten Windows NT, er navnet på den samme som brukerens Windows NT-påloggingsnavn (i formatet &quot;Domenenavn\\brukernavn&quot;). Se dokumentasjonen for din verten for å finne ut hvilke godkjenningstjeneste den bruker og hvordan bestemmer identiteten til den gjeldende sikkerhetskontohaveren."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Et navn som samsvarer med mot som angitt av den underliggende leverandøren rollebasert sikkerhet."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  id: Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Henter eller angir medlemskap i en angitt sikkerhetsrolle."
  remarks: "De tilgjengelige rollene varierer basert på godkjenningstjeneste i bruk av verten. Hvis godkjenningstjenesten Windows NT, er roller Windows NT-brukergrupper (i formatet &quot;DomainName\\GroupName&quot;). Se dokumentasjonen for din verten til å angi hvilken godkjenningstjeneste den bruker og roller brukere kan hører til."
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "Navnet på en rolle fra den underliggende leverandøren rollebasert sikkerhet."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PrincipalPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
