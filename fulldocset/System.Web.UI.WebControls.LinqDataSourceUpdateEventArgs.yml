### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  id: LinqDataSourceUpdateEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  type: Class
  summary: "Gir dataene for den <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Updating&quot;> </xref> hendelsen."
  remarks: "LinqDataSourceUpdateEventArgs-objekt som er sendt til noen hendelsesbehandlingen for den <xref:System.Web.UI.WebControls.LinqDataSource.Updating>hendelsen.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> Du kan bruke LinqDataSourceUpdateEventArgs-objektet til å undersøke dataene før oppdateringen er utført i datakilden. Du kan deretter validere dataene, undersøke validering unntak av klassen dataene, eller endre en verdi før oppdateringen. Du kan også avbryte oppdateringen.       Den <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>objektet inneholder data som opprinnelig ble hentet fra datakilden.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> Den <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>objektet inneholder data som lagres i datakilden under oppdateringen.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>       Hvis objektet som representerer datakilden oppstår det et unntak for validering før du oppdaterer dataene, <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>inneholder en forekomst av <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>klassen.</xref:System.Web.UI.WebControls.LinqDataSourceValidationException> </xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Du kan hente alle validering unntak via den <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>egenskapen.</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> Hvis ingen validering unntak, den <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>egenskapen inneholder `null`.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> Hvis du behandle validering unntakene og vil ikke unntaket bli utløst på nytt, angir du <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>egenskapen `true`.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>       Som standard i <xref:System.Web.UI.WebControls.LinqDataSource>kontrollen butikker opprinnelige verdier fra datakilden i visningen tilstand på websiden, bortsett fra de som har egenskapen <xref:System.Data.Linq.Mapping.ColumnAttribute>attributtet er merket som `UpdateCheck.Never`.</xref:System.Data.Linq.Mapping.ColumnAttribute> </xref:System.Web.UI.WebControls.LinqDataSource> LINQ til SQL kontrollerer automatisk integriteten til dataene før du oppdaterer dataene. Den gjør dette ved å sammenligne de gjeldende verdiene i datakilden med de opprinnelige verdiene som er lagret i visningsstatusen. LINQ til SQL opphøyer et unntak hvis verdiene i datakilden er endret. Du kan utføre flere datavalidering ved å opprette et behandlingsprogram for den <xref:System.Web.UI.WebControls.LinqDataSource.Updating>hendelsen.</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_352_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_352_1.cs)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;> </xref> klassen med det angitte unntaket."
  syntax:
    content: public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "Unntaket oppstod under validering av dataene for å vise."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  id: '#ctor(System.Object,System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;> </xref> klasse."
  syntax:
    content: public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);
    parameters:
    - id: originalObject
      type: System.Object
      description: "Et objekt av typen som er angitt i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>egenskapen som inneholder de opprinnelige verdiene som ble hentet fra datakilden.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
    - id: newObject
      type: System.Object
      description: "Et objekt av typen som er angitt i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>-egenskap som inneholder verdiene som lagres i datakilden.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Henter unntak oppstod mens dataene ble valideres før oppdateringen."
  remarks: "Hvis det oppstår et unntak for validering før oppdateringen utføres, lagret unntaket i egenskapen unntak. I en hendelsesbehandling for den <xref:System.Web.UI.WebControls.LinqDataSource.Updating>hendelse, kan du hente unntaket via egenskapen unntak.</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "Unntaket, hvis det oppstod en feilen; Ellers <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Henter eller angir en verdi som angir om unntaket ble håndtert, og at den ikke må være et nytt."
  remarks: "Du kan opprette en hendelsesbehandling for den <xref:System.Web.UI.WebControls.LinqDataSource.Updating>-hendelsen for å undersøke validering unntak som oppstod før oppdateringen.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> Hvis du unntaket og ikke vil bli utløst på nytt, angi ExceptionHandled egenskapen `true`. Hvis du ikke angi egenskapen ExceptionHandled `true`, unntaket vil bli overført til neste hendelsesbehandlingen i kallstakken."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis unntaket ble håndtert; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Henter objektet som inneholder verdiene som lagres i datakilden."
  remarks: "Oppretter en hendelsesbehandling for den <xref:System.Web.UI.WebControls.LinqDataSource.Updating>hendelsen og hente egenskapen NewObject å validere dataene.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> Du kan også endre dataene eller avbryte oppdateringen."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the NewObject property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the NewObject property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1298_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1298_1.cs)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "Et objekt av typen som er angitt i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>-egenskap som inneholder dataene du vil lagre.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  id: OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Henter objektet som inneholder verdiene som opprinnelig ble hentet fra datakilden."
  remarks: "Du kan bruke egenskapen OriginalObject til å kontrollere de opprinnelige verdiene mot gjeldende verdier i datakilden, og for å avbryte oppdateringen eller utføre andre handlinger.       OriginalObject egenskapen inneholder verdier for egenskapene som fast i visningen tilstand på siden. En egenskap som er fast i disse tilfellene: – når den vises i en databundet-kontroll.      -Når den <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>for den <xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName>attributtet er satt til `Always` eller `WhenChanged`.</xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> </xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>       Hvis den <xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A>er satt til `Never` og verdien ikke vises i en databundet kontroll, verdien ikke er lagret på siden.</xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> I dette tilfellet den ikke kan tilordnes OriginalObject-egenskapen."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the OriginalObject property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_761_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_761_1.cs)]"
  syntax:
    content: public object OriginalObject { get; }
    return:
      type: System.Object
      description: "Et objekt av typen som er angitt i den <xref:System.Web.UI.WebControls.LinqDataSource.TableName*>-egenskap som inneholder data som ble hentet fra datakilden.</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
