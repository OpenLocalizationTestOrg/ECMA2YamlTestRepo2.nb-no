### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA1
  id: HMACSHA1
  children:
  - System.Security.Cryptography.HMACSHA1.#ctor
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  langs:
  - csharp
  name: HMACSHA1
  nameWithType: HMACSHA1
  fullName: System.Security.Cryptography.HMACSHA1
  type: Class
  summary: "Behandling Hash-baserte Message Authentication Code (HMAC) ved hjelp av den <xref href=&quot;System.Security.Cryptography.SHA1&quot;> </xref> hash-funksjonen."
  remarks: "HMACSHA1 er en type kodede nummeralgoritmen som er laget av SHA1 hash-funksjonen og brukes som en HMAC eller hash-basert godkjenning Meldingskode. Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 biter lang.       En HMAC kan brukes til å fastsette om en melding sendt via en usikker kanal tuklet med, forutsatt at avsender og mottakeren dele en hemmelig nøkkel. Avsenderen beregner hash-verdien for den opprinnelige dataene, og sender både opprinnelige dataene og hash-verdi som én enkelt melding. Mottakeren beregner hash-verdien for den mottatte meldingen på nytt, og kontrollerer at beregnede HMAC samsvarer med overførte HMAC.       Endringer i dataene eller hash-verdien som fører til en konflikt fordi kunnskap om hemmelig nøkkel er nødvendig endre meldingen for å reprodusere riktig hash-verdien. Hvis opprinnelige og beregnede hash-verdiene er like, godkjennes derfor meldingen.       SHA-1 (Secure Hash-algoritmen, også kalt SHS sikre Hash-Standard) er en kryptografisk nummeralgoritme som er publisert av USA-Government. Den gir en 160-biters hash-verdi fra en tilfeldig streng.       HMACSHA1 godtar nøkler noen størrelsen, og produserer en hash-sekvens som 160 biter lang."
  example:
  - "The following code example shows how to sign a file by using the HMACSHA1 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA1#1](~/add/codesnippet/csharp/t-system.security.crypto_82_1.cs)]\n [!code-cpp[HMACSHA1#1](~/add/codesnippet/cpp/t-system.security.crypto_82_1.cpp)]\n [!code-vb[HMACSHA1#1](~/add/codesnippet/visualbasic/t-system.security.crypto_82_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA1 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klassen med en tilfeldig generert nøkkel."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>er en type kodede nummeralgoritmen som er laget av SHA1 hash-funksjonen og brukes som en HMAC eller hash-basert godkjenning Meldingskode.</xref:System.Security.Cryptography.HMACSHA1> Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 biter (20 byte) i lengde.       Denne konstruktøren bruker en 64-byte, tilfeldig generert nøkkel."
  syntax:
    content: public HMACSHA1 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klassen med de angitte key dataene."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>er en type kodede nummeralgoritmen som er laget av SHA1 hash-funksjonen og brukes som en HMAC eller hash-basert godkjenning Meldingskode.</xref:System.Security.Cryptography.HMACSHA1> Prosessen for HMAC blander en hemmelig nøkkel med datatypen meldingen hashes resultatet med hash-funksjonen, blander som hash-verdi med hemmelig nøkkel på nytt og gjelder hash-funksjonen en gang. Output-hash er 160 biter (20 byte) i lengde.      > [!NOTE] > Denne konstruktøren oppretter en ubehandlet forekomst av algoritmen ved hjelp av <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>klasse.</xref:System.Security.Cryptography.SHA1CryptoServiceProvider>"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.
  syntax:
    content: public HMACSHA1 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "Hemmelig nøkkel for <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> kryptering. Nøkkelen kan være, men hvis det er flere enn 64 byte lang den er bruke hash-kode (ved hjelp av SHA-1) avledes en 64-biters nøkkel. Den anbefalte størrelsen på hemmelig nøkkel er derfor 64 byte."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klassen med de angitte key dataene og en verdi som angir om du vil bruke den forvaltede versjonen av SHA1-algoritmen."
  syntax:
    content: public HMACSHA1 (byte[] key, bool useManagedSha1);
    parameters:
    - id: key
      type: System.Byte[]
      description: "Hemmelig nøkkel for <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> kryptering. Nøkkelen kan være, men hvis det er flere enn 64 byte lang, den er bruke hash-kode (ved hjelp av SHA-1) avledes en 64-biters nøkkel. Den anbefalte størrelsen på hemmelig nøkkel er derfor 64 byte."
    - id: useManagedSha1
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>bruke administrerte implementeringen av algoritmen SHA1 (den <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref> klassen); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> til å bruke uforvaltede implementeringen (den <xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;> </xref> klassen)."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA1.#ctor*
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1
  nameWithType: HMACSHA1.HMACSHA1
