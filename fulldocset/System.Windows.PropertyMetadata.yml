### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Definerer deler virkemåte for en avhengighetsegenskap som brukes til en spesifikk type, inkludert betingelser den ble registrert med."
  remarks: "Egenskapmetadata kan defineres og brukes under avhengighet egenskapen registreringen når du kaller den <xref:System.Windows.DependencyProperty.Register%2A>-metoden (eller variasjoner for vedlagte skrivebeskyttet avhengighetsegenskaper eller), eller etter opprinnelige eieren registreringen når du kaller den <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>metoden.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>tar også egenskapmetadata.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Denne klassen er en konkret basisklasse som kan brukes i hvert enkelt av disse anrop. Det er svært vanlig å angi metadata ved hjelp av en av de avledede klassene som <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Disse avledede klasser støtter mer detaljert metadata overført som boolske verdier, som er nyttige for søker etter, eller å aktivere noen egenskapen systemet og oppsettet virkemåter som bare er implementert på den [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] framework nivå.       Flere egenskaper for denne klassen er lese-og skrivetilgang til objektmodellen, men kan bare skrives før forekomsten som brukes i en egenskap systemoperasjon for eksempel <xref:System.Windows.DependencyProperty.Register%2A>eller <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Hvert enkelt av disse egenskapene kan også er angitt av konstruktøren, men utsettes slik at <xref:System.Windows.PropertyMetadata.Merge%2A>metoden implementeringer kan gi dem.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>## XAML teksten Bruk slike og medlemmer av denne typen vanligvis ikke brukes i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klasse."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klassen med en angitt standardverdi for avhengighetsegenskapen disse metadataene vil gjelde for."
  remarks: "Typen for den angitte verdien for `defaultValue` må være samsvar eller være knyttet til typen som er angitt i den opprinnelige registreringen av avhengighetsegenskapen disse metadataene vil gjelde for. Manglende samsvar mellom metadata standardverditype og typen avhengighetsegenskapen det blir brukt på kan være vanskelig å feilsøke, fordi det manglende samsvaret ikke er en under kompilering (det manglende samsvaret heve et kjøretid unntak).       Selv om det er standard per parameterløs konstruktør en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan ikke angis.</xref:System.Windows.DependencyProperty.UnsetValue> Forsøk på å gjøre dette vil vise et unntak."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardverdien til å angi for en avhengighetsegenskapen, vanligvis angitt som en verdi for en bestemt type."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan ikke angis som verdien <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; se kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klassen med den angitte <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referanse."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referanse til et behandlingsprogram implementering som skal kalles av egenskapen systemet når gjeldende verdi for egenskapen endres."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klassen med en angitt standardverdi og <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referanse."
  remarks: "Typen for den angitte verdien `defaultValue` må være samsvar eller være knyttet til typen som er angitt i den opprinnelige registreringen av avhengighetsegenskapen disse metadataene vil gjelde for. Manglende samsvar mellom metadata standardverditype og typen avhengighetsegenskapen det blir brukt på kan være vanskelig å feilsøke, fordi det manglende samsvaret ikke er en under kompilering (det manglende samsvaret heve et kjøretid unntak).       Selv om det er standard per parameterløs konstruktør en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan ikke angis.</xref:System.Windows.DependencyProperty.UnsetValue> Forsøk på å gjøre dette vil vise et unntak."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardverdien for avhengighetsegenskapen, vanligvis angitt som en verdi for en bestemt type."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referanse til et behandlingsprogram implementering som skal kalles av egenskapen systemet når gjeldende verdi for egenskapen endres."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan ikke angis som verdien <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; se kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> klassen med angitt standardverdi og tilbakeringinger."
  remarks: "Hvis du vil angi en <xref:System.Windows.CoerceValueCallback>, men ikke en <xref:System.Windows.PropertyChangedCallback>, kan du sende `null` for den `propertyChangedCallback` parameteren.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Typen for den angitte verdien for `defaultValue` må være samsvar eller være knyttet til typen som er angitt i den opprinnelige registreringen av avhengighetsegenskapen disse metadataene vil gjelde for. Manglende samsvar mellom metadata standardverditype og typen avhengighetsegenskapen det blir brukt på kan være vanskelig å feilsøke, fordi det manglende samsvaret ikke er en under kompilering (det manglende samsvaret heve et kjøretid unntak).       Selv om det er standard per parameterløs konstruktør en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan ikke angis.</xref:System.Windows.DependencyProperty.UnsetValue> Forsøk på å gjøre dette vil vise et unntak."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Standardverdien for avhengighetsegenskapen, vanligvis angitt som en verdi for en bestemt type."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Referanse til et behandlingsprogram implementering som skal kalles av egenskapen systemet når gjeldende verdi for egenskapen endres."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Referanse til et behandlingsprogram implementering som skal kalles når egenskapen systemet kaller <xref:System.Windows.DependencyObject.CoerceValue*>mot denne egenskapen.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>kan ikke angis som verdien <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; se kommentarer."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter eller angir en referanse til en <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementering som er angitt i metadataene."
  remarks: "Tilbakeringinger i egenskapen metadataene er vanligvis offentlige medlemmer i typen som inneholder så verdien for denne egenskapen er viktig for de fleste tilfeller som bare bruker en eksisterende avhengighetsegenskapen metadata. En årsak denne egenskapen er eksponert er slik at metadata underklasser kan utføre de ønskede merge logikken Hvis både base metadata og overstyrer/tillegging av metadata angir <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Standard merge logikken for en CoerceValueCallback er imidlertid å erstatte den forrige.       CoerceValueCallback er definert i objektmodellen som skrivebeskyttet. Dette er så CoerceValueCallback kan justeres etter initialisering av den <xref:System.Windows.PropertyMetadata>selve objektet.</xref:System.Windows.PropertyMetadata> Imidlertid når metadataene forbrukes som en del av et kall til <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>egenskapen systemet vil lukke den metadata forekomsten og egenskapene regnes nå uforanderlig.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Forsøk på å angi CoerceValueCallback når <xref:System.Windows.PropertyMetadata.IsSealed%2A>er `true` forekomsten vil utløse et unntak i metadataene.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "En <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementering referanse."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kan ikke angi en metadataegenskapen når den brukes på en avhengighet egenskapen operasjon."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter eller angir standardverdien for avhengighetsegenskapen."
  remarks: "DefaultValue er definert i objektmodellen som skrivebeskyttet. Dette er så DefaultValue kan justeres etter initialisering av den <xref:System.Windows.PropertyMetadata>selve objektet.</xref:System.Windows.PropertyMetadata> Imidlertid når metadataene forbrukes som en del av et kall til <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>egenskapen systemet vil lukke den metadata forekomsten og egenskapene regnes nå uforanderlig.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Forsøk på å angi DefaultValue når <xref:System.Windows.PropertyMetadata.IsSealed%2A>er `true` forekomsten vil utløse et unntak i metadataene.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Selv om det er standard per parameterløs konstruktør en `defaultValue` av <xref:System.Windows.DependencyProperty.UnsetValue>kan ikke angis ved hjelp av DefaultValue eller konstruktøren.</xref:System.Windows.DependencyProperty.UnsetValue> Forsøk på å gjøre dette vil vise et unntak.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>## XAML teksten Bruk medlemmer av denne typen ikke brukes i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Standardverdien for egenskapen. Standardverdien for en <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> forekomst som er opprettet med parameterløs konstruktør blir <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; se kommentarer."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Kan ikke angis som verdien <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> når opprettet; se kommentarer."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kan ikke angi en metadataegenskapen når den brukes på en avhengighet egenskapen operasjon."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter en verdi som bestemmer om metadataene er brukt på en egenskap i annen måte, noe som førte til uforanderlig tilstanden til den metadata-forekomsten."
  remarks: "Ulike egenskaper for <xref:System.Windows.PropertyMetadata>, slik som <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, er definert i objektmodellen med lese-og skrivetilgang.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Dette er så disse egenskapene kan justeres etter initialisering av den <xref:System.Windows.PropertyMetadata>selve objektet.</xref:System.Windows.PropertyMetadata> Imidlertid når metadataene brukes på en avhengighetsegenskapen som en del av et kall til <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>egenskapen systemet vil lukke den metadata forekomsten og egenskapene regnes nå uforanderlig.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Da ett av disse kall <xref:System.Windows.PropertyMetadata.OnApply%2A>kalles, og verdien for denne egenskapen settes til `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis metadata forekomst er uforanderlige. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Slår sammen disse metadataene med metadataene for basistypen."
  remarks: "Denne metoden brukes internt ved metadata overstyres (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> metoden).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Grunnleggende metadataene til å slå sammen med verdier for denne forekomsten."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Avhengighetsegenskapen som disse metadataene brukes."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Kalles når disse metadataene er brukt på en egenskap som indikerer at metadataene er blir lukket."
  remarks: "Underklasser kan sikre at alle mutability av datastrukturen for en <xref:System.Windows.PropertyMetadata>underklasse må være merket som uforanderlig når OnApply kalles.</xref:System.Windows.PropertyMetadata> Dette vil kalles når metadataene brukes på en egenskap systemoperasjon (registrere, legge til eieren, overstyre metadata)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Avhengighetsegenskapen metadataene er brukt."
    - id: targetType
      type: System.Type
      description: "Typen som er tilknyttet denne metadata Hvis dette er typespesifikke metadata. Hvis dette er standard metadata, vil denne verdien er en nullreferanse."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Henter eller angir en referanse til en <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering som er angitt i metadataene."
  remarks: "Tilbakeringinger i metadataene for egenskapen er ikke vanligvis offentlige medlemmer i definerer typen så verdien for denne egenskapen er viktig for de fleste tilfeller som bare bruker en eksisterende avhengighetsegenskapen metadata. En årsak denne egenskapen er eksponert er slik at metadata klasser kan utføre de ønskede merge logikken Hvis både base metadata og overstyrer/tillegging av metadata angir <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> Standard merge logikken for er å beholde alle PropertyChangedCallback implementeringer i en tabell og kaller dem med tilbakeringinger opprettet av dypeste klassen i hierarkiet som kjører første.       PropertyChangedCallback er definert i objektmodellen som skrivebeskyttet. Dette er så PropertyChangedCallback kan justeres etter initialisering av den <xref:System.Windows.PropertyMetadata>selve objektet.</xref:System.Windows.PropertyMetadata> Imidlertid når metadataene forbrukes som en del av et kall til <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, eller <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>egenskapen systemet vil lukke den metadata forekomsten og egenskapene regnes nå uforanderlig.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Forsøk på å angi PropertyChangedCallback når <xref:System.Windows.PropertyMetadata.IsSealed%2A>er `true` forekomsten vil utløse et unntak i metadataene.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "En <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementering referanse."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kan ikke angi en metadataegenskapen når den brukes på en avhengighet egenskapen operasjon."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
