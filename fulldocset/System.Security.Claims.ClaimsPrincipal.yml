### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  summary: "En <xref:System.Security.Principal.IPrincipal>implementering som støtter flere krav kodebasert identiteter.</xref:System.Security.Principal.IPrincipal>"
  remarks: "Begynner med .NET Framework 4.5, har Windows Identity Foundation (WIF) og krav kodebasert identitet er integrert i .NET Framework. Dette betyr at mange klasser som representerer en sikkerhetskontohaver i .NET Framework nå avledes fra ClaimsPrincipal i stedet for å implementere den <xref:System.Security.Principal.IPrincipal>grensesnittet.</xref:System.Security.Principal.IPrincipal> I tillegg til implementering av <xref:System.Security.Principal.IPrincipal>grensesnittet ClaimsPrincipal viser egenskaper og metoder som er nyttige for å arbeide med krav.</xref:System.Security.Principal.IPrincipal>       ClaimsPrincipal viser en samling av identiteter, hver er <xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity> I vanlige fall denne samlingen er tilgjengelig via den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>egenskapen kan bare ha ett enkelt element.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       Innføring av ClaimsPrincipal i .NET 4.5 som sikkerhetskontohaver for mest principal klasser avledet som tvinger ikke endre noe i på samme måte som du håndterer identitet. Det imidlertid åpner flere muligheter og tilbud øke sjansene for å Vær bedre tilgangskontroll. For eksempel:-programmet koden selve kan arbeide direkte med krav i gjeldende sikkerhetskontohaveren til stasjonen ekstra godkjenning, autorisasjon og personlige data oppgaver.      -Du kan front ressursene med et krav behandling pipeline som kan håndtere ber om godkjenning og autorisasjonspolicy selv før kjøring når koden. Du kan for eksempel konfigurere et webbasert program eller en tjeneste med en egendefinert krav godkjenning leder, en forekomst av en klasse som er avledet fra <xref:System.Security.Claims.ClaimsAuthenticationManager>klassen.</xref:System.Security.Claims.ClaimsAuthenticationManager> Når det er konfigurert, forespørselen som behandler pipelinen aktiverer den <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>-metoden på krav godkjenning lederen sendes en ClaimsPrincipal som representerer konteksten for den innkommende forespørselen.</xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> Krav godkjenning lederen kan utføre godkjenning basert på verdiene i de innkommende kravene. Det kan også filtrere, transformere eller legge til krav til innkommende kravet settet. For eksempel den kan brukes til å forbedre interaksjonen innkommende kravet angitt med nye krav som er opprettet fra en lokal datakilde som en lokal brukerprofil – du kan konfigurere en webbasert program med en egendefinert krav authorization manager en forekomst av en klasse som er avledet fra <xref:System.Security.Claims.ClaimsAuthorizationManager>klassen.</xref:System.Security.Claims.ClaimsAuthorizationManager> Når det er konfigurert, forespørselen som behandler pipelinen pakker innkommende ClaimsPrincipal i en <xref:System.Security.Claims.AuthorizationContext>og aktiverer det <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>-metoden på din krav authorization manager.</xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> </xref:System.Security.Claims.AuthorizationContext> Din krav authorization manager kan deretter bruke godkjenning basert på innkommende krav.      -Innebygd krav-baserte koden tilgangskontroll kan utføres ved å konfigurere programmet med en egendefinert krav authorization manager og ved hjelp av den <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>klassen for å utføre viktig tilgangskontroll eller <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>til å utføre deklarerende tilgang kontrollerer.</xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Krav-baserte koden tilgangskontroll er utføres internt utenfor som behandler pipelinen og så er tilgjengelige for alle applikasjoner som et krav authorization manager er konfigurert.       Du kan få en forekomst av ClaimsPrincipal for objektet som er knyttet til en forespørsel i en applikasjon RP (eller sikkerhetskontohaver som kjører en tråd) ved endring av <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>egenskapen ClaimsPrincipal.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> Krav som er knyttet til et objekt som ClaimsPrincipal er tilgjengelige via den <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> Den <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>egenskapen returnerer alle kravene som identiteter tilknyttet sikkerhetskontohaveren inneholder.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> I uvanlig tilfeller der ClaimsPrincipal inneholder flere <xref:System.Security.Claims.ClaimsIdentity>forekomster, kan du bruke den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>egenskapen, eller du kan få tilgang til den primære identiteten ved hjelp av den <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> ClaimsPrincipal inneholder flere metoder som disse krav kan søkes og støtte full for språket integrert spørringen (LINQ). Identiteter kan legges til sikkerhetskontohaveren ved hjelp av den <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>eller <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A>metoder.</xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> </xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>      > [!NOTE] > For å legge til IDer i ClaimsPrincipal, må en oppringer har fullstendig klarering.       Som standard WIF prioriterer <xref:System.Security.Principal.WindowsIdentity>objekter ved å velge den primære identiteten til å returnere til den <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Principal.WindowsIdentity> Du kan endre dette problemet ved å oppgi en representant via den <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>til å utføre utvalget.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> Den <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>egenskapen gir lignende bruksområder for den <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A> </xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>       I modellen basert på krav er om en sikkerhetskontohaver er i en bestemt rolle avhengig av krav vises av de underliggende identitetene. Den <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A>metoden undersøker i hovedsak hver identitet tilknyttet sikkerhetskontohaveren for å finne ut om den har et krav med den angitte rolle-verdien.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> Hva slags kravet (representert av den <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>egenskapen) brukes til å finne ut hvilke krav bør du undersøke under rollen database som er angitt i en identitet via den <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>egenskapen.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> Krav undersøkes under rollen sjekker kan derfor være av en annen type for ulike identiteter tilknyttet sikkerhetskontohaveren."
  example:
  - "The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a ClaimsPrincipal. The claims are then read from it and then are written to the response.  \n  \n```  \n  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsPrincipal : System.Security.Principal.IPrincipal
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasse."
  remarks: "Ingen identiteter er knyttet til den nye forekomsten. (Det <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen er tom).</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal ();
    parameters: []
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klasse ved hjelp av angitte krav-IDer."
  remarks: "Den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>-samlingen er initialisert med de angitte identitetene.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Identiteter som ikke sikkerhetskontohaveren for ny krav."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsPrincipal (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Som skal legges til."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klassen fra de angitte identitet."
  remarks: "Hvis de angitte identitet kan tilordnes fra <xref:System.Security.Claims.ClaimsIdentity>, den brukes til å initialisere den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> Ellers en <xref:System.Security.Claims.ClaimsIdentity>er opprettet ved hjelp av den angitte IDen og brukes til å initialisere samlingen.</xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "Identiteten som initialisere sikkerhetskontohaveren for ny krav."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klassen fra den angitte sikkerhetskontohaveren."
  remarks: "Hvis den angitte sikkerhetskontohaveren kan tilordnes fra <xref:System.Security.Claims.ClaimsPrincipal>, alle IDer legges til i <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsPrincipal> Hvis den angitte sikkerhetskontohaveren ikke kan tilordnes fra <xref:System.Security.Claims.ClaimsPrincipal>, en ny <xref:System.Security.Claims.ClaimsIdentity>er opprettet fra den <xref:System.Security.Principal.IIdentity>i den <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>egenskapen og legges til i <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IPrincipal principal);
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "Sikkerhetskontohaveren som initialisere sikkerhetskontohaveren for ny krav."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> klassen fra en serialisert dataflyt opprettet ved hjelp av <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>."
  syntax:
    content: protected ClaimsPrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "De serialiserte dataene."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Konteksten for serialisering."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Legger til de angitte krav identitetene denne krav sikkerhetskontohaveren."
  remarks: "Identiteten er lagt til i <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentities (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Krav identiteter å legge til."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Legger til den angitte kravidentiteten denne krav sikkerhetskontohaver."
  remarks: "Identiteten er lagt til i <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentity (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "Kravidentiteten til å legge til."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter en samling som inneholder alle kravene fra alle krav-IDer som er forbundet med denne krav sikkerhetskontohaver."
  remarks: "En krav sikkerhetskontohaver har en samling av <xref:System.Security.Claims.ClaimsIdentity>objekter som er tilgjengelig via egenskapen identiteter.</xref:System.Security.Claims.ClaimsIdentity> Hver <xref:System.Security.Claims.ClaimsIdentity>i samlingen inneholder én eller flere krav.</xref:System.Security.Claims.ClaimsIdentity> Egenskapen krav returnerer alle kravene fra alle krav identiteter i denne samlingen.       Egenskapen krav kan undersøkes av egendefinerte implementeringer av den <xref:System.Security.Claims.ClaimsAuthenticationManager>klassen for å bestemme godkjenning eller for å filtrere, transformere eller forbedre interaksjonen innkommende kravet sett; av egendefinerte implementeringer av den <xref:System.Security.Claims.ClaimsAuthorizationManager>klassen håndheve godkjenning policy; eller av programmet kode å gjøre godkjenning avgjørelsene eller tilpasse bruker oppleve basert på krav finnes i samlingen.</xref:System.Security.Claims.ClaimsAuthorizationManager> </xref:System.Security.Claims.ClaimsAuthenticationManager>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Krav som er forbundet med denne sikkerhetskontohaver."
  overload: System.Security.Claims.ClaimsPrincipal.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Får eller angir representanten brukes til å velge sikkerhetskontohaveren for krav som ble returnert av den <xref:System.Security.Claims.ClaimsPrincipal.Current*>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Current*>"
  remarks: "Du kan angi denne egenskapen til å overstyre standard virkemåte for den <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A>"
  syntax:
    content: public static Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "Representanten. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Returnerer en kopi av denne forekomsten."
  syntax:
    content: public virtual System.Security.Claims.ClaimsPrincipal Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "En ny kopi av det <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> objektet."
  overload: System.Security.Claims.ClaimsPrincipal.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Oppretter en ny kravidentiteten."
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Den binære leseren."
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "Den opprettede kravidentiteten."
  overload: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter sikkerhetskontohaveren for gjeldende krav."
  remarks: "Som standard <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>returneres.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> Du kan endre dette problemet ved å angi den <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>til å angi en representant kalles for å finne ut sikkerhetskontohaveren for gjeldende.</xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>"
  syntax:
    content: public static System.Security.Claims.ClaimsPrincipal Current { get; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "Gjeldende krav sikkerhetskontohaveren for."
  overload: System.Security.Claims.ClaimsPrincipal.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "Som skal legges til."
  overload: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter alle kravene som samsvarer med det angitte predikatet."
  remarks: "Returnerer krav fra alle IDer som er knyttet til sikkerhetskontohaveren for krav."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funksjonen som utfører samsvarende logikken."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Samsvarende krav."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter alle eller krav som har den angitte kravtypen."
  remarks: "Returnerer krav fra alle IDer som er knyttet til sikkerhetskontohaveren for krav. Sammenligningen gjøres ved hjelp av ordenstall i sikkerhetsfølsom på `type`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "Kravtype som oppfyller kravene."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Samsvarende krav."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter det første kravet som samsvarer med det angitte predikatet."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funksjonen som utfører samsvarende logikken."
    return:
      type: System.Security.Claims.Claim
      description: "Den første samsvarende Domenekrav eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Hvis ingen forekomst blir funnet."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter det første kravet med kravtypen som er angitt."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "Kravtypen til å samsvare med."
    return:
      type: System.Security.Claims.Claim
      description: "Den første samsvarende Domenekrav eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Hvis ingen forekomst blir funnet."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Fyller ut den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> med data som kreves for å serialisere gjeldende <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> objektet."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Objektet til å fylle ut med data."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Målet for denne serialisering. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Bestemmer om noen av krav-IDer som er tilknyttet denne krav sikkerhetskontohaveren inneholder et krav som samsvarer med det angitte predikatet."
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funksjonen som utfører samsvarende logikken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis det finnes et samsvarende krav. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Bestemmer om noen av krav-IDer som er tilknyttet denne krav sikkerhetskontohaveren inneholder et krav med den angitte kravet og."
  remarks: "Kontrollerer ikke den <xref:System.Security.Claims.Claim.Issuer%2A>eller <xref:System.Security.Claims.Claim.OriginalIssuer%2A>Egenskaper.</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> Sammenligningen er opprettet med ordenstall bokstaver på verdien. store/små bokstaver i sikkerhetsfølsom for typen."
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "Krav til å samsvare med typen."
    - id: value
      type: System.String
      description: "Verdien for krav til å samsvare med."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis det finnes et samsvarende krav. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter en samling som inneholder alle krav-IDer som er forbundet med denne krav sikkerhetskontohaver."
  remarks: "Samlingen inneholder ett enkelt element i det vanlige tilfellet.       Det er mulig for samlingen inneholder noen elementer som `null`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Samling av krav-IDer."
  overload: System.Security.Claims.ClaimsPrincipal.Identities*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Henter primært krav identiteten som er forbundet med denne krav sikkerhetskontohaver."
  remarks: "Som standard prioriterer rammeverket identiteter av typen <xref:System.Security.Principal.WindowsIdentity>når returnerer identiteten.</xref:System.Security.Principal.WindowsIdentity> Først <xref:System.Security.Principal.WindowsIdentity>funnet i den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen returneres.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.WindowsIdentity> Hvis det er ingen <xref:System.Security.Principal.WindowsIdentity>i samlingen første identiteten kan tilordnes fra <xref:System.Security.Claims.ClaimsIdentity>returneres.</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Principal.WindowsIdentity> Hvis det er ingen <xref:System.Security.Claims.ClaimsIdentity>, `null` returneres.</xref:System.Security.Claims.ClaimsIdentity> Hvis den <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>samlingen er tom, en <xref:System.ArgumentNullException>forårsakes.</xref:System.ArgumentNullException> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       Du kan endre standard virkemåte ved å angi den <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>til å angi en representant kalles for å fastslå identiteten.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>"
  syntax:
    content: public virtual System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Den primære kravidentiteten som er forbundet med denne krav sikkerhetskontohaver."
  overload: System.Security.Claims.ClaimsPrincipal.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Returnerer en verdi som angir om enheten (bruker) representeres av dette krav hovednavnet er i den angitte rollen."
  remarks: "Metoden IsInRole kontrollerer om en identitet som har denne krav sikkerhetskontohaveren inneholder et krav av typen <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>der verdien av kravet er lik verdien som er angitt av den `role` parameteren.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>      > [!NOTE] > Hver <xref:System.Security.Claims.ClaimsIdentity>har sin egen definisjonen av kravtypen som representerer en rolle.</xref:System.Security.Claims.ClaimsIdentity> Slike krav kan få tilgang til og angis via den <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>egenskapen.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "Rollen å se."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis krav sikkerhetskontohaver i den angitte rollen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Får eller angir representanten brukes til å velge kravidentiteten returnert av den <xref:System.Security.Claims.ClaimsPrincipal.Identity*>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Identity*>"
  remarks: "Du kan angi denne egenskapen til å overstyre standard virkemåte for den <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>egenskapen.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>"
  syntax:
    content: public static Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "Representanten. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Som skal legges til."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Som skal legges til."
    - id: userData
      type: System.Byte[]
      description: "Som skal legges til."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ClaimsIdentity>
  nameWithType: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  isExternal: true
  name: Func<ClaimsPrincipal>
  nameWithType: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Security.Claims.ClaimsPrincipal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: ClaimsPrincipal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.Current
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  isExternal: true
  name: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  nameWithType: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsPrincipal.#ctor*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities
  nameWithType: ClaimsPrincipal.AddIdentities
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity
  nameWithType: ClaimsPrincipal.AddIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Clone*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone
  nameWithType: ClaimsPrincipal.Clone
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Current*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.FindAll*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll
  nameWithType: ClaimsPrincipal.FindAll
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsPrincipal.FindFirst
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsPrincipal.GetObjectData
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsPrincipal.HasClaim
- uid: System.Security.Claims.ClaimsPrincipal.Identities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: ClaimsPrincipal.IsInRole
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsPrincipal.WriteTo
