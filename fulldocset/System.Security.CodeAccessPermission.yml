### YamlMime:ManagedReference
items:
- uid: System.Security.CodeAccessPermission
  id: CodeAccessPermission
  children:
  - System.Security.CodeAccessPermission.#ctor
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Copy
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  - System.Security.CodeAccessPermission.ToXml
  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
  type: Class
  summary: "Definerer den underliggende strukturen alle kode tilgangstillatelser."
  remarks: "Koden tilgangstillatelser Bruk en stakk gå til å sikre at alle brukere av koden har fått en. Hvis kubeattributttillatelsesobjekt `null`, behandlingen lik kubeattributttillatelsesobjekt med tilstanden <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.</xref:System.Security.Permissions.PermissionState?displayProperty=fullName>       Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken.       Inheritors av klassen CodeAccessPermission må gis fullstendig klarering for å fungere som tillatelser utvider infrastruktur for sikkerhet. Å fastslå at inheritors fullstendig klarerte, CodeAccessPermission utsteder en <xref:System.Security.Permissions.SecurityAction>for <xref:System.Security.Permissions.SecurityPermissionFlag>= `true` og <xref:System.Security.Permissions.SecurityPermissionFlag>= `true`.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityAction>"
  example:
  - "The following code example shows a permission derived from the CodeAccessPermission class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/csharp/t-system.security.codeac_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/cpp/t-system.security.codeac_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/visualbasic/t-system.security.codeac_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.#ctor
  id: '#ctor'
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> klasse."
  remarks: "Denne konstruktøren kalles for å starte tilstand i typen når en forekomst av den utledede klassen er opprettet. Selv om du kan eksplisitt kalle denne konstruktøren i denne konstruktøren deklarasjonen utledede klassen konstruktøren, er ikke vanligvis behov. de fleste kompilatorer genererer automatisk kallet for deg."
  syntax:
    content: protected CodeAccessPermission ();
    parameters: []
  overload: System.Security.CodeAccessPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Assert
  id: Assert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Angir at koden for å få tilgang til ressursen som er beskyttet av en tillatelse behov kode som kaller denne metoden, selv om brukere høyere i stakken ikke har fått tillatelse til å få tilgang til ressursen. Bruk deklarering kan opprette sikkerhetsspørsmål."
  remarks: "Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken. Kaller deklarering hindrer at en stakk gå opprinnelig lavere i kallstakken fortsetter opp kallstakken utover koden som kaller opp denne metoden. Derfor selv om brukere høyere i kallstakken ikke har de nødvendige tillatelsene til å åpne en ressurs, de har fremdeles tilgang til den kode som kaller opp denne metoden for den nødvendige tillatelsen. En deklarasjon virker bare hvis koden som kaller deklarering går gjennom sikkerhetskontrollen for tillatelsen som den er asserting.       Kallet til deklarering virker til kall koden returnerer til oppringeren. Bare én deklarering kan være aktive i en ramme. Et forsøk på å kalle deklarering når det finnes en aktiv deklarering på rammens resulterer i en <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> Kall <xref:System.Security.CodeAccessPermission.RevertAssert%2A>eller <xref:System.Security.CodeAccessPermission.RevertAll%2A>til å fjerne en aktiv deklarering.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Deklarer ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes. Imidlertid Hvis kaller koden lavere i kallstakken <xref:System.Security.CodeAccessPermission.Demand%2A>for denne tillatelsen en <xref:System.Security.SecurityException>forårsakes når stakk gå når kode som prøvde å ringe deklarering.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> Dette skjer fordi koden som kalles deklarering ikke har blitt gitt tillatelse, selv om den prøvde å Deklarer den.      > [!CAUTION] > Fordi kaller deklarering fjerner kravet at all kode i kall-kjede må gis tilgang til den angitte ressursen, som kan åpnes av sikkerhetsproblemer hvis brukt feil eller feil måte. Den bør derfor brukes med fantastiske forsiktig."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Kall koden har ikke <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>.       - eller - det finnes allerede en aktiv deklarering for gjeldende ramme."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Copy
  id: Copy
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når implementeres av en avledet klasse, oppretter og returnerer en identisk kopi av det gjeldende tillatelse-objektet."
  remarks: "En kopi av kubeattributttillatelsesobjekt representerer samme tilgang til ressurser som det opprinnelige tillatelse-objektet."
  example:
  - "The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/csharp/m-system.security.codeac_0_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/cpp/m-system.security.codeac_0_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/visualbasic/m-system.security.codeac_0_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "En kopi av det gjeldende tillatelse-objektet."
  overload: System.Security.CodeAccessPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Demand
  id: Demand
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Tvinger en <xref:System.Security.SecurityException>ved kjøretid hvis alle brukere har høyere i kallstakken ikke har blitt gitt tillatelse angitt av den gjeldende forekomsten.</xref:System.Security.SecurityException>"
  remarks: "Denne metoden brukes vanligvis av sikre libraries slik at brukere får tilgang til en ressurs. For eksempel en klasse med filen i et Klassebibliotek for sikker kaller behov for nødvendige <xref:System.Security.Permissions.FileIOPermission>før du utfører filoperasjonen en som ble forespurt av oppkalleren.</xref:System.Security.Permissions.FileIOPermission>       Tillatelsene for koden som kaller opp denne metoden undersøkes ikke; sjekken begynner fra umiddelbar oppkalleren for denne koden og fortsetter av bunken. Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken. Behov lykkes bare hvis ingen <xref:System.Security.SecurityException>oppstår.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "En oppringer høyere i kallstakken har ikke tillatelsen som er angitt i den gjeldende forekomsten.       - eller - en oppringer høyere i kallet bunke har kalt <xref:System.Security.CodeAccessPermission.Deny*>for gjeldende tillatelse-objektet.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Deny
  id: Deny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hindrer at brukere høyere i kallstakken ved hjelp av koden som kaller opp denne metoden for å få tilgang til ressursen som er angitt i den gjeldende forekomsten."
  remarks: "> [!IMPORTANT]> Deny-metoden må bare brukes til å beskytte ressurser fra utilsiktet tilgang av fullstendig klarert kode. Det må ikke brukes til å beskytte ressurser fra hensikt misbruk av uklarerte kode. For eksempel hvis metoden `A` problemer Deny for en tillatelse, og kaller deretter metoden `B`, metoden `B` overtly kan overstyre du avslå ved å velge en <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> Metoden kall er alltid høyere i bunken. Derfor hvis metoden `B` forsøk å åpne en beskyttet ressurs, sikkerhetssystemet starter Søk etter tillatelser med den fordi metoden `B` er umiddelbar oppkalleren, og hjelper først stakkplass til å bekrefte at det er ingen Deny eller <xref:System.Security.CodeAccessPermission.PermitOnly%2A>lavere i stakken.</xref:System.Security.CodeAccessPermission.PermitOnly%2A> Metoden `B`, som prøver å få tilgang til ressursen kan stoppe stakk gå umiddelbart ved hjelp av den <xref:System.Security.CodeAccessPermission.Assert%2A>metoden.</xref:System.Security.CodeAccessPermission.Assert%2A> I dette tilfellet for Deny er plassert i stakken av metoden `A` (kall metoden) er ikke oppdaget.       Denne metoden hindrer at brukere høyere i kallstakken tilgang til beskyttet ressursen kode som kaller denne metoden, selv om disse brukere har fått tilgang til den. Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken.       Nekt kan begrense ansvaret i programmer eller forhindre utilsiktet sikkerhetsproblemer fordi den hindrer metoden som kaller Deny brukes til å få tilgang til ressursen som er beskyttet av nektet tilgang. Hvis du kaller en metode som skal avslås på en tillatelse, og hvis en <xref:System.Security.CodeAccessPermission.Demand%2A>for denne tillatelsen startes av en oppringer lavere i kallstakken, som sikkerhetskontrollen mislykkes når du avslå.</xref:System.Security.CodeAccessPermission.Demand%2A>       Kallet til Deny virker til kall koden returnerer til oppringeren. Bare én avslås kan være aktive i en ramme. Et forsøk på å kalle Deny når det finnes en aktiv Deny i rammen resulterer i en <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> Kall <xref:System.Security.CodeAccessPermission.RevertDeny%2A>eller <xref:System.Security.CodeAccessPermission.RevertAll%2A>til å fjerne en aktiv Deny.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertDeny%2A> Avslå ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Det finnes allerede en aktiv Deny for gjeldende ramme."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Bestemmer om den angitte <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektet som er lik gjeldende <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>."
  remarks: "Hvis du vil ha mer informasjon, kan du se <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Den <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektet skal sammenlignes med gjeldende <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den angitte <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektet som er lik gjeldende <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.CodeAccessPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når overstyrt i en avledet klasse, Rekonstruerer et sikkerhetsobjekt med en angitt tilstand fra en XML-koding."
  remarks: "Egendefinert kode som utvider sikkerhetsobjekter må implementere den <xref:System.Security.CodeAccessPermission.ToXml%2A>og FromXml metoder for å få objektene sikkerhet kode krav.</xref:System.Security.CodeAccessPermission.ToXml%2A>"
  example:
  - "The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/csharp/m-system.security.codeac_1_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/cpp/m-system.security.codeac_1_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/visualbasic/m-system.security.codeac_1_1.vb)]"
  syntax:
    content: public abstract void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "XML-koding til å bruke Bygg opp sikkerhetsobjektet."
  overload: System.Security.CodeAccessPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> elem </code> parameteren inneholder ikke XML-koding for en forekomst av den samme typen som gjeldende forekomst.       - eller - versjonsnummeret for den <code> elem </code> parameteren støttes ikke."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Henter en hash-kode for den <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektet som passer for bruk i nummer algoritmer og data strukturer som en hash-tabell."
  remarks: "Hash-kode for to forekomster av samme tillatelse kan være forskjellig, en hash-kode må derfor ikke brukes til å sammenligne to <xref:System.Security.CodeAccessPermission>objekter.</xref:System.Security.CodeAccessPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "En hash-kode for gjeldende <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref> objektet."
  overload: System.Security.CodeAccessPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når implementeres av en avledet klasse, oppretter og returnerer en tillatelse som er i skjæringspunktet mellom den gjeldende tillatelsene og angitt."
  remarks: "Skjæringspunktet mellom to tillatelsene er en tillatelse som beskriver operasjoner begge beskriver felles. En forespørsel som sender begge opprinnelige tillatelser vil sende skjæringspunktet."
  example:
  - "The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/csharp/m-system.security.codeac_3_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/cpp/m-system.security.codeac_3_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/visualbasic/m-system.security.codeac_3_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Tillatelse til å intersect med gjeldende tillatelse. Det må være av samme type som gjeldende tillatelse."
    return:
      type: System.Security.IPermission
      description: "En ny tillatelse som representerer skjæringspunktet for den gjeldende tillatelsene og angitt. Denne nye tillatelsen er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Hvis skjæringspunktet er tom."
  overload: System.Security.CodeAccessPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> target </code> -parameteren er ikke <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> og er ikke en forekomst av den samme klassen som gjeldende tillatelse."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når implementeres av en avledet klasse, bestemmer om tillatelsen gjeldende et delsett av den angitte tillatelsen."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the IsSubsetOf method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."
  example:
  - "The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/csharp/m-system.security.codeac_5_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/cpp/m-system.security.codeac_5_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/visualbasic/m-system.security.codeac_5_1.vb)]"
  syntax:
    content: public abstract bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Tillatelse som skal testes for delsett-relasjonen. Denne tillatelsen må være av samme type som gjeldende tillatelse."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den gjeldende tillatelsen er et delsett av den angitte tillatelsen. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.CodeAccessPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> target </code> -parameteren er ikke <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> og er ikke av samme type som gjeldende tillatelse."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.PermitOnly
  id: PermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hindrer at brukere høyere i kallstakken ved hjelp av koden som kaller opp denne metoden for å få tilgang til alle ressurser unntatt ressursen som er angitt av den gjeldende forekomsten."
  remarks: "> [!IMPORTANT]> Metoden PermitOnly må bare brukes til å beskytte ressurser fra utilsiktet tilgang av fullstendig klarert kode. Det må ikke brukes til å beskytte ressurser fra hensikt misbruk av uklarerte kode. For eksempel hvis metoden `A` problemer PermitOnly for en tillatelse, og kaller deretter metoden `B`, metoden `B` overtly kan overstyre PermitOnly ved å velge en <xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A> Metoden kall er alltid høyere i bunken. Derfor hvis metoden `B` forsøk å åpne en beskyttet ressurs, sikkerhetssystemet starter Søk etter tillatelser med den fordi metoden `B` er umiddelbar oppkalleren, og hjelper først stakk til å bekrefte at det er ingen <xref:System.Security.CodeAccessPermission.Deny%2A>eller PermitOnly lavere i stakken.</xref:System.Security.CodeAccessPermission.Deny%2A> Metoden `B`, som prøver å få tilgang til ressursen kan stoppe stakk gå umiddelbart ved hjelp av den <xref:System.Security.CodeAccessPermission.Assert%2A>metoden.</xref:System.Security.CodeAccessPermission.Assert%2A> I dette tilfellet PermitOnly er plassert i stakken av metoden `A` (kall metoden) er ikke oppdaget.       PermitOnly ligner <xref:System.Security.CodeAccessPermission.Deny%2A>, ved at både føre til at stakk hjelper mislykkes når de vil ellers lykkes.</xref:System.Security.CodeAccessPermission.Deny%2A> Forskjellen er at <xref:System.Security.CodeAccessPermission.Deny%2A>angir tillatelser som vil føre til at stakken vise mislykkes, men PermitOnly angir bare tillatelser som gir stakk gå mislykkes.</xref:System.Security.CodeAccessPermission.Deny%2A>       Kalle denne metoden for å sikre at koden kan brukes til å få tilgang til de angitte ressursene. Kallet til PermitOnly virker til kall koden returnerer til oppringeren. Bare én PermitOnly kan være aktive i en ramme. Et forsøk på å kalle PermitOnly når det finnes en aktiv PermitOnly på rammens resulterer i en <xref:System.Security.SecurityException>.</xref:System.Security.SecurityException> Kall <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>eller <xref:System.Security.CodeAccessPermission.RevertAll%2A>til å fjerne en aktiv PermitOnly.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>       PermitOnly ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes. Men hvis kode lavere til samtalen stable senere kall <xref:System.Security.CodeAccessPermission.Demand%2A>for denne tillatelsen en <xref:System.Security.SecurityException>forårsakes når stakk gå når kode som prøvde å ringe PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> Dette er fordi koden som kalles PermitOnly ikke har blitt gitt tillatelse, selv om den kalles PermitOnly for denne tillatelsen. Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.PermitOnly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Det finnes allerede en aktiv PermitOnly for gjeldende ramme."
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAll
  id: RevertAll
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gjør alle tidligere overstyringer for gjeldende bilde som skal fjernes og ikke lenger aktiv."
  remarks: "Hvis det finnes ingen overstyringer (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, eller <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for gjeldende bilde, en <xref:System.ExecutionEngineException>forårsakes.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A> </xref:System.Security.CodeAccessPermission.Deny%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAll ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ikke tidligere <> </> *>, <> </> *>, eller <xref:System.Security.CodeAccessPermission.PermitOnly*>for gjeldende ramme.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAssert
  id: RevertAssert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Normaliseres alle tidligere <xref:System.Security.CodeAccessPermission.Assert*>for gjeldende bilde som skal fjernes og ikke lenger aktiv.</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "Hvis det er ingen <xref:System.Security.CodeAccessPermission.Assert%2A>for gjeldende bilde, en <xref:System.ExecutionEngineException>forårsakes.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ikke tidligere <xref:System.Security.CodeAccessPermission.Assert*>for gjeldende ramme.</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertDeny
  id: RevertDeny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Normaliseres alle tidligere <xref:System.Security.CodeAccessPermission.Deny*>for gjeldende bilde som skal fjernes og ikke lenger aktiv.</xref:System.Security.CodeAccessPermission.Deny*>"
  remarks: "Hvis det er ingen <xref:System.Security.CodeAccessPermission.Deny%2A>for gjeldende bilde, en <xref:System.ExecutionEngineException>forårsakes.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Deny%2A>"
  syntax:
    content: public static void RevertDeny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertDeny*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ikke tidligere <xref:System.Security.CodeAccessPermission.Deny*>for gjeldende ramme.</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  id: RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Normaliseres alle tidligere <xref:System.Security.CodeAccessPermission.PermitOnly*>for gjeldende bilde som skal fjernes og ikke lenger aktiv.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  remarks: "Hvis det er ingen <xref:System.Security.CodeAccessPermission.PermitOnly%2A>for gjeldende bilde, en <xref:System.ExecutionEngineException>forårsakes.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A>"
  syntax:
    content: public static void RevertPermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertPermitOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ikke tidligere <xref:System.Security.CodeAccessPermission.PermitOnly*>for gjeldende ramme.</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToString
  id: ToString
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Oppretter og returnerer en strengrepresentasjon av gjeldende tillatelse-objekt."
  remarks: "Denne metoden er nyttige ved feilsøking av når du skal vise tillatelsen som en streng."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "En strengrepresentasjon av gjeldende tillatelse-objekt."
  overload: System.Security.CodeAccessPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToXml
  id: ToXml
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når overstyrt i en avledet klasse, oppretter du en XML-koding sikkerhet og den gjeldende tilstanden."
  remarks: "Egendefinert kode som utvider sikkerhetsobjekter må implementere ToXml og <xref:System.Security.CodeAccessPermission.FromXml%2A>metoder for å få objektene sikkerhet kode krav.</xref:System.Security.CodeAccessPermission.FromXml%2A>"
  example:
  - "The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/csharp/m-system.security.codeac_4_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/cpp/m-system.security.codeac_4_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/visualbasic/m-system.security.codeac_4_1.vb)]"
  syntax:
    content: public abstract System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "XML-koding av sikkerhetsobjekt, inkludert tilstandsinformasjon."
  overload: System.Security.CodeAccessPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Når overstyrt i en avledet klasse, oppretter du en tillatelse som Unionen av de gjeldende tillatelsene og angitt."
  remarks: "Resultatet av et kall til Union er en tillatelse som representerer alle operasjoner som er representert av både den gjeldende tillatelsene og angitt. En forespørsel som sender enten tillatelse sender sine union."
  example:
  - "The following code example shows an override of the Union method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/csharp/m-system.security.codeac_2_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/cpp/m-system.security.codeac_2_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/visualbasic/m-system.security.codeac_2_1.vb)]"
  syntax:
    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "Tillatelse til å kombineres med gjeldende tillatelse. Det må være av samme type som gjeldende tillatelse."
    return:
      type: System.Security.IPermission
      description: "En ny tillatelse som representerer Unionen av de gjeldende tillatelsene og angitt."
  overload: System.Security.CodeAccessPermission.Union*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. Denne metoden støttes bare på dette nivået når sendt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.CodeAccessPermission.#ctor
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Copy
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.CodeAccessPermission.ToXml
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
- uid: System.Security.CodeAccessPermission.#ctor*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission.CodeAccessPermission
- uid: System.Security.CodeAccessPermission.Assert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert
  nameWithType: CodeAccessPermission.Assert
- uid: System.Security.CodeAccessPermission.Copy*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy
  nameWithType: CodeAccessPermission.Copy
- uid: System.Security.CodeAccessPermission.Demand*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand
  nameWithType: CodeAccessPermission.Demand
- uid: System.Security.CodeAccessPermission.Deny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny
  nameWithType: CodeAccessPermission.Deny
- uid: System.Security.CodeAccessPermission.Equals*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals
  nameWithType: CodeAccessPermission.Equals
- uid: System.Security.CodeAccessPermission.FromXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml
  nameWithType: CodeAccessPermission.FromXml
- uid: System.Security.CodeAccessPermission.GetHashCode*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode
  nameWithType: CodeAccessPermission.GetHashCode
- uid: System.Security.CodeAccessPermission.Intersect*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect
  nameWithType: CodeAccessPermission.Intersect
- uid: System.Security.CodeAccessPermission.IsSubsetOf*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: CodeAccessPermission.IsSubsetOf
- uid: System.Security.CodeAccessPermission.PermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly
  nameWithType: CodeAccessPermission.PermitOnly
- uid: System.Security.CodeAccessPermission.RevertAll*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll
  nameWithType: CodeAccessPermission.RevertAll
- uid: System.Security.CodeAccessPermission.RevertAssert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert
  nameWithType: CodeAccessPermission.RevertAssert
- uid: System.Security.CodeAccessPermission.RevertDeny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny
  nameWithType: CodeAccessPermission.RevertDeny
- uid: System.Security.CodeAccessPermission.RevertPermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly
  nameWithType: CodeAccessPermission.RevertPermitOnly
- uid: System.Security.CodeAccessPermission.ToString*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString
  nameWithType: CodeAccessPermission.ToString
- uid: System.Security.CodeAccessPermission.ToXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml
  nameWithType: CodeAccessPermission.ToXml
- uid: System.Security.CodeAccessPermission.Union*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union
  nameWithType: CodeAccessPermission.Union
