### YamlMime:ManagedReference
items:
- uid: System.Web.UI.DataVisualization.Charting.StripLine
  id: StripLine
  children:
  - System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  - System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  - System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  - System.Web.UI.DataVisualization.Charting.StripLine.Font
  - System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  - System.Web.UI.DataVisualization.Charting.StripLine.Interval
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  - System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  - System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  - System.Web.UI.DataVisualization.Charting.StripLine.Name
  - System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  - System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  - System.Web.UI.DataVisualization.Charting.StripLine.Text
  - System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  - System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  - System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  - System.Web.UI.DataVisualization.Charting.StripLine.Url
  langs:
  - csharp
  name: StripLine
  nameWithType: StripLine
  fullName: System.Web.UI.DataVisualization.Charting.StripLine
  type: Class
  summary: "Representerer stripelinjer i et diagram."
  remarks: "Stripelinjer eller striper, er vannrett eller loddrett områder som skyggelegger bakgrunn for et diagram i jevne eller egendefinerte mellomrom. Du kan bruke stripelinjer til:-forbedre lese for å søke etter enkeltverdier i diagrammet.      -Skill datapunkter under lesing av diagrammet.      -Uthev datoer som forekommer regelmessig, for eksempel finne helgen data mot.      -Fremheve bestemte key dataområdet.      -Legg til en linje terskelen på en konstant verdi.       En enkelt StripLine-objekt kan enten hentes fra én eller flere ganger, for et gitt intervall. Denne handlingen kontrolleres av de <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Når verdien -1 er tilordnet til den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen, én stripe linje skal tegnes.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Når en ikke-nullverdi er tilordnet til den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen stripe-linje skal tegnes gjentatte ganger ved hvert angitte intervall.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> Plasseringen der stripe-linje skal tegnes også er berørt av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A>Egenskaper for stripe linje.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>       Stripelinjer er alltid knyttet til en <xref:System.Web.UI.DataVisualization.Charting.Axis>objektet.</xref:System.Web.UI.DataVisualization.Charting.Axis> De kan legges ved både utformingen og kjøretidspunktet.       Hvis du vil legge til en vannrett eller loddrett linje for å vise en terskel, angitt av <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>til en verdi for 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Dette vil føre til en linje i. Du kan bruke den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>Egenskaper for fargen, bredden og linjestilen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Ingen diagrammet bakgrunnen-egenskaper (`Back*`) brukes når det <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>er satt til 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Bruk av <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A>for stripe-linje skal tilknyttes en stripe-linje.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> Plassering og retningen på denne teksten kan kontrolleres av de <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>       Når flere stripelinjer er definert for den samme aksen, er det mulig at stripelinjer vil overlapper. Z-rekkefølgen StripLine som er avhengig av rekkefølgen for forekomsten i den <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection>objektet.</xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> Dette betyr at den første forekomsten tegnes først. den andre forekomsten tegnes andre, og så videre.       Stripelinjer støttes ikke for følgende diagramtyper: sektor hjuldiagrammer, trakten, pyramide, Kagi, ThreeLineBreak, PointAndFigure, Polært og radardiagram."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ' Adds a week of data with values between 20 and 35.   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ' Adds repeating horizontal strip lines at intervals of 5.   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()  \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ' Adds strip lines to highlight weekend values.   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ' Adds a horizontal threshold strip line at the mean value of the first series.  \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("IntervalOffset")]

      public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritance:
  - System.Object
  - System.Web.UI.DataVisualization.Charting.ChartElement
  implements:
  - System.Web.UI.DataVisualization.Charting.IChartMapArea
  inheritedMembers:
  - System.Web.UI.DataVisualization.Charting.ChartElement.Dispose
  - System.Web.UI.DataVisualization.Charting.ChartElement.Equals(System.Object)
  - System.Web.UI.DataVisualization.Charting.ChartElement.GetHashCode
  - System.Web.UI.DataVisualization.Charting.ChartElement.Tag
  - System.Web.UI.DataVisualization.Charting.ChartElement.ToString
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  id: '#ctor'
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
  type: Constructor
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> klasse."
  syntax:
    content: public StripLine ();
    parameters: []
  overload: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  id: BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir bakgrunnsfargen for stripe linje."
  remarks: "Du kan angi denne egenskapen til en gyldig verdi for ARGB (alfa red, grønn, blå).       Angi bakgrunnsfargen for å angi gradering for stripe linje, og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>       Hvis du setter denne fargen til &quot;gjennomsiktig&quot; – med andre ord, setter du Alfa verdien til 0, ingen farge som skal tilordnes til bakgrunn for elementet. Bakgrunnen vil resultatet være gjennomsiktig.       Hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>er satt til 0,0, en linje skal tegnes og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>bestemme fargen på linje, ikke denne egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.Color BackColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> struktur. Standardfargen er <xref:System.Drawing.Color.White*>.</xref:System.Drawing.Color.White*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  id: BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir gradering stilen for stripe linje."
  remarks: "Egenskapen BackGradientStyle bestemmer om et diagramelement vises gradering, i tillegg til retningen på graderingen, hvis brukt.       Bruke gradering farger:-Bruk av <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>til å angi farge for primær.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      -Bruk av <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>til å angi den sekundære fargen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>      -Angi denne BackGradientStyle-egenskapen for diagramelementet ønsket gradering stil.       Denne egenskapen er ikke tilgjengelig hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen settes til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.GradientStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref> opplisting. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.GradientStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  id: BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir stilen skravering for stripe linje."
  remarks: "Skravering mønsteret består av en fylt bakgrunnsfarge og linjer tegnes over bakgrunnen. To fargene som brukes i skraveringsstilen er angitt av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> Denne egenskapen er ikke tilgjengelig hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen settes til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref> opplisting. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartHatchStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  id: BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir bakgrunnsbildet for stripe linje."
  remarks: "Egenskapen BackImage definerer en bane til et bakgrunnsbilde for mange diagramelementer, og er en absolutt eller relativ URL-adresse.       For å plassere dette bildet, kan du bruke den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>Egenskaper.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>       Du kan også angi at én farge som skal vises som bildet som &quot;gjennomsiktig&quot; ved å angi den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>       Et bilde kan være en gyldig grafikkfil som støttes av .NET Framework, inkludert ikonene.       Denne egenskapen er ikke tilgjengelig hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen settes til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>       Bakgrunn overstyrer andre bakgrunnsegenskaper, for eksempel gradering farger."
  syntax:
    content: public string BackImage { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som representerer en URL-adresse for bilde filen. Standarden er en tom streng."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  id: BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir justeringen for bakgrunnsbilde for."
  remarks: "Bestemmer denne egenskapen justering for bakgrunnsbilde for stripelinjer; Det er bare brukt når <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>egenskapen settes til <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>       Du finner mer informasjon om tilgjengelige justeringer i <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>opplisting emnet.</xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref> listeverdi. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  id: BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir fargen på et bakgrunnsbilde for stripe linje som implementeres som gjennomsiktig."
  remarks: "Denne egenskapen er ikke tilgjengelig hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen settes til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackImageTransparentColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> verdi som skal vises som gjennomsiktig."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  id: BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir tegnemodus for bakgrunnsbilde for stripe linje."
  remarks: "Denne egenskapen bestemmer hvordan bildet vises. Det vil si side ved side, skalert og så videre.       Hvis et bilde skaleres, skal den strekkes for å passe i avgrensende stripe linje. Hvis bildet side ved side, tegnes den gjentatte ganger fra øvre venstre hjørnet.       Hvis du vil ha mer informasjon om de tilgjengelige wrapping modiene, se den <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>opplisting emnet.</xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Hvis egenskapen BackImageWrapMode er satt til <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>, plasseringen der bildet tegnes bestemmes av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>egenskapsinnstillingen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> </xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>       Denne egenskapen er ikke tilgjengelig hvis <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>er satt til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref> opplisting. Standard <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartImageWrapMode&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  id: BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir den sekundære fargen for stripe linje bakgrunnen."
  remarks: "Denne egenskapen bestemmer sekundære bakgrunnsfargen for mange objekter i diagrammet, og brukes når gradering farger brukes.       Du kan angi sekundær bakgrunnsfarge til en gyldig verdi for ARGB (alfa red, grønn, blå).       Hvis skravering brukes, angir egenskapen BackSecondaryColor fargen på linjene skravering.       Bruke gradering farger for bakgrunn for et diagramelement:-Bruk av <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>til å angi farge for primær.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>      – Bruk denne BackSecondaryColor-egenskapen til å angi den sekundære fargen.      -Angi den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>egenskapen ønsket gradering stilen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>       Denne egenskapen er ikke tilgjengelig hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen settes til en verdi av 0,0.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BackSecondaryColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> verdi angitt for den sekundære fargen for Bakgrunn skravering eller gradering fyll. Standardfargen er <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  id: BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir kantlinjefargen for stripe-linje."
  remarks: "Du kan angi denne egenskapen til en gyldig verdi for ARGB (alfa red, grønn, blå).       Hvis den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>for en <xref:System.Web.UI.DataVisualization.Charting.StripLine>objektet er satt til 0,0, en linje skal tegnes, og det er denne egenskapen og ikke av <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>egenskapsinnstillingen som bestemmer fargen på linjen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>"
  syntax:
    content: public System.Drawing.Color BorderColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;></xref> value. Standardfargen er <xref href=&quot;System.Drawing.Color&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  id: BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller Angir kantlinjestilen for stripe linje."
  remarks: "Egenskapen angir linjestilen som brukes for en kantlinje. Linjen kan være fylt, prikket eller en variasjon av fylt og prikkete."
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.ChartDashStyle
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.ChartDashStyle&quot;> </xref> opplistingsverdi som angir kantlinjestilen for stripe linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  id: BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir kantlinjetykkelsen for stripe linje."
  remarks: "Denne egenskapen måles i piksler."
  syntax:
    content: public int BorderWidth { get; set; }
    return:
      type: System.Int32
      description: "En <xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;> </xref> verdi som bestemmer bredden på kantlinjen for stripe-linje, i piksler."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> og eventuelt frigir administrerte ressurser."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  id: Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir skriften som brukes for stripe linje teksten."
  syntax:
    content: public System.Drawing.Font Font { get; set; }
    return:
      type: System.Drawing.Font
      description: "En <xref href=&quot;System.Drawing.Font&quot;> </xref> verdi som angir skriften for stripe linje tekst."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  id: ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir fargen på stripe linje tekst."
  remarks: "Du kan angi en gyldig ARGB farge for denne egenskapen. Denne egenskapen gjelder bare når en tekstverdi som er angitt for stripe linje."
  syntax:
    content: public System.Drawing.Color ForeColor { get; set; }
    return:
      type: System.Drawing.Color
      description: "En <xref href=&quot;System.Drawing.Color&quot;> </xref> verdi som Representer tekstfargen for stripe-linje. Standardverdien er <xref:System.Drawing.Color.Black*>.</xref:System.Drawing.Color.Black*>"
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  id: Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir intervallet for stripe-linje, og angir Hvis stripe linje tegnes én eller flere ganger."
  remarks: "Når du har angitt egenskapen intervall verdien null (0,0), én stripe linje vises, med en bredde som er angitt av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Når du setter intervallet til en verdi forskjellig fra null, vises flere stripelinjer. Enhet som brukes for egenskapen intervall er definert av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> verdi som representerer intervallet mellom stripelinjer. Standardverdien er 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  id: IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir forskyvningen for rutenett aksemerkene, stripelinjer og akseetiketter."
  remarks: "Intervallforskyvning for aksemerker på delskala og rutenett aldri er berørt av verdien for den <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>-egenskapen til det <xref:System.Web.UI.DataVisualization.Charting.Axis>objektet.</xref:System.Web.UI.DataVisualization.Charting.Axis> </xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>       IntervalOffset egenskapsinnstillingen definerer målenheten for forskyvningen.       Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>kan være en negativ verdi.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>       Standardverdien er `Auto` (`0`)."
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public double IntervalOffset { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> verdi som representerer intervallforskyvning."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  id: IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir forskyvningen intervalltypen for stripe linje."
  remarks: "Denne egenskapen settes som standard til <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>; den faktiske verdien for egenskapen fastsettes av den <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> nummereringsverdi som angir intervalltypen. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  id: IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir intervalltypen for en <xref href=&quot;System.Web.UI.DataVisualization.Charting.StripLine&quot;> </xref> objektet."
  remarks: "Intervallet typer kan settes til <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>, da avhenger av: typene X-verdi eller Y-verdien for den tegnede <xref:System.Web.UI.DataVisualization.Charting.DataPoint>objekter, avhengig av hvilken akse den <xref:System.Web.UI.DataVisualization.Charting.StripLine>objekter som hører til, og akseskala.</xref:System.Web.UI.DataVisualization.Charting.StripLine> </xref:System.Web.UI.DataVisualization.Charting.DataPoint> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>egenskapen bestemmer hvor ofte stripe eller linje skal tegnes.</xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>"
  example:
  - "The following code example demonstrates three applications of strip lines. First, horizontal strip lines are added at recurring intervals. Second, vertical strip lines are added to highlight weekend data points. Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds repeating horizontal strip lines.   \n        AddHorizRepeatingStripLines()   \n  \n        ' Highlights weekend points using strip lines.   \n        HighlightWeekendsWithStripLines()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds repeating horizontal strip lines at intervals of 5.   \n    ''' </summary>   \n    Private Sub AddHorizRepeatingStripLines()   \n        ' Instantiate new strip line   \n        Dim stripLine1 As New StripLine()   \n        stripLine1.StripWidth = 2.5   \n        stripLine1.Interval = 5   \n  \n        ' Consider adding transparency so that the strip lines are lighter   \n        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   \n  \n        ' Add the strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds strip lines to highlight weekend values.   \n    ''' </summary>   \n    Private Sub HighlightWeekendsWithStripLines()   \n        ' Set strip line to highlight weekends   \n        Dim stripLine2 As New StripLine()   \n        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   \n        stripLine2.IntervalOffset = -1.5   \n        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   \n        stripLine2.Interval = 1   \n        stripLine2.IntervalType = DateTimeIntervalType.Weeks   \n        stripLine2.StripWidth = 2   \n        stripLine2.StripWidthType = DateTimeIntervalType.Days   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   \n  \n        ' Set the axis label to show the name of the day   \n        ' This is done in order to demonstrate that weekends are highlighted   \n        chart1.ChartAreas(0).AxisX.LabelStyle.Format = \"ddd\"   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds repeating horizontal strip lines.  \n            AddHorizRepeatingStripLines();  \n  \n            // Highlights weekend points using strip lines.  \n            HighlightWeekendsWithStripLines();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds repeating horizontal strip lines at intervals of 5.  \n        /// </summary>  \n        private void AddHorizRepeatingStripLines()  \n        {  \n            // Instantiate new strip line  \n            StripLine stripLine1 = new StripLine();  \n            stripLine1.StripWidth = 0;  \n            stripLine1.BorderColor = Color.Black;  \n            stripLine1.BorderWidth = 3;  \n            stripLine1.Interval = 5;  \n  \n            // Consider adding transparency so that the strip lines are lighter  \n            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  \n  \n            stripLine1.BackSecondaryColor = Color.Black;  \n            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  \n  \n            // Add the strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  \n        }  \n  \n        /// <summary>  \n        /// Adds strip lines to highlight weekend values.  \n        /// </summary>  \n        private void HighlightWeekendsWithStripLines()  \n        {  \n            // Set strip line to highlight weekends  \n            StripLine stripLine2 = new StripLine();  \n            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              \n            stripLine2.IntervalOffset = -1.5;  \n            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  \n            stripLine2.Interval = 1;  \n            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  \n            stripLine2.StripWidth = 2;  \n            stripLine2.StripWidthType = DateTimeIntervalType.Days;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  \n  \n            // Set the axis label to show the name of the day  \n            // This is done in order to demonstrate that weekends are highlighted  \n            chart1.ChartAreas[0].AxisX.LabelStyle.Format = \"ddd\";  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> nummereringsverdi som angir intervalltypen. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  id: MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir den kartområdeattributter for stripe linje."
  syntax:
    content: public string MapAreaAttributes { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som representerer attributtene for diagramelementet tilhørende kartområde."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  id: Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter navnet på stripe linje."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som representerer navnet på stripe linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  id: PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir sende tilbake verdien som kan behandles i en <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> hendelsen."
  syntax:
    content: public string PostBackValue { get; set; }
    return:
      type: System.String
      description: "En strengverdi som representerer den sende tilbake verdien som er sendt til en <xref href=&quot;System.Web.UI.DataVisualization.Charting.Chart.Click&quot;> </xref> hendelsen."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  id: StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir bredden på en stripe-linje."
  remarks: "Hvis du vil oppstå et unntak for denne egenskapen kan ikke angis til en verdi som er mindre enn 0,0.       Innstillingen 0,0 vil føre til en linje som; Denne linjen vil bruke den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>egenskapsinnstillingene for farge, bredde og stil.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> Ingen av de `Back*` egenskapene i denne klassen brukes når verdien for StripWidth 0,0.       Hvis du har angitt egenskapen StripWidth til en verdi større enn 0,0, opprettes en stripe. Den <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>og <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>Egenskaper gjelder bare for kantlinjen for stripe; alle de `Back*` egenskaper deretter brukes til egenskapene bakgrunn for stripen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> </xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>       Hvis verdien for egenskapen StripWidth er større enn 0,0, bestemmes enhetene av skalaen som er relevante for aksen."
  syntax:
    content: public double StripWidth { get; set; }
    return:
      type: System.Double
      description: "En <xref uid=&quot;langword_csharp_double&quot; name=&quot;double&quot; href=&quot;&quot;> </xref> verdi som angir om det tegnes en stripe eller linje. Standardverdien er 0,0."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  id: StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir målenheten for den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*>"
  remarks: "Angir enhetene som brukes for denne egenskapen i <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>egenskapen.</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> Hvis du vil angi en stripe linje som representerer &quot;én uke&quot;, kan du for eksempel angi denne egenskapen til <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>og angi den <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>til en (1.0).</xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>       Du kan endre verdien for egenskapen fra <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>til en <xref:System.DateTime>verdi når relevante aksen skalaen bruker en <xref:System.DateTime>verdi.</xref:System.DateTime> </xref:System.DateTime> </xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType>"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
      description: "En <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref> opplistingsverdi som angir hvilken bredde. Standardverdien er <xref href=&quot;System.Web.UI.DataVisualization.Charting.DateTimeIntervalType&quot;> </xref>."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  id: Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir teksten for stripe linje."
  remarks: "Bruk denne egenskapen til å legge til tekst i en stripe-linje."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som representerer teksten for stripe-linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  id: TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir tekstjusteringen for stripe linje."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "En <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> verdi som representerer justeringen stripe linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  id: TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir teksten linje tekstjusteringen stripe linje."
  remarks: ''
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Drawing.StringAlignment TextLineAlignment { get; set; }
    return:
      type: System.Drawing.StringAlignment
      description: "En <xref href=&quot;System.Drawing.StringAlignment&quot;> </xref> verdi som Representer justering av tekstlinjen."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  id: TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir retningen for teksten."
  remarks: "Når denne egenskapen er satt til en verdi av <xref:System.Web.UI.DataVisualization.Charting.TextOrientation>, teksten er innrettet basert på diagramtypen.</xref:System.Web.UI.DataVisualization.Charting.TextOrientation> Teksten er innrettet vannrett fra venstre mot høyre nederst på stripe linje for alle X-Y diagramtyper andre enn Coolbar x-aksen stripe linje. X-aksen stripe linje teksten er for liggende, objektorientert fra topp til bunn til høyre for stripe linje."
  example:
  - "The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface. The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.  \n  \n```vb#  \nImports System.Web.UI.DataVisualization.Charting  \n  \nPublic Partial Class StripLines   \n    Inherits System.Web.UI.Page   \n    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  \n        ' Add chart data before adding strip lines.   \n        AddChartData()   \n  \n        ' Adds a threshold line using strip lines.   \n        AddThresholdStripLine()   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a week of data with values between 20 and 35.   \n    ''' </summary>   \n    Private Sub AddChartData()   \n        ' Declare new random variable   \n        Dim rand As New Random()   \n        For i As Integer = 0 To 6   \n  \n            ' Add a week of data   \n            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](~/add/includes/ajax-current-ext-md.md 35))   \n        Next   \n    End Sub   \n  \n    ''' <summary>   \n    ''' Adds a horizontal threshold strip line at the calculated mean   \n    ''' value of all data points in the first series of the chart.   \n    ''' </summary>   \n    Private Sub AddThresholdStripLine()   \n        Dim stripLine3 As New StripLine()   \n  \n        ' Set threshold line so that it is only shown once   \n        stripLine3.Interval = 0   \n  \n        ' Set the threshold line to be drawn at the calculated mean of the first series   \n        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   \n  \n        stripLine3.BackColor = Color.DarkGreen   \n        stripLine3.StripWidth = 0.25   \n  \n        ' Set text properties for the threshold line   \n        stripLine3.Text = \"Mean\"   \n        stripLine3.ForeColor = Color.Black   \n        stripLine3.TextAlignment = StringAlignment.Near   \n        stripLine3.TextLineAlignment = StringAlignment.Near   \n        stripLine3.TextOrientation = TextOrientation.Auto   \n  \n        ' Add strip line to the chart   \n        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   \n    End Sub   \nEnd Class  \n```  \n  \n```c#  \npublic partial class StripLines : System.Web.UI.Page   \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {              \n            // Add chart data  \n            AddChartData();  \n  \n            // Adds a threshold line using strip lines.  \n            AddThresholdStripLine();  \n        }  \n  \n        /// <summary>  \n        /// Adds a week of data with values between 20 and 35.  \n        /// </summary>  \n        private void AddChartData()  \n        {  \n            // Declare new random variable  \n            Random rand = new Random();  \n  \n            // Add a week of data  \n            for (int i = 0; i < 7; i++)   \n            {  \n                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  \n            }  \n        }  \n  \n        /// <summary>  \n        /// Adds a horizontal threshold strip line at the calculated mean   \n        /// value of all data points in the first series of the chart.  \n        /// </summary>  \n        private void AddThresholdStripLine()  \n        {  \n            StripLine stripLine3 = new StripLine();  \n  \n            // Set threshold line so that it is only shown once  \n            stripLine3.Interval = 0;  \n  \n            // Set the threshold line to be drawn at the calculated mean of the first series  \n            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  \n  \n            stripLine3.BackColor = Color.DarkGreen;  \n            stripLine3.StripWidth = 0.25;  \n  \n            // Set text properties for the threshold line  \n            stripLine3.Text = \"Mean\";  \n            stripLine3.ForeColor = Color.Black;  \n            stripLine3.TextAlignment = StringAlignment.Near;  \n            stripLine3.TextLineAlignment = StringAlignment.Near;  \n            stripLine3.TextOrientation = TextOrientation.Auto;  \n  \n            // Add strip line to the chart  \n            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  \n        }  \n    }  \n```"
  syntax:
    content: public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }
    return:
      type: System.Web.UI.DataVisualization.Charting.TextOrientation
      description: "TextOrientation-verdi som Representer justering av tekstretning."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  id: ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir verktøytips for stripe-linje."
  remarks: "Hvis du setter denne egenskapen, et bildekart på klientsiden opprettes automatisk og et kartområde opprettes med attributtet tittel til angitte verktøytips strengen. Kartområdet bruker dimensjonene som tilsvarer stripe linje.       Angi denne egenskapen har ingen virkning hvis det <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A>er satt til `false`.</xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> Standardverdien er true."
  syntax:
    content: public string ToolTip { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som angir verktøytips for stripe linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  id: Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  langs:
  - csharp
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
  type: Property
  assemblies:
  - System.Web.DataVisualization
  namespace: System.Web.UI.DataVisualization.Charting
  summary: "Henter eller angir målet URL-adresse eller ankeret punktet for stripe linje."
  remarks: "Hvis du vil bruke en absolutt URL-adresse, kan du starte strengeuttrykk med &quot;http://&quot; eller &quot;www.&quot;. Hvis strengen ikke starter med ett av disse prefiksene, behandles som en relativ URL."
  syntax:
    content: public string Url { get; set; }
    return:
      type: System.String
      description: "En <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> verdi som representerer målet URL-adresse eller ankeret punktet for stripe linje."
  overload: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataVisualization.Charting.ChartElement
  isExternal: false
  name: System.Web.UI.DataVisualization.Charting.ChartElement
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine()
  nameWithType: StripLine.StripLine()
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripLine()
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackColor
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.GradientStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: GradientStyle
  nameWithType: GradientStyle
  fullName: System.Web.UI.DataVisualization.Charting.GradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartHatchStyle
  nameWithType: ChartHatchStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImage
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageAlignmentStyle
  nameWithType: ChartImageAlignmentStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartImageWrapMode
  nameWithType: ChartImageWrapMode
  fullName: System.Web.UI.DataVisualization.Charting.ChartImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.ChartDashStyle
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: ChartDashStyle
  nameWithType: ChartDashStyle
  fullName: System.Web.UI.DataVisualization.Charting.ChartDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StripLine.Dispose(Boolean)
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Font
- uid: System.Drawing.Font
  parent: System.Drawing
  isExternal: false
  name: Font
  nameWithType: Font
  fullName: System.Drawing.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Interval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: DateTimeIntervalType
  nameWithType: DateTimeIntervalType
  fullName: System.Web.UI.DataVisualization.Charting.DateTimeIntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment
- uid: System.Drawing.StringAlignment
  parent: System.Drawing
  isExternal: false
  name: StringAlignment
  nameWithType: StringAlignment
  fullName: System.Drawing.StringAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.TextOrientation
  parent: System.Web.UI.DataVisualization.Charting
  isExternal: false
  name: TextOrientation
  nameWithType: TextOrientation
  fullName: System.Web.UI.DataVisualization.Charting.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
  fullName: System.Web.UI.DataVisualization.Charting.StripLine.Url
- uid: System.Web.UI.DataVisualization.Charting.StripLine.#ctor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripLine
  nameWithType: StripLine.StripLine
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackColor
  nameWithType: StripLine.BackColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackGradientStyle
  nameWithType: StripLine.BackGradientStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackHatchStyle
  nameWithType: StripLine.BackHatchStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImage*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImage
  nameWithType: StripLine.BackImage
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageAlignment
  nameWithType: StripLine.BackImageAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageTransparentColor
  nameWithType: StripLine.BackImageTransparentColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackImageWrapMode
  nameWithType: StripLine.BackImageWrapMode
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BackSecondaryColor
  nameWithType: StripLine.BackSecondaryColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderColor
  nameWithType: StripLine.BorderColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderDashStyle
  nameWithType: StripLine.BorderDashStyle
- uid: System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: BorderWidth
  nameWithType: StripLine.BorderWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Dispose*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Dispose
  nameWithType: StripLine.Dispose
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Font*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Font
  nameWithType: StripLine.Font
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ForeColor*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ForeColor
  nameWithType: StripLine.ForeColor
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Interval*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Interval
  nameWithType: StripLine.Interval
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffset
  nameWithType: StripLine.IntervalOffset
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalOffsetType
  nameWithType: StripLine.IntervalOffsetType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.IntervalType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: IntervalType
  nameWithType: StripLine.IntervalType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: MapAreaAttributes
  nameWithType: StripLine.MapAreaAttributes
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Name*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Name
  nameWithType: StripLine.Name
- uid: System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: PostBackValue
  nameWithType: StripLine.PostBackValue
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidth*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidth
  nameWithType: StripLine.StripWidth
- uid: System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: StripWidthType
  nameWithType: StripLine.StripWidthType
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Text*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Text
  nameWithType: StripLine.Text
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextAlignment
  nameWithType: StripLine.TextAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextLineAlignment
  nameWithType: StripLine.TextLineAlignment
- uid: System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: TextOrientation
  nameWithType: StripLine.TextOrientation
- uid: System.Web.UI.DataVisualization.Charting.StripLine.ToolTip*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: ToolTip
  nameWithType: StripLine.ToolTip
- uid: System.Web.UI.DataVisualization.Charting.StripLine.Url*
  parent: System.Web.UI.DataVisualization.Charting.StripLine
  isExternal: false
  name: Url
  nameWithType: StripLine.Url
