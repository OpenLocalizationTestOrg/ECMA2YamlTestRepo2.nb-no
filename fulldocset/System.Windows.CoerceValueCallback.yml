### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "Inneholder en mal for en metode som kalles når en avhengighet egenskapsverdi på nytt evalueres eller rangeringen spesifikt er angitt."
  remarks: "Tilbakeringinger basert på CoerceValueCallback kan tilordnes til en avhengighet via flere forskjellige teknikker. Hvert enkelt av disse metodene krever at du først oppretter et nytt egenskapen metadataobjekt (<xref:System.Windows.PropertyMetadata>, eller en avledet som <xref:System.Windows.FrameworkPropertyMetadata>).</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> Opprett Metadataobjektet ved hjelp av en konstruktørsignatur som bruker den `coerceValueCallback` parameter, og tilordne den parameteren tilbakeringing-behandlingsprogram. Eller konstruere metadataene av noen signatur og angitt av <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>egenskapen før angivelse metadataene i bruk.</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Når du har disse metadataene, kan du:-definere en ny avhengighetsegenskapen på en ny klasse, ved hjelp av enten signaturen til <xref:System.Windows.DependencyProperty.Register%2A>, gir metadataene som den `typeMetadata` verdi.</xref:System.Windows.DependencyProperty.Register%2A>      -Overstyre metadataene (kall <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for en eksisterende avhengighetsegenskapen, når du avledet fra klassen som eier avhengighetsegenskapen.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -Legg til en eksisterende avhengighetsegenskapen for en ny <xref:System.Windows.DependencyObject>klasse, ved hjelp av nye metadata, ved å kalle <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       Implementeringer av denne tilbakeringing skal se verdien `baseValue` og fastslå basert på verdien eller typen om dette er en verdi som skal konverteres videre.       Den <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>for en avhengighet startes property når som helst som egenskapen systemet eller andre oppkaller kaller <xref:System.Windows.DependencyObject.CoerceValue%2A>på en <xref:System.Windows.DependencyObject>forekomsten ved å angi denne egenskapen identifikator som den `dp`.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Endringer i egenskapsverdi kan ha blitt levert fra alle mulige deltakeren i egenskapen-systemet. Dette omfatter stiler generisk invalidation, utløsere, egenskapen verdien arv og lokal innstillingen.       Du bør vanligvis ikke angi mer enn ett <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>for en gitt avhengighetsegenskapen (overstyrer eller legge til nye metadata for en avhengighetsegenskapen som allerede er en <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Bare ett av tilbakeringinger vil kunne brukes. Fungerer tilbakekallingen blir den som ble brukt på den mest utledede klassen i arv enn den <xref:System.Windows.DependencyObject>oppkalleren.</xref:System.Windows.DependencyObject> Andre tilbakeringinger som tilordnes til metadata for avhengighetsegenskapen som det fantes høyere i hierarkiet eieren erstattes når metadataene overstyres."
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
