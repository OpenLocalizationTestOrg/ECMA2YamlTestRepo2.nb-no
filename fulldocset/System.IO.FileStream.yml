### YamlMime:ManagedReference
items:
- uid: System.IO.FileStream
  id: FileStream
  children:
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  - System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.FileStream.CanRead
  - System.IO.FileStream.CanSeek
  - System.IO.FileStream.CanWrite
  - System.IO.FileStream.Dispose(System.Boolean)
  - System.IO.FileStream.EndRead(System.IAsyncResult)
  - System.IO.FileStream.EndWrite(System.IAsyncResult)
  - System.IO.FileStream.Finalize
  - System.IO.FileStream.Flush
  - System.IO.FileStream.Flush(System.Boolean)
  - System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.FileStream.GetAccessControl
  - System.IO.FileStream.Handle
  - System.IO.FileStream.IsAsync
  - System.IO.FileStream.Length
  - System.IO.FileStream.Lock(System.Int64,System.Int64)
  - System.IO.FileStream.Name
  - System.IO.FileStream.Position
  - System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.ReadByte
  - System.IO.FileStream.SafeFileHandle
  - System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)
  - System.IO.FileStream.SetLength(System.Int64)
  - System.IO.FileStream.Unlock(System.Int64,System.Int64)
  - System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.FileStream.WriteByte(System.Byte)
  langs:
  - csharp
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
  type: Class
  summary: "Gir et <xref:System.IO.Stream>for en fil som støtter både synkrone og asynkrone lese og skrive operasjoner.</xref:System.IO.Stream>       For å bla gjennom .NET Framework-kildekode for denne typen, kan du se den [Referansekilde](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the FileStream class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the [Read(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=True), [Write(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=True), <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. FileStream buffers input and output for better performance.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the FileStream class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.  \n  \n The <xref:System.IO.FileStream.Seek%2A> method supports random access to files. <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.  \n  \n> [!NOTE]\n>  Disk files always support random access. At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`. Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.  \n  \n If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.  \n  \n For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes. The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of FileStream objects based on file paths. The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the FileStream class.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).  \n  \n## Detection of Stream Position Changes  \n When a FileStream object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle. In this case, the cached position in the FileStream object and the cached data in the buffer could be compromised. The FileStream object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the FileStream object.  \n  \n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again. This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.  \n  \n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.  \n  \n A FileStream object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the FileStream object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor."
  example:
  - "The following example demonstrates some of the FileStream constructors.  \n  \n [!code-cs[fstream class#1](~/add/codesnippet/csharp/t-system.io.filestream_1.cs)]\n [!code-vb[fstream class#1](~/add/codesnippet/visualbasic/t-system.io.filestream_1.vb)]\n [!code-cpp[fstream class#1](~/add/codesnippet/cpp/t-system.io.filestream_1.cpp)]  \n  \n The following example shows how to write to a file asynchronously. This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click. The file path needs to be changed to a file than exits on the computer.  \n  \n [!code-vb[Asynchronous_File_IO_async#3](~/add/codesnippet/visualbasic/t-system.io.filestream_2.vb)]\n [!code-cs[Asynchronous_File_IO_async#3](~/add/codesnippet/csharp/t-system.io.filestream_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class FileStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(SafeFileHandle,FileAccess)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen, med den angitte lese-/ skrivetilgang."
  remarks: "Når <xref:System.IO.Stream.Close%2A>er kalt, håndtaket også lukkes og filens referansen antall reduseres.</xref:System.IO.Stream.Close%2A>       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "En filreferanse for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>er ikke et felt i <xref href=&quot;System.IO.FileAccess&quot;> </xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)
  id: '#ctor(System.IntPtr,System.IO.FileAccess)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(IntPtr,FileAccess)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen, med den angitte lese-/ skrivetilgang."
  remarks: "Når <xref:System.IO.Stream.Close%2A>er kalt, håndtaket også lukkes og filens referansen antall reduseres.</xref:System.IO.Stream.Close%2A>       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (IntPtr handle, System.IO.FileAccess access);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "En filreferanse for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>er ikke et felt i <xref href=&quot;System.IO.FileAccess&quot;> </xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  id: '#ctor(System.String,System.IO.FileMode)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode)
  nameWithType: FileStream.FileStream(String,FileMode)
  fullName: System.IO.FileStream.FileStream(String,FileMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse angitt bane og oppretting av modus."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).  \n  \n You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`.  \n  \n The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode>, <xref:System.IO.FileAccess> is the default access. Otherwise, the access is set to <xref:System.IO.FileAccess>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \n  \n [!code-vb[System.IO.FileStream1#1](~/add/codesnippet/visualbasic/m-system.io.filestream.s_0_1.vb)]\n [!code-cs[System.IO.FileStream1#1](~/add/codesnippet/csharp/m-system.io.filestream.s_0_1.cs)]\n [!code-cpp[System.IO.FileStream1#1](~/add/codesnippet/cpp/m-system.io.filestream.s_0_1.cpp)]"
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - dataflyten er lukket."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>inneholder en ugyldig verdi."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(SafeFileHandle,FileAccess,Int32)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess,Int32)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen med tillatelsen angitte skrivetilgang og bufferstørrelse."
  remarks: "`FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A> Alternativt lese og skrive referansen før du kaller opp denne `FileStream` konstruktør.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize);
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "En filreferanse for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En <xref href=&quot;System.IO.FileAccess&quot;> </xref> konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> handle </code> parameteren er en ugyldig referanse.       - eller - <code> handle </code> parameter er et synkron håndtak og det ble brukt asynkront."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den <code> bufferSize </code> parameteren er negativ."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)
  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(IntPtr,FileAccess,Boolean)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen, med den angitte lese-/ skrivetilgang og <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten eierskap."
  remarks: "Den `FileStream` objektet er gitt angitte tilgang til filen. Eier av håndtaket blir som angitt. Hvis denne prosessen eier håndtaket et kall til den <xref:System.IO.Stream.Close%2A>metoden lukkes også håndtaket og filens referansen antall reduseres.</xref:System.IO.Stream.Close%2A> Den `FileStream` objekt er angitt standardstørrelsen på bufferen på 4096 byte.       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kalle metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A>       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "En filreferanse for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis filreferansen vil være eid av dette <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>er ikke et felt i <xref href=&quot;System.IO.FileAccess&quot;> </xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileAccess)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse med den angitte banen, opprettingsmodus, og lese-og skrivetilgang."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som bestemmer hvordan filen kan få tilgang til den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. Dette avgjør også verdiene som returneres av den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. <xref:System.IO.FileStream.CanSeek*>er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis `path` angir en diskfil.</xref:System.IO.FileStream.CanSeek*>"
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>inneholder en ugyldig verdi."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen, med den angitte lese-/ skrivetilgang bufferstørrelsen og synkron eller asynkron tilstand."
  remarks: "Du har angitt den `isAsync` parameter `true` å åpne filreferansen asynkront. Når parameteren er `true`, dataflyten benytter overlappende i/u for å utføre filoperasjoner asynkront. Parameteren ikke har imidlertid være `true` å kalle den <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, eller <xref:System.IO.Stream.CopyToAsync%2A>metode.</xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A> Når den `isAsync` parameteren er `false` du kalle asynkron lesing og skriveoperasjoner, UI-tråden fremdeles ikke er blokkert, men den faktiske i/u-operasjonen utføres synkront.       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A> Alternativt lese og skrive referansen før du kaller opp denne `FileStream` konstruktør.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "En fil håndtere for filen som denne <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
    - id: isAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis referansen ble åpnet asynkront (det vil si i overlapper i/u-modus); Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> handle </code> parameteren er en ugyldig referanse.       - eller - <code> handle </code> parameter er et synkron håndtak og det ble brukt asynkront."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den <code> bufferSize </code> parameteren er negativ."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)
  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(IntPtr,FileAccess,Boolean,Int32)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen med tillatelsen angitte skrivetilgang <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten eierskap og bufferstørrelse."
  remarks: "Den `FileStream` objektet er gitt angitte tilgang til filen. Eier av håndtaket blir som angitt. Hvis `FileStream` eier håndtaket et kall til den <xref:System.IO.Stream.Close%2A>metoden lukkes også håndtaket.</xref:System.IO.Stream.Close%2A> Spesielt reduseres filens referansen count. Den `FileStream` objekt er angitt i den angitte bufferstørrelsen.       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A> Alternativt lese og skrive referansen før du kaller opp denne `FileStream` konstruktør.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "En fil håndtere for filen som denne <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis filreferansen vil være eid av dette <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativt."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileAccess,FileShare)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klassen med den angitte banen opprettingsmodus, lese-/ skrivetilgang og deling tillatelse."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \n  \n [!code-cs[System.IO.FileStream3#2](~/add/codesnippet/csharp/904a8302-b9b6-44f1-89c4-_1.cs)]\n [!code-cpp[System.IO.FileStream3#2](~/add/codesnippet/cpp/904a8302-b9b6-44f1-89c4-_1.cpp)]\n [!code-vb[System.IO.FileStream3#2](~/add/codesnippet/visualbasic/904a8302-b9b6-44f1-89c4-_1.vb)]"
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som bestemmer hvordan filen kan få tilgang til den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. Dette avgjør også verdiene som returneres av den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. <xref:System.IO.FileStream.CanSeek*>er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis `path` angir en diskfil.</xref:System.IO.FileStream.CanSeek*>"
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - systemet kjører Windows 98 eller Windows 98 Second Edition og <code> share </code> er satt til <xref uid=&quot;langword_csharp_FileShare.Delete&quot; name=&quot;FileShare.Delete&quot; href=&quot;&quot;> </xref>.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>mode</code>inneholder en ugyldig verdi."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)
  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse for den angitte filreferansen med tillatelsen angitte skrivetilgang <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten eierskap bufferstørrelsen og synkron eller asynkron tilstand."
  remarks: "Den `FileStream` objektet er gitt angitte tilgang til filen. Eier av håndtaket blir som angitt. Hvis `FileStream` eier håndtaket et kall til den <xref:System.IO.Stream.Close%2A>metoden lukkes også håndtaket.</xref:System.IO.Stream.Close%2A> Spesielt reduseres filens referansen count. Den `FileStream` objekt er angitt i den angitte bufferstørrelsen.       `FileStream`antar at det har full kontroll over håndtaket. Lesing skriving eller søker under en `FileStream` også inneholder en referanse kan føre til ødelagte data. For datasikkerhet, kan du kalle <xref:System.IO.FileStream.Flush%2A>før med håndtaket og unngå kaller noen metoder enn `Close` når du er ferdig med håndtaket.</xref:System.IO.FileStream.Flush%2A> Alternativt lese og skrive referansen før du kaller opp denne `FileStream` konstruktør.       `FileShare.Read`er standard for de <xref:System.IO.FileStream>konstruktører uten en `FileShare` parameter.</xref:System.IO.FileStream>      > [!CAUTION] > Når du kompilerer et sett med tegn med en bestemt kulturelle innstilling og henting av de samme tegnene med en annen kulturelle innstilling, tegnene er kanskje ikke kan tolkes, og kan føre til at det oppstod et unntak.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "En fil håndtere for filen som denne <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som angir den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet."
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis filreferansen vil være eid av dette <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> serverforekomsten; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
    - id: isAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis referansen ble åpnet asynkront (det vil si i overlapper i/u-modus); Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>access</code>er mindre enn <xref uid=&quot;langword_csharp_FileAccess.Read&quot; name=&quot;FileAccess.Read&quot; href=&quot;&quot;> </xref> eller større enn <xref uid=&quot;langword_csharp_FileAccess.ReadWrite&quot; name=&quot;FileAccess.ReadWrite&quot; href=&quot;&quot;> </xref> eller <code>bufferSize</code> er mindre enn eller lik 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Referansen er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel en diskfeil.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte filreferansen, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filreferansen er angitt for skrivebeskyttet tilgang."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse med den angitte banen, opprettingsmodus skrivetilgang og dele tillatelse og bufferstørrelse."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som bestemmer hvordan filen kan få tilgang til den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. Dette avgjør også verdiene som returneres av den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. <xref:System.IO.FileStream.CanSeek*>er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis `path` angir en diskfil.</xref:System.IO.FileStream.CanSeek*>"
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativ eller null.       - eller - <code>mode</code>, <code>access</code>, eller <code>share</code> inneholder en ugyldig verdi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - systemet kjører Windows 98 eller Windows 98 Second Edition og <code> share </code> er satt til <xref uid=&quot;langword_csharp_FileShare.Delete&quot; name=&quot;FileShare.Delete&quot; href=&quot;&quot;> </xref>.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse med den angitte banen, opprettingsmodus skrivetilgang og deler tillatelse, buffer størrelsen, og synkron eller asynkron tilstand."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly. A `State` object is created to pass information from the main thread to the `EndReadCallback` and `EndWriteCallback` methods.  \n  \n [!code-cs[System.IO.FileStream2#1](~/add/codesnippet/csharp/ff94fabb-a26d-4ac2-a74e-_1.cs)]\n [!code-vb[System.IO.FileStream2#1](~/add/codesnippet/visualbasic/ff94fabb-a26d-4ac2-a74e-_1.vb)]\n [!code-cpp[System.IO.FileStream2#1](~/add/codesnippet/cpp/ff94fabb-a26d-4ac2-a74e-_1.cpp)]"
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som bestemmer hvordan filen kan få tilgang til den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. Dette avgjør også verdiene som returneres av den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. <xref:System.IO.FileStream.CanSeek*>er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis `path` angir en diskfil.</xref:System.IO.FileStream.CanSeek*>"
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096.."
    - id: useAsync
      type: System.Boolean
      description: "Angir om bruk av asynkront i/u eller synkron i/u. Vær oppmerksom på at det underliggende operativsystemet ikke støtter kanskje asynkront i/u, så når du angir <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, håndtaket kan åpnes synkront avhengig plattformen. Når åpnet asynkront, den <> </> *> og <> </> *> metoder utføre bedre på høyt lesinger eller skriver, men de kan være mye lengre tid for lavt lesinger eller skriver. Hvis programmet er utformet for å benytte deg av asynkront i/u, angitt i `useAsync` parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Ved hjelp av asynkront i/u riktig kan øke hastigheten på programmer av som en faktorer av 10, men å bruke den uten utforme nytt programmet for asynkront i/u kan redusere ytelsen ved så mye som faktorer 10."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativ eller null.       - eller - <code>mode</code>, <code>access</code>, eller <code>share</code> inneholder en ugyldig verdi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - systemet kjører Windows 98 eller Windows 98 Second Edition og <code> share </code> er satt til <xref uid=&quot;langword_csharp_FileShare.Delete&quot; name=&quot;FileShare.Delete&quot; href=&quot;&quot;> </xref>.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klassen med den angitte banen, opprettingsmodus, skrive- og dele tillatelse kan tilgangen andre FileStreams kan ha til den samme filen, bufferstørrelsen og andre alternativer."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.  \n  \n [!code-cpp[IO.FileStream.ctor1#1](~/add/codesnippet/cpp/53f739ba-7c4d-43ff-a387-_1.cpp)]\n [!code-vb[IO.FileStream.ctor1#1](~/add/codesnippet/visualbasic/53f739ba-7c4d-43ff-a387-_1.vb)]\n [!code-cs[IO.FileStream.ctor1#1](~/add/codesnippet/csharp/53f739ba-7c4d-43ff-a387-_1.cs)]"
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: access
      type: System.IO.FileAccess
      description: "En konstant som bestemmer hvordan filen kan få tilgang til den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. Dette avgjør også verdiene som returneres av den <> </> *> og <> </> *> egenskapene for den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet. <xref:System.IO.FileStream.CanSeek*>er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis `path` angir en diskfil.</xref:System.IO.FileStream.CanSeek*>"
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
    - id: options
      type: System.IO.FileOptions
      description: "En verdi som angir flere alternativer."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativ eller null.       - eller - <code>mode</code>, <code>access</code>, eller <code>share</code> inneholder en ugyldig verdi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang.       - eller - <xref href=&quot;System.IO.FileOptions&quot;> </xref> er angitt for <code> options </code>, men filkryptering støttes ikke i den gjeldende plattformen."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte banen, filnavnet eller begge være lengre enn den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  id: '#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
  nameWithType: FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klassen med den angitte banen, opprettingsmodus, tilgangsrettigheter og deling tillatelse, bufferen størrelsen og andre alternativer."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n Use this FileStream constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: rights
      type: System.Security.AccessControl.FileSystemRights
      description: "En konstant som bestemmer tilgangsrettigheter til å bruke når du oppretter tilgang og audit regler for filen."
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
    - id: options
      type: System.IO.FileOptions
      description: "En konstant som angir flere alternativer."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativ eller null.       - eller - <code>mode</code>, <code>access</code>, eller <code>share</code> inneholder en ugyldig verdi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Det gjeldende operativsystemet er ikke Windows NT eller senere."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang.       - eller - <xref href=&quot;System.IO.FileOptions&quot;> </xref> er angitt for <code> options </code>, men filkryptering støttes ikke i den gjeldende plattformen."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte <code> path </code>, filnavn, eller begge deler overskrider den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  platform:
  - net462
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  id: '#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)'
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
  nameWithType: FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IO.FileStream&quot;> </xref> klasse med den angitte banen, opprettingsmodus tilgangsrettigheter og deler tillatelse, bufferstørrelsen flere alternativer, tilgangskontroll og overvåking sikkerhet."
  remarks: "The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n Use this FileStream constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.  \n  \n [!code-cpp[IO.FileStream.ctor2#1](~/add/codesnippet/cpp/7f323125-1dac-495a-a4ee-_1.cpp)]\n [!code-cs[IO.FileStream.ctor2#1](~/add/codesnippet/csharp/7f323125-1dac-495a-a4ee-_1.cs)]\n [!code-vb[IO.FileStream.ctor2#1](~/add/codesnippet/visualbasic/7f323125-1dac-495a-a4ee-_1.vb)]"
  syntax:
    content: public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: path
      type: System.String
      description: "En relativ eller absolutt bane for filen som gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet vil omfatter."
    - id: mode
      type: System.IO.FileMode
      description: "En konstant som bestemmer hvordan å åpne eller opprette filen."
    - id: rights
      type: System.Security.AccessControl.FileSystemRights
      description: "En konstant som bestemmer tilgangsrettigheter til å bruke når du oppretter tilgang og audit regler for filen."
    - id: share
      type: System.IO.FileShare
      description: "En konstant som bestemmer hvordan filen skal deles av prosesser."
    - id: bufferSize
      type: System.Int32
      description: "Et positivt <xref:System.Int32>større enn 0 som angir bufferstørrelsen.</xref:System.Int32> Standard-bufferstørrelsen er 4096."
    - id: options
      type: System.IO.FileOptions
      description: "En konstant som angir flere alternativer."
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "En konstant som bestemmer tilgangskontroll og overvåking sikkerhet for filen."
  overload: System.IO.FileStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>en tom streng (&quot;&quot;), inneholder bare mellomrom eller inneholder én eller flere ugyldige tegn.       - eller - <code>path</code> refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i et miljø med NTFS."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>refererer til en ikke-fil-enhet, slik som &quot;con:&quot;, &quot;com1:&quot;, &quot;lpt1:&quot;, osv. i en ikke-NTFS-miljøet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>er negativ eller null.       - eller - <code>mode</code>, <code>access</code>, eller <code>share</code> inneholder en ugyldig verdi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Filen kan ikke finnes, for eksempel når <code> mode </code> er <xref uid=&quot;langword_csharp_FileMode.Truncate&quot; name=&quot;FileMode.Truncate&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_FileMode.Open&quot; name=&quot;FileMode.Open&quot; href=&quot;&quot;> </xref>, og filen fra <code> path </code> finnes ikke. Filen må finnes i modusene."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En i/u-feil, for eksempel angir <xref uid=&quot;langword_csharp_FileMode.CreateNew&quot; name=&quot;FileMode.CreateNew&quot; href=&quot;&quot;> </xref> når filen angitt av <code> path </code> allerede finnes, inntraff.       - eller - dataflyten er lukket."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Den angitte banen er ugyldig, for eksempel er på en lokal stasjon."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <code> access </code> forespurte tillates ikke av operativsystemet for den angitte <code> path </code>, for eksempel når <code> access </code> er <xref uid=&quot;langword_csharp_Write&quot; name=&quot;Write&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_ReadWrite&quot; name=&quot;ReadWrite&quot; href=&quot;&quot;> </xref> og filen eller mappen er angitt for skrivebeskyttet tilgang.       - eller - <xref href=&quot;System.IO.FileOptions&quot;> </xref> er angitt for <code> options </code>, men filkryptering støttes ikke i den gjeldende plattformen."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Den angitte <code> path </code>, filnavn, eller begge deler overskrider den systemdefinerte maksimumslengden. For eksempel på Windows-baserte plattformer baner må være mindre enn 248 tegn, og filnavn må være mindre enn 260 tegn."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Det gjeldende operativsystemet er ikke Windows NT eller senere."
  platform:
  - net462
- uid: System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: FileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.FileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Starter en asynkron operasjon. (Vurder å bruke <xref:System.IO.FileStream.ReadAsync*>i stedet; se under Merknader.)</xref:System.IO.FileStream.ReadAsync*>"
  remarks: "I .NET Framework 4 og tidligere versjoner, må du bruke metoder for eksempel BeginRead og <xref:System.IO.FileStream.EndRead%2A>implementere asynkrone filoperasjoner.</xref:System.IO.FileStream.EndRead%2A> Disse metodene er fortsatt tilgjengelige i det [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] å støtte eldre kode; imidlertid metodene for ny asynkron eksempel <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, og <xref:System.IO.FileStream.FlushAsync%2A>, hjelp du implementere asynkrone filoperasjoner enklere.</xref:System.IO.FileStream.FlushAsync%2A> </xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A>       <xref:System.IO.FileStream.EndRead%2A>må kalles nøyaktig én gang for hvert kall til BeginRead.</xref:System.IO.FileStream.EndRead%2A> Kan ikke avslutte en lesefeil prosess før du starter en ny leseoperasjon, kan det føre til uønsket virkemåte for eksempel vranglås.       <xref:System.IO.FileStream>gir to forskjellige måter for operasjon: synkron i/u og asynkront i/u.</xref:System.IO.FileStream> Under enten kan brukes, kan de underliggende Operativsystemressursene gir tilgang i ett av disse modiene. Som standard <xref:System.IO.FileStream>åpner operativsystemet håndtaket synkront.</xref:System.IO.FileStream> I Windows tregere dette asynkrone metoder. Hvis asynkrone metoder brukes, kan du bruke den <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>konstruktør.</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanRead%2A>til å fastslå om den gjeldende forekomsten, støtter lesing.</xref:System.IO.FileStream.CanRead%2A> Hvis du vil ha mer informasjon, kan du se <xref:System.IO.Stream.CanRead%2A>.</xref:System.IO.Stream.CanRead%2A>       Hvis en dataflyten er lukket, eller du sende et ugyldig argument, er unntak oppstod umiddelbart fra BeginRead. Feil som oppstår under en asynkron skrivebeskyttede forespørsel, for eksempel diskfeil under i/u-forespørselen oppstå på tråd applikasjonsutvalget tråd og vises når et kall til <xref:System.IO.FileStream.EndRead%2A>.</xref:System.IO.FileStream.EndRead%2A>       <xref:System.IO.Stream.EndRead%2A>må kalles med dette <xref:System.IAsyncResult>å finne ut hvor mange byte ble lest.</xref:System.IAsyncResult></xref:System.IO.Stream.EndRead%2A>       Flere samtidige asynkrone forespørsler gjengi forespørselen fullføring rekkefølgen usikker.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#3](~/add/codesnippet/csharp/82be2bd0-0603-4287-b351-_1.cs)]\n [!code-vb[System.IO.FileStream2#3](~/add/codesnippet/visualbasic/82be2bd0-0603-4287-b351-_1.vb)]\n [!code-cpp[System.IO.FileStream2#3](~/add/codesnippet/cpp/82be2bd0-0603-4287-b351-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    parameters:
    - id: array
      type: System.Byte[]
      description: "Bufferen kan lese data i."
    - id: offset
      type: System.Int32
      description: "Forskyvningen i byte i `array` vil starte lesing."
    - id: numBytes
      type: System.Int32
      description: "Maksimalt antall byte som skal leses."
    - id: userCallback
      type: System.AsyncCallback
      description: "Metoden kalles når den asynkron leser operasjonen er fullført."
    - id: stateObject
      type: System.Object
      description: "Et gitt objekt som skiller bestemt asynkrone skrivebeskyttede forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "Et objekt som refererer til asynkron lesing."
  overload: System.IO.FileStream.BeginRead*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Hvor matrise minus <code> offset </code> er mindre enn <code> numBytes </code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>numBytes</code> er negativt."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "En asynkron lesing ble forsøkt forbi slutten på filen."
  platform:
  - net462
- uid: System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: FileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.FileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Starter en asynkron skriveoperasjon. (Vurder å bruke <xref:System.IO.FileStream.WriteAsync*>i stedet; se under Merknader.)</xref:System.IO.FileStream.WriteAsync*>"
  remarks: "I .NET Framework 4 og tidligere versjoner, må du bruke metoder for eksempel BeginWrite og <xref:System.IO.FileStream.EndWrite%2A>implementere asynkrone filoperasjoner.</xref:System.IO.FileStream.EndWrite%2A> Disse metodene er fortsatt tilgjengelige i det [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] å støtte eldre kode; imidlertid metodene for ny asynkron eksempel <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, og <xref:System.IO.FileStream.FlushAsync%2A>, hjelp du implementere asynkrone filoperasjoner enklere.</xref:System.IO.FileStream.FlushAsync%2A> </xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A>       <xref:System.IO.FileStream.EndWrite%2A>må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>fra BeginWrite.</xref:System.IAsyncResult></xref:System.IO.FileStream.EndWrite%2A> <xref:System.IO.FileStream.EndWrite%2A>blokkerer før i/u-operasjonen er fullført.</xref:System.IO.FileStream.EndWrite%2A>       Denne metoden overstyrer <xref:System.IO.Stream.BeginWrite%2A>.</xref:System.IO.Stream.BeginWrite%2A>       <xref:System.IO.FileStream>gir to forskjellige måter for operasjon: synkron i/u og asynkront i/u.</xref:System.IO.FileStream> Under enten kan brukes, kan de underliggende Operativsystemressursene gir tilgang i ett av disse modiene. Som standard <xref:System.IO.FileStream>åpner operativsystemet håndtaket synkront.</xref:System.IO.FileStream> I Windows tregere dette asynkrone metoder. Hvis asynkrone metoder brukes, kan du bruke den <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>konstruktør.</xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29>       Hvis en dataflyten er lukket, eller du sende et ugyldig argument, er unntak oppstod umiddelbart fra BeginWrite. Feil som oppstår under en asynkron skriveforespørselen, for eksempel diskfeil under i/u-forespørselen oppstå på tråd applikasjonsutvalget tråd og vises når et kall til <xref:System.IO.FileStream.EndWrite%2A>.</xref:System.IO.FileStream.EndWrite%2A>       Flere samtidige asynkrone forespørsler gjengi forespørselen fullføring rekkefølgen usikker.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#2](~/add/codesnippet/csharp/439bdb1f-5241-4046-a4ad-_1.cs)]\n [!code-vb[System.IO.FileStream2#2](~/add/codesnippet/visualbasic/439bdb1f-5241-4046-a4ad-_1.vb)]\n [!code-cpp[System.IO.FileStream2#2](~/add/codesnippet/cpp/439bdb1f-5241-4046-a4ad-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    parameters:
    - id: array
      type: System.Byte[]
      description: "Bufferen som inneholder data å skrive til gjeldende dataflyten."
    - id: offset
      type: System.Int32
      description: "Forskyvning nullbasert byte i `array` som du vil kopiere byte til gjeldende dataflyten."
    - id: numBytes
      type: System.Int32
      description: "Maksimalt antall byte som skal skrive."
    - id: userCallback
      type: System.AsyncCallback
      description: "Metoden som skal kalles når asynkrone Skriveoperasjonen er fullført."
    - id: stateObject
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemt asynkrone skriveforespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "Et objekt som refererer til den asynkrone skrivingen."
  overload: System.IO.FileStream.BeginWrite*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>lengden minus <code>offset</code> er mindre enn <code>numBytes</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>numBytes</code> er negativt."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke skriving."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten er lukket."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil."
  platform:
  - net462
- uid: System.IO.FileStream.CanRead
  id: CanRead
  parent: System.IO.FileStream
  langs:
  - csharp
  name: CanRead
  nameWithType: FileStream.CanRead
  fullName: System.IO.FileStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en verdi som angir om den gjeldende Dataflyten støtter lesing."
  remarks: "Hvis en klasse som er avledet fra <xref:System.IO.Stream>støtter ikke lesing, kall til den <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, og <xref:System.IO.FileStream.BeginRead%2A>metoder iverksette <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.IO.FileStream.BeginRead%2A> </xref:System.IO.FileStream.ReadByte%2A> </xref:System.IO.FileStream.Read%2A> </xref:System.IO.Stream>       Hvis dataflyten er lukket, denne egenskapen returnerer `false`."
  example:
  - "The following example demonstrates a use of the `CanRead` property. The output of this code is \"MyFile.txt is not writable.\" To get the output message \"MyFile.txt can be both written to and read from.\", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.  \n  \n [!code-cs[Classic FileStream.CanRead Example#1](~/add/codesnippet/csharp/p-system.io.filestream.c_1_1.cs)]\n [!code-cpp[Classic FileStream.CanRead Example#1](~/add/codesnippet/cpp/p-system.io.filestream.c_1_1.cpp)]\n [!code-vb[Classic FileStream.CanRead Example#1](~/add/codesnippet/visualbasic/p-system.io.filestream.c_1_1.vb)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis Dataflyten støtter lesing; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis dataflyten er lukket eller ble åpnet med lesebeskyttet tilgang."
  overload: System.IO.FileStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.CanSeek
  id: CanSeek
  parent: System.IO.FileStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: FileStream.CanSeek
  fullName: System.IO.FileStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en verdi som angir om den gjeldende Dataflyten støtter søking."
  remarks: "Hvis en klasse som er avledet fra <xref:System.IO.Stream>støtter ikke søking, kaller til <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, og <xref:System.IO.FileStream.Seek%2A>Iverksett <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.IO.FileStream.Seek%2A> </xref:System.IO.FileStream.Position%2A> </xref:System.IO.FileStream.SetLength%2A> </xref:System.IO.FileStream.Length%2A> </xref:System.IO.Stream>       Hvis dataflyten er lukket, denne egenskapen returnerer `false`."
  example:
  - "The following example uses the `CanSeek` property to check whether a stream supports seeking.  \n  \n [!code-cpp[fstream canseek#1](~/add/codesnippet/cpp/p-system.io.filestream.c_0_1.cpp)]\n [!code-vb[fstream canseek#1](~/add/codesnippet/visualbasic/p-system.io.filestream.c_0_1.vb)]\n [!code-cs[fstream canseek#1](~/add/codesnippet/csharp/p-system.io.filestream.c_0_1.cs)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis Dataflyten støtter søking; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis dataflyten er lukket eller den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> ble konstruert fra en operativsystemet referanse for eksempel datakanalen eller utdata til konsollen."
  overload: System.IO.FileStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.CanWrite
  id: CanWrite
  parent: System.IO.FileStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: FileStream.CanWrite
  fullName: System.IO.FileStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en verdi som angir om den gjeldende Dataflyten støtter skriving."
  remarks: "Hvis en klasse som er avledet fra <xref:System.IO.Stream>støtter ikke skriving et kall til <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, eller <xref:System.IO.FileStream.WriteByte%2A>oppstår <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.IO.FileStream.WriteByte%2A> </xref:System.IO.FileStream.BeginWrite%2A> </xref:System.IO.FileStream.Write%2A> </xref:System.IO.FileStream.SetLength%2A> </xref:System.IO.Stream>       Hvis dataflyten er lukket, denne egenskapen returnerer `false`."
  example:
  - "The following example uses the `CanWrite` property to check whether a stream supports writing.  \n  \n [!code-cs[fstream canwrite#1](~/add/codesnippet/csharp/p-system.io.filestream.c_2_1.cs)]\n [!code-cpp[fstream canwrite#1](~/add/codesnippet/cpp/p-system.io.filestream.c_2_1.cpp)]\n [!code-vb[fstream canwrite#1](~/add/codesnippet/visualbasic/p-system.io.filestream.c_2_1.vb)]  \n  \n The following is an example using the `CanWrite` property. The output of this code is \"MyFile.txt is writable.\" To get the output message \"MyFile.txt can be both written to and read from.\", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.  \n  \n [!code-cs[Classic FileStream.CanWrite Example#1](~/add/codesnippet/csharp/p-system.io.filestream.c_2_2.cs)]\n [!code-vb[Classic FileStream.CanWrite Example#1](~/add/codesnippet/visualbasic/p-system.io.filestream.c_2_2.vb)]\n [!code-cpp[Classic FileStream.CanWrite Example#1](~/add/codesnippet/cpp/p-system.io.filestream.c_2_2.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis Dataflyten støtter skriving; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis dataflyten er lukket eller ble åpnet med lesetilgang."
  overload: System.IO.FileStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileStream.Dispose(Boolean)
  fullName: System.IO.FileStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.IO.FileStream&quot;> </xref> og eventuelt frigir administrerte ressurser."
  remarks: "Denne metoden kalles av offentlig <xref:System.ComponentModel.Component.Dispose%2A>metoden og <xref:System.Object.Finalize%2A>metode.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>Aktiverer beskyttede fjerningsmetoden med den `disposing` parameteren satt til `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>Aktiverer avhending med `disposing` satt til `false`.</xref:System.Object.Finalize%2A>       Når den `disposing` parameteren er `true`, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.IO.FileStream>referanser.</xref:System.IO.FileStream> Denne metoden starter den <xref:System.ComponentModel.Component.Dispose%2A>metode for hver referert objekt.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Frigi ressurser både administrerte og uforvaltede; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.IO.FileStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: FileStream.EndRead(IAsyncResult)
  fullName: System.IO.FileStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Venter på ventende asynkron leseoperasjonen skal fullføres. (Vurder å bruke <xref:System.IO.FileStream.ReadAsync*>i stedet; se under Merknader.)</xref:System.IO.FileStream.ReadAsync*>"
  remarks: "I .NET Framework 4 og tidligere versjoner, må du bruke metoder som <xref:System.IO.FileStream.BeginRead%2A>og EndRead å implementere asynkrone filoperasjoner.</xref:System.IO.FileStream.BeginRead%2A> Disse metodene er fortsatt tilgjengelige i det [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] å støtte eldre kode; imidlertid metodene for ny asynkron eksempel <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, og <xref:System.IO.FileStream.FlushAsync%2A>, hjelp du implementere asynkrone filoperasjoner enklere.</xref:System.IO.FileStream.FlushAsync%2A> </xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A>       EndRead må kalles nøyaktig for hvert kall til <xref:System.IO.FileStream.BeginRead%2A>.</xref:System.IO.FileStream.BeginRead%2A> Kan ikke avslutte en lesefeil prosess før du starter en ny leseoperasjon, kan det føre til uønsket virkemåte for eksempel vranglås.       Denne metoden overstyrer <xref:System.IO.Stream.EndRead%2A>.</xref:System.IO.Stream.EndRead%2A>       EndRead kan kalles for hver <xref:System.IAsyncResult>fra <xref:System.IO.FileStream.BeginRead%2A>.</xref:System.IO.FileStream.BeginRead%2A> </xref:System.IAsyncResult> Kaller EndRead angir hvor mange byte ble lest fra dataflyten. EndRead blokkerer før i/u-operasjonen er fullført."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#4](~/add/codesnippet/csharp/m-system.io.filestream.e_0_1.cs)]\n [!code-vb[System.IO.FileStream2#4](~/add/codesnippet/visualbasic/m-system.io.filestream.e_0_1.vb)]\n [!code-cpp[System.IO.FileStream2#4](~/add/codesnippet/cpp/m-system.io.filestream.e_0_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Referansen til ventende asynkron forespørselen om å vente."
    return:
      type: System.Int32
      description: "Antall byte lest fra flyten, mellom 0 og antall byte som du har bedt om. Dataflyter bare returnere 0 på slutten av dataflyten, ellers de bør blokkeres til minst 1 byte er tilgjengelig."
  overload: System.IO.FileStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Dette <xref:System.IAsyncResult>objektet ble ikke opprettet ved å kalle <xref:System.IO.FileStream.BeginRead*>på denne klassen.</xref:System.IO.FileStream.BeginRead*> </xref:System.IAsyncResult>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndRead kalles flere ganger."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Dataflyten er lukket, eller det oppstod en intern feil."
  platform:
  - net462
- uid: System.IO.FileStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: FileStream.EndWrite(IAsyncResult)
  fullName: System.IO.FileStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Avslutter en asynkron skriveoperasjon og blokker til i/u-operasjonen er fullført. (Vurder å bruke <xref:System.IO.FileStream.WriteAsync*>i stedet; se under Merknader.)</xref:System.IO.FileStream.WriteAsync*>"
  remarks: "I .NET Framework 4 og tidligere versjoner, må du bruke metoder som <xref:System.IO.FileStream.BeginWrite%2A>og EndWrite implementere asynkrone filoperasjoner.</xref:System.IO.FileStream.BeginWrite%2A> Disse metodene er fortsatt tilgjengelige i det [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)] å støtte eldre kode; imidlertid metodene for ny asynkron eksempel <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, og <xref:System.IO.FileStream.FlushAsync%2A>, hjelp du implementere asynkrone filoperasjoner enklere.</xref:System.IO.FileStream.FlushAsync%2A> </xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A>       Denne metoden overstyrer <xref:System.IO.Stream.EndWrite%2A>.</xref:System.IO.Stream.EndWrite%2A>       EndWrite må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>fra <xref:System.IO.FileStream.BeginWrite%2A>.</xref:System.IO.FileStream.BeginWrite%2A> </xref:System.IAsyncResult> EndWrite blokkerer før i/u-operasjonen er fullført."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#3](~/add/codesnippet/csharp/m-system.io.filestream.e_1_1.cs)]\n [!code-vb[System.IO.FileStream2#3](~/add/codesnippet/visualbasic/m-system.io.filestream.e_1_1.vb)]\n [!code-cpp[System.IO.FileStream2#3](~/add/codesnippet/cpp/m-system.io.filestream.e_1_1.cpp)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Ventende asynkrone i/u-forespørselen."
  overload: System.IO.FileStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Dette <xref:System.IAsyncResult>objektet ble ikke opprettet ved å kalle <xref:System.IO.Stream.BeginWrite*>på denne klassen.</xref:System.IO.Stream.BeginWrite*> </xref:System.IAsyncResult>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndWrite kalles flere ganger."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Dataflyten er lukket, eller det oppstod en intern feil."
  platform:
  - net462
- uid: System.IO.FileStream.Finalize
  id: Finalize
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Finalize()
  nameWithType: FileStream.Finalize()
  fullName: System.IO.FileStream.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Sikrer at frigis ressurser og andre operasjoner for opprydding utføres når saneringsoppsamlingen reclaims den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref>."
  remarks: "Kall saneringsoppsamling `Finalize` når det gjeldende objektet er klar til å fullføres. `Finalize`lukker det `FileStream`."
  syntax:
    content: ~FileStream ();
    parameters: []
  overload: System.IO.FileStream.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.Flush
  id: Flush
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Flush()
  nameWithType: FileStream.Flush()
  fullName: System.IO.FileStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Fjerner bufferne for denne dataflyten og fører til bufrede data skrives til filen."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.Flush%2A?displayProperty=fullName>.</xref:System.IO.Stream.Flush%2A?displayProperty=fullName>       Når du kaller metoden tømming, tømmes også operativsystemet i/u-bufferen.       En dataflyt koder tømmes ikke med mindre du eksplisitt kalle tømme eller fjerne for objektet. Angi <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName>til `true` betyr at data fjernes fra bufferen til dataflyten, men tilstanden koder ikke tømmes.</xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> Dette gjør at koder ikke beholde tilstanden (delvis tegn) slik at den kan kode neste blokken tegn på riktig måte. Dette scenarioet påvirker UTF8 og UTF7 der bestemte tegn kan bare være kodet når koderen mottar tilstøtende tegn eller tegn.       Fordi en buffer kan brukes til å lese eller skrive, tømming utfører følgende to funksjoner: – alle data som tidligere skrives til bufferen er kopiert til filen, og bufferen tømmes unntatt tilstanden koder.      -Hvis <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName>er `true` og data tidligere ble kopiert fra filen til bufferen for lesing, gjeldende plassering i filen reduseres antall uleste byte i bufferen.</xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName> Bufferen fjernes deretter.       Bruk den <xref:System.IO.FileStream.Flush%28System.Boolean%29>metoden overbelastning når du vil sikre at alle bufret data i midlertidige filen bufferne er skrevet til disken.</xref:System.IO.FileStream.Flush%28System.Boolean%29>"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \n  \n [!code-cs[System.IO.FileStream3#4](~/add/codesnippet/csharp/m-system.io.filestream.f_1.cs)]\n [!code-cpp[System.IO.FileStream3#4](~/add/codesnippet/cpp/m-system.io.filestream.f_1.cpp)]\n [!code-vb[System.IO.FileStream3#4](~/add/codesnippet/visualbasic/m-system.io.filestream.f_1.vb)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.IO.FileStream.Flush*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten er lukket."
  platform:
  - net462
- uid: System.IO.FileStream.Flush(System.Boolean)
  id: Flush(System.Boolean)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Flush(Boolean)
  nameWithType: FileStream.Flush(Boolean)
  fullName: System.IO.FileStream.Flush(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Fjerner bufferne for denne dataflyten og fører til at bufrede data skrives til filen, og fjerner også alle midlertidige filen buffere."
  remarks: "Bruk denne overlasten når du vil sikre at alle bufret data i midlertidige filen bufferne er skrevet til disken.       Når du kaller metoden tømming, tømmes også operativsystemet i/u-bufferen."
  syntax:
    content: public virtual void Flush (bool flushToDisk);
    parameters:
    - id: flushToDisk
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>bufrer å tømme alle midlertidige filen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: FileStream.FlushAsync(CancellationToken)
  fullName: System.IO.FileStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Asynkront tømmes alle bufferne for denne dataflyten, fører til at bufrede data skrives til den underliggende enheten og overvåker avbryte forespørsler."
  remarks: "Når du kaller metoden FlushAsync, tømmes også operativsystemet i/u-bufferen.       Hvis operasjonen er avbrutt før den er fullført, returnerte oppgaven inneholder den <xref:System.Threading.Tasks.TaskStatus>verdien den <xref:System.Threading.Tasks.Task.Status%2A>egenskapen.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus> Hvis håndtaket for filen er fjernet, returnerte oppgaven inneholder den <xref:System.ObjectDisposedException>unntak i den <xref:System.Threading.Tasks.Task.Exception%2A>egenskapen.</xref:System.Threading.Tasks.Task.Exception%2A> </xref:System.ObjectDisposedException>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Tokenet, for å overvåke for å avbryte forespørsler."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone skriveoperasjon."
  overload: System.IO.FileStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten har blitt fjernet."
  platform:
  - net462
- uid: System.IO.FileStream.GetAccessControl
  id: GetAccessControl
  parent: System.IO.FileStream
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: FileStream.GetAccessControl()
  fullName: System.IO.FileStream.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref> objekt som innkapsler i listen (ACL) tilgangskontrolloppføringer for filen som er beskrevet i gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet."
  remarks: "Mens den <xref:System.IO.FileStream>klassen og GetAccessControl kan brukes til å hente de listen (ACL) tilgangskontrolloppføringene for en eksisterende fil, Vurder å bruke <xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName>metode, slik det er enklere å bruke.</xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName> </xref:System.IO.FileStream>       Bruk GetAccessControl-metoden til å hente ACL-oppføringer for en fil.       En Tilgangskontrolliste beskriver enkeltpersoner og/eller grupper som har eller har ikke tilgangsrettigheter, med bestemte handlinger på den angitte filen. Hvis du vil ha mer informasjon, se [slik: Legg til eller fjern Access Control listeoppføringer](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Security.AccessControl.FileSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.FileSecurity
      description: "Et objekt som innkapsler innstillingene for tilgangskontroll for filen som er beskrevet i gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet."
  overload: System.IO.FileStream.GetAccessControl*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Filen er lukket."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under åpning av filen."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Finner ikke filen."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Denne operasjonen støttes ikke på gjeldende plattform.       - eller - oppkalleren har ikke den nødvendige tillatelsen."
  platform:
  - net462
- uid: System.IO.FileStream.Handle
  id: Handle
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Handle
  nameWithType: FileStream.Handle
  fullName: System.IO.FileStream.Handle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter operativsystemet filreferanse for filen som gjeldende <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> objektet innkapsler."
  remarks: "Denne egenskapen er en operativsystemet referanse for bruk med brukes system-gitt system kaller (eksempel `ReadFile` på Windows). Det virker ikke med C-biblioteksfunksjonene forventer en Filbeskrivelse eksempel `fread`.       Operativsystemet referansen kan har blitt åpnet synkron eller asynkron, avhengig av hvilken `FileStream` konstruktøren ble kalt. Bruk av <xref:System.IO.FileStream.IsAsync%2A>til å oppdage om denne referansen ble åpnet asynkront.</xref:System.IO.FileStream.IsAsync%2A> I Win32, betyr dette referansen ble åpnet for overlappende i/u, og den krever andre parametere til `ReadFile` og `WriteFile`.      > [!CAUTION] > Ødelagte data kan forekomme hvis en `FileStream` er opprettet, håndtaket er sendt, en operasjon flytter det håndtaket filen pekeren, og deretter den `FileStream` brukes på nytt. Flere tråder kan bare skrive til den samme filen samtidig, og `FileStream` bufring kode antar at den eksklusivt styrer referansen. `FileStream`kan slette en <xref:System.IO.IOException>Hvis `FileStream` oppdager at en annen prosess har flyttet filen pekeren.</xref:System.IO.IOException> Du kan unngå dette ikke Skriv data til en del av filen som `FileStream` kan ha bufret og gjenoppretter filen pekeren til plassering for filen hadde da metoder sist ble kalt på `FileStream`."
  syntax:
    content: public virtual IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "Operativsystemet filreferanse for filen encapsulated av dette <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> -objekt eller -1 hvis den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> har blitt lukket."
  overload: System.IO.FileStream.Handle*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Oppkalleren har ikke den nødvendige tillatelsen."
  platform:
  - net462
- uid: System.IO.FileStream.IsAsync
  id: IsAsync
  parent: System.IO.FileStream
  langs:
  - csharp
  name: IsAsync
  nameWithType: FileStream.IsAsync
  fullName: System.IO.FileStream.IsAsync
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en verdi som angir om den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> ble åpnet synkron eller asynkron."
  remarks: "Den `IsAsync` egenskapen oppdager om den `FileStream` referansen ble åpnet asynkront, aktiverer koden til å bruke den <xref:System.IO.FileStream.Handle%2A>egenskapen på riktig måte.</xref:System.IO.FileStream.Handle%2A> I Win32, `IsAsync` er SANN betyr håndtaket ble åpnet for overlappende i/u, og dermed krever at forskjellige parametere `ReadFile` og `WriteFile`.       Du angir denne verdien når du oppretter en forekomst av den <xref:System.IO.FileStream>klasse ved hjelp av en konstruktør som har en `isAsync`, `useAsync`, eller `options` parameteren.</xref:System.IO.FileStream> Når egenskapen er `true`, dataflyten benytter overlappende i/u for å utføre filoperasjoner asynkront. Egenskapen IsAsync ikke har imidlertid være `true` å kalle den <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, eller <xref:System.IO.Stream.CopyToAsync%2A>metode.</xref:System.IO.Stream.CopyToAsync%2A> </xref:System.IO.FileStream.WriteAsync%2A> </xref:System.IO.FileStream.ReadAsync%2A> Når egenskapen IsAsync er `false` du kalle asynkron lesing og skriveoperasjoner, UI-tråden fremdeles ikke er blokkert, men den faktiske i/u-operasjonen utføres synkront."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#2](~/add/codesnippet/csharp/p-system.io.filestream.i_1.cs)]\n [!code-vb[System.IO.FileStream2#2](~/add/codesnippet/visualbasic/p-system.io.filestream.i_1.vb)]\n [!code-cpp[System.IO.FileStream2#2](~/add/codesnippet/cpp/p-system.io.filestream.i_1.cpp)]"
  syntax:
    content: public virtual bool IsAsync { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> ble åpnet asynkront; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.Length
  id: Length
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Length
  nameWithType: FileStream.Length
  fullName: System.IO.FileStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter lengden i byte for dataflyten."
  remarks: "En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the `Length` and `Position` properties to check for an end-of-file condition.  \n  \n [!code-cpp[Classic FileStream.Length Example#1](~/add/codesnippet/cpp/p-system.io.filestream.l_1.cpp)]\n [!code-cs[Classic FileStream.Length Example#1](~/add/codesnippet/csharp/p-system.io.filestream.l_1.cs)]\n [!code-vb[Classic FileStream.Length Example#1](~/add/codesnippet/visualbasic/p-system.io.filestream.l_1.vb)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "En lang verdi som representerer lengden på dataflyten i byte."
  overload: System.IO.FileStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.IO.FileStream.CanSeek*>for denne dataflyten er <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.IO.FileStream.CanSeek*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil, for eksempel filen blir lukket."
  platform:
  - net462
- uid: System.IO.FileStream.Lock(System.Int64,System.Int64)
  id: Lock(System.Int64,System.Int64)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Lock(Int64,Int64)
  nameWithType: FileStream.Lock(Int64,Int64)
  fullName: System.IO.FileStream.Lock(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Hindrer andre prosesser fra lese fra eller skrive til den <xref href=&quot;System.IO.FileStream&quot;> </xref>."
  remarks: "Låse en rekke en filstrøm gir tråder låsetillatelse prosessen eksklusiv tilgang til dette området for filstrøm.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file. Run the program simultaneously in different command windows and investigate using the different console input options.  \n  \n [!code-cs[System.IO.FileStream3#1](~/add/codesnippet/csharp/m-system.io.filestream.l_1.cs)]\n [!code-cpp[System.IO.FileStream3#1](~/add/codesnippet/cpp/m-system.io.filestream.l_1.cpp)]\n [!code-vb[System.IO.FileStream3#1](~/add/codesnippet/visualbasic/m-system.io.filestream.l_1.vb)]"
  syntax:
    content: public virtual void Lock (long position, long length);
    parameters:
    - id: position
      type: System.Int64
      description: "Begynnelsen på området til å låse. Verdien for denne parameteren må være lik eller større enn null (0)."
    - id: length
      type: System.Int64
      description: "Området som skal låses."
  overload: System.IO.FileStream.Lock*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>eller <code>length</code> er negativt."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Filen er lukket."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Prosessen får ikke tilgang til filen fordi en annen prosess har låst en del av filen."
  platform:
  - net462
- uid: System.IO.FileStream.Name
  id: Name
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Name
  nameWithType: FileStream.Name
  fullName: System.IO.FileStream.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter navnet på den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> som ble sendt til konstruktøren."
  remarks: "En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n [!code-cs[System.IO.FileStream2#4](~/add/codesnippet/csharp/p-system.io.filestream.n_1.cs)]\n [!code-vb[System.IO.FileStream2#4](~/add/codesnippet/visualbasic/p-system.io.filestream.n_1.vb)]\n [!code-cpp[System.IO.FileStream2#4](~/add/codesnippet/cpp/p-system.io.filestream.n_1.cpp)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "En streng som er navnet på den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileStream.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.Position
  id: Position
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Position
  nameWithType: FileStream.Position
  fullName: System.IO.FileStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter eller angir gjeldende posisjon for denne dataflyten."
  remarks: "Søking hvor som helst utover meldingens lengde dataflyten støttes.  Når du søker etter utover meldingens lengde filen, øker filstørrelsen.  I Microsoft Windows NT og nyere, blir alle data som er lagt til slutten av filen er satt til null.  I Microsoft Windows 98 eller tidligere, er ikke alle data som er lagt til slutten av filen satt til null, noe som betyr at slettede data er synlig for dataflyten. Angi plasseringen av dataflyten en høy verdi utenfor slutten på dataflyten i Windows 98 eller tidligere, kan det føre til at det oppstod et unntaket i.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the `Length` and `Position` properties to check for an end-of-file condition.  \n  \n [!code-cpp[Classic FileStream.Length Example#1](~/add/codesnippet/cpp/p-system.io.filestream.p_1.cpp)]\n [!code-cs[Classic FileStream.Length Example#1](~/add/codesnippet/csharp/p-system.io.filestream.p_1.cs)]\n [!code-vb[Classic FileStream.Length Example#1](~/add/codesnippet/visualbasic/p-system.io.filestream.p_1.vb)]"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Gjeldende posisjonen til denne dataflyten."
  overload: System.IO.FileStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke søking."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred.  \n  \n \\- or -  \n  \n The position was set to a very large value beyond the end of the stream in Windows 98 or earlier."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Forsøkte å angi plasseringen til en negativ verdi."
  - type: System.IO.EndOfStreamException
    commentId: T:System.IO.EndOfStreamException
    description: "Forsøkt søking forbi slutten på en dataflyt som ikke støtter dette."
  platform:
  - net462
- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: FileStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.FileStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Leser en byte-blokk fra dataflyten og skriver dataene i en gitt buffer."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.Read%2A>.</xref:System.IO.Stream.Read%2A>       Den `offset` parameteren angir forskyvningen for byte i `array` (bufferen index) vil begynne å lese, og `count` parameteren angir maksimalt antall byte som leses fra denne dataflyten. Den returnerte verdien er faktisk antall byte lest eller null hvis slutten på dataflyten er nådd. Hvis leseoperasjonen lykkes, Avansert gjeldende posisjon for dataflyten på antall byte som leses. Hvis det oppstår et unntak, endres ikke gjeldende posisjon for dataflyten.       Metoden leses returnerer null bare etter nådde slutten på dataflyten. Ellers leser lese alltid minst én byte fra dataflyten før den returnerer. Hvis ingen data er tilgjengelig fra flyten når et kall til lese, blokkerer metoden før minst én byte med data som kan returneres. Implementering er fri til å returnere færre byte enn forespurte selv om slutten på dataflyten ikke er nådd.       Bruk <xref:System.IO.BinaryReader>for lesing primitive datatyper.</xref:System.IO.BinaryReader>       Ikke Avbryt en tråd som utfører en operasjon. Selv om programmet kan vises til kjøres når tråden er blokkert, kan avbruddet redusere programmets ytelse og pålitelighet.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example reads the contents from a <xref:System.IO.FileStream> and writes it into another <xref:System.IO.FileStream>.  \n  \n [!code-vb[FSRead#1](~/add/codesnippet/visualbasic/m-system.io.filestream.r_1_1.vb)]\n [!code-cs[FSRead#1](~/add/codesnippet/csharp/m-system.io.filestream.r_1_1.cs)]"
  syntax:
    content: public override int Read (byte[] array, int offset, int count);
    parameters:
    - id: array
      type: System.Byte[]
      description: "Låse denne metoden, inneholder den angitte Bytematrisen med verdiene mellom `offset` og (`offset`  +  `count` - 1`)` erstattet med byte lest fra den gjeldende kilden."
    - id: offset
      type: System.Int32
      description: "Forskyvningen i byte i `array` på skrivebeskyttede byte skal plasseres."
    - id: count
      type: System.Int32
      description: "Maksimalt antall byte som skal leses."
    return:
      type: System.Int32
      description: "Totalt antall byte som leses, til bufferen. Dette kan være mindre enn antall byte som ble forespurt hvis som antall byte som er tilgjengelige, eller null hvis slutten på dataflyten er nådd."
  overload: System.IO.FileStream.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>count</code> er negativt."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke lesing."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>og <code>count</code> beskriver en ugyldig område i <code>array</code>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoder ble kalt etter dataflyten er lukket."
  platform:
  - net462
- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: FileStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.FileStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Asynkron leser en sekvens med byte fra den gjeldende dataflyten flytter posisjonen i dataflyten på antall byte som leses, og overvåker avbryte forespørsler."
  remarks: "Metoden ReadAsync lar deg utføre ressursen mye filoperasjoner uten blokkerer hovedtråden. Denne ytelse vurderingen er spesielt viktig i en [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] app eller [!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)] appen der en tidkrevende dataflyten operasjon kan blokker UI-tråden og appen vises som om det ikke fungerer. Metodene asynkron brukes sammen med den `async` og `await` nøkkelord i Visual Basic og C#.       Bruk av <xref:System.IO.FileStream.CanRead%2A>til å fastslå om den gjeldende forekomsten, støtter lesing.</xref:System.IO.FileStream.CanRead%2A>       Hvis operasjonen er avbrutt før den er fullført, returnerte oppgaven inneholder den <xref:System.Threading.Tasks.TaskStatus>verdien den <xref:System.Threading.Tasks.Task.Status%2A>egenskapen.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus> Hvis håndtaket for filen er fjernet, returnerte oppgaven inneholder den <xref:System.ObjectDisposedException>unntak i den <xref:System.Threading.Tasks.Task.Exception%2A>egenskapen.</xref:System.Threading.Tasks.Task.Exception%2A> </xref:System.ObjectDisposedException>"
  example:
  - "The following example shows how to read from a file asynchronously.  \n  \n [!code-vb[Asynchronous_File_IO_async#4](~/add/codesnippet/visualbasic/9c5ba435-5f90-4f89-b415-_1.vb)]\n [!code-cs[Asynchronous_File_IO_async#4](~/add/codesnippet/csharp/9c5ba435-5f90-4f89-b415-_1.cs)]"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Buffer til å skrive inn dataene."
    - id: offset
      type: System.Int32
      description: "Forskyvningen i byte i `buffer` som til å skrive data fra dataflyten."
    - id: count
      type: System.Int32
      description: "Maksimalt antall byte som skal leses."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Tokenet, for å overvåke for å avbryte forespørsler."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "En oppgave som representerer den asynkrone leseoperasjon. Verdien for den <code> TResult </code> parameteren inneholder totalt antall byte som leses, til bufferen. Verdien som resultat kan være mindre enn antall byte som ble forespurt om antall byte som er tilgjengelig for øyeblikket er mindre enn det forespurte antallet eller det kan være 0 (null) Hvis slutten på dataflyten er nådd."
  overload: System.IO.FileStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>count</code> er negativt."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Summen av <code> offset </code> og <code> count </code> er større enn bufferlengden."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke lesing."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten har blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Dataflyten er i bruk av en tidligere leseoperasjon."
  platform:
  - net462
- uid: System.IO.FileStream.ReadByte
  id: ReadByte
  parent: System.IO.FileStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: FileStream.ReadByte()
  fullName: System.IO.FileStream.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Leser en byte fra filen, og flytter byten skrivebeskyttede posisjon."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.ReadByte%2A>.</xref:System.IO.Stream.ReadByte%2A>      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanRead%2A>til å fastslå om den gjeldende forekomsten, støtter lesing.</xref:System.IO.FileStream.CanRead%2A> Hvis du vil ha mer informasjon, kan du se <xref:System.IO.Stream.CanRead%2A>.</xref:System.IO.Stream.CanRead%2A>"
  example:
  - "The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \n  \n [!code-vb[System.IO.FileStream1#1](~/add/codesnippet/visualbasic/m-system.io.filestream.r_0_1.vb)]\n [!code-cs[System.IO.FileStream1#1](~/add/codesnippet/csharp/m-system.io.filestream.r_0_1.cs)]\n [!code-cpp[System.IO.FileStream1#1](~/add/codesnippet/cpp/m-system.io.filestream.r_0_1.cpp)]"
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "Byte, endres til en <xref:System.Int32>, eller -1 Hvis slutten på dataflyten er nådd.</xref:System.Int32>"
  overload: System.IO.FileStream.ReadByte*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Gjeldende Dataflyten støtter ikke lesing."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Gjeldende dataflyten er lukket."
  platform:
  - net462
- uid: System.IO.FileStream.SafeFileHandle
  id: SafeFileHandle
  parent: System.IO.FileStream
  langs:
  - csharp
  name: SafeFileHandle
  nameWithType: FileStream.SafeFileHandle
  fullName: System.IO.FileStream.SafeFileHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Henter en <xref href=&quot;Microsoft.Win32.SafeHandles.SafeFileHandle&quot;> </xref> objektet som representerer operativsystemet filreferanse for filen som gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet innkapsler."
  remarks: "Egenskapen SafeFileHandle Hurtigbuffertømminger dataflyten automatisk og angir posisjonen i dataflyten til 0.  Dette gjør at filen flyttes eller dataflyten posisjonen tilbakestilling av en annen dataflyten ved hjelp av SafeFileHandle som returneres av denne egenskapen."
  syntax:
    content: public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeFileHandle
      description: "Et objekt som representerer operativsystemet filreferanse for filen som gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet innkapsler."
  overload: System.IO.FileStream.SafeFileHandle*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: FileStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.FileStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Angir gjeldende posisjon for denne dataflyten for den angitte verdien."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.</xref:System.IO.Stream.Seek%2A?displayProperty=fullName>      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName>til å fastslå om den gjeldende forekomsten, støtter søking.</xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> Hvis du vil ha mer informasjon, kan du se <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>.</xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>       Du kan søke hvor som helst utover meldingens lengde dataflyten. Når du søker etter utover meldingens lengde filen, øker filstørrelsen. Windows NT og nyere versjoner er data som er lagt til slutten av filen satt til null. Data som er lagt til slutten av filen er ikke satt til null, noe som betyr at slettede data er synlig for dataflyten i Windows 98 eller tidligere versjoner.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \n  \n [!code-vb[System.IO.FileStream1#1](~/add/codesnippet/visualbasic/m-system.io.filestream.s_1_1.vb)]\n [!code-cs[System.IO.FileStream1#1](~/add/codesnippet/csharp/m-system.io.filestream.s_1_1.cs)]\n [!code-cpp[System.IO.FileStream1#1](~/add/codesnippet/cpp/m-system.io.filestream.s_1_1.cpp)]  \n  \n The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <xref:System.IO.SeekOrigin> values with the Seek method.  \n  \n [!code-vb[System.IO.FileStream.Seek#1](~/add/codesnippet/visualbasic/m-system.io.filestream.s_1_2.vb)]\n [!code-cs[System.IO.FileStream.Seek#1](~/add/codesnippet/csharp/m-system.io.filestream.s_1_2.cs)]"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Punktet forhold til `origin` som starter søking."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Angir starten, slutten eller gjeldende posisjon som et referansepunkt for `offset`, ved hjelp av en verdi av typen <xref:System.IO.SeekOrigin>.</xref:System.IO.SeekOrigin>"
    return:
      type: System.Int64
      description: "Den nye posisjonen i dataflyten."
  overload: System.IO.FileStream.Seek*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke søking, for eksempel hvis den <xref uid=&quot;langword_csharp_FileStream&quot; name=&quot;FileStream&quot; href=&quot;&quot;> </xref> konstruert fra en datakanal eller konsollen utdata."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Søking forsøkes før starten av dataflyten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoder ble kalt etter dataflyten er lukket."
  platform:
  - net462
- uid: System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)
  id: SetAccessControl(System.Security.AccessControl.FileSecurity)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: SetAccessControl(FileSecurity)
  nameWithType: FileStream.SetAccessControl(FileSecurity)
  fullName: System.IO.FileStream.SetAccessControl(FileSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gjelder listen (ACL) tilgangskontrolloppføringer som beskrevet i en <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref> objekt i filen som er beskrevet i gjeldende <xref href=&quot;System.IO.FileStream&quot;> </xref> objektet."
  remarks: "Mens den <xref:System.IO.FileStream>klassen og SetAccessControl kan brukes på en eksisterende fil, bør du vurdere å bruke den <xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName>metoden slik det er enklere å bruke.</xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName> </xref:System.IO.FileStream>       Metoden SetAccessControl gjelder tilgangskontrolloppføringer som listen (ACL) til en fil som representerer noninherited ACL-listen.      > [!CAUTION] > For tilgangskontrolliste (ACL) som er angitt for den `fileSecurity` parameteren erstatter eksisterende Tilgangskontrollisten for filen. Hvis du vil legge til tillatelser for en ny bruker, kan du bruke den <xref:System.IO.FileStream.GetAccessControl%2A>metode for å hente eksisterende Tilgangskontrollisten, endre den og deretter bruke SetAccessControl til å bruke den tilbake til filen.</xref:System.IO.FileStream.GetAccessControl%2A>       En Tilgangskontrolliste beskriver enkeltpersoner og/eller grupper som har eller har ikke tilgangsrettigheter, med bestemte handlinger på den angitte filen. Hvis du vil ha mer informasjon, se [slik: Legg til eller fjern Access Control listeoppføringer](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);
    parameters:
    - id: fileSecurity
      type: System.Security.AccessControl.FileSecurity
      description: "Et objekt som beskriver en oppføring i tilgangskontrolliste (ACL) til å bruke den gjeldende filen."
  overload: System.IO.FileStream.SetAccessControl*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Filen er lukket."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileSecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Kan ikke filen, eller det kan ikke endres."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Gjeldende prosess har ikke tilgang til å åpne filen."
  platform:
  - net462
- uid: System.IO.FileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: FileStream.SetLength(Int64)
  fullName: System.IO.FileStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Angir lengden på denne dataflyten for den angitte verdien."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.SetLength%2A>.</xref:System.IO.Stream.SetLength%2A>       Hvis den angitte verdien er mindre enn gjeldende lengde på dataflyten, blir det avrundet dataflyten. Hvis gjeldende posisjon er større enn den nye lengden i dette tilfellet er gjeldende posisjon flyttes til den siste byten av dataflyten. Hvis den angitte verdien er større enn gjeldende lengde på dataflyten, dataflyten er utvidet og gjeldende posisjon uendret. Hvis dataflyten er utvidet, er innholdet i dataflyten mellom gamle og nye lengden definert.       En dataflyt må støtte både skrive- og søking `SetLength` skal fungere.      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanWrite%2A>til å fastslå om den gjeldende forekomsten, støtter skriving, og <xref:System.IO.FileStream.CanSeek%2A>til å fastslå om søking støttes.</xref:System.IO.FileStream.CanSeek%2A> </xref:System.IO.FileStream.CanWrite%2A> Hvis du vil ha mer informasjon, se <xref:System.IO.Stream.CanWrite%2A>og <xref:System.IO.Stream.CanSeek%2A>.</xref:System.IO.Stream.CanSeek%2A> </xref:System.IO.Stream.CanWrite%2A>       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Den nye lengden på dataflyten."
  overload: System.IO.FileStream.SetLength*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke både skrive- og søking."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Forsøkte å angi den <code> value </code> parameter til mindre enn 0."
  platform:
  - net462
- uid: System.IO.FileStream.Unlock(System.Int64,System.Int64)
  id: Unlock(System.Int64,System.Int64)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Unlock(Int64,Int64)
  nameWithType: FileStream.Unlock(Int64,Int64)
  fullName: System.IO.FileStream.Unlock(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Gir tilgang av andre prosesser til hele eller deler av en fil som tidligere var låst."
  remarks: "En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file, and then unlock the specified part of the file . Run the program simultaneously in different command windows and investigate using the different console input options.  \n  \n [!code-cs[System.IO.FileStream3#1](~/add/codesnippet/csharp/m-system.io.filestream.u_1.cs)]\n [!code-cpp[System.IO.FileStream3#1](~/add/codesnippet/cpp/m-system.io.filestream.u_1.cpp)]\n [!code-vb[System.IO.FileStream3#1](~/add/codesnippet/visualbasic/m-system.io.filestream.u_1.vb)]"
  syntax:
    content: public virtual void Unlock (long position, long length);
    parameters:
    - id: position
      type: System.Int64
      description: "Begynnelsen på området til å låse opp."
    - id: length
      type: System.Int64
      description: "Området til låses."
  overload: System.IO.FileStream.Unlock*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code>eller <code>length</code> er negativt."
  platform:
  - net462
- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: FileStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.FileStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Skriver en blokk med byte til filstrøm."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.Write%2A>.</xref:System.IO.Stream.Write%2A>       Den `offset` parameteren angir forskyvningen for byte i `array` (bufferen index) vil begynne å kopiere, og `count` parameteren angir antall byte som skrives til dataflyten. Hvis Skriveoperasjonen lykkes, Avansert gjeldende posisjon for dataflyten på antall byte skrevet. Hvis det oppstår et unntak, endres ikke gjeldende posisjon for dataflyten.      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanWrite%2A>til å fastslå om den gjeldende forekomsten, støtter skriving.</xref:System.IO.FileStream.CanWrite%2A> Hvis du vil ha mer informasjon, kan du se <xref:System.IO.Stream.CanWrite%2A>.</xref:System.IO.Stream.CanWrite%2A>       Ikke Avbryt en tråd som utfører en skriveoperasjon. Selv om programmet kan vises til kjøres når tråden er blokkert, kan avbruddet redusere programmets ytelse og pålitelighet.       En liste over vanlig og directory operasjoner, kan du se [vanlige oppgaver i i/u](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \n  \n [!code-cs[System.IO.FileStream3#3](~/add/codesnippet/csharp/m-system.io.filestream.w_1_1.cs)]\n [!code-cpp[System.IO.FileStream3#3](~/add/codesnippet/cpp/m-system.io.filestream.w_1_1.cpp)]\n [!code-vb[System.IO.FileStream3#3](~/add/codesnippet/visualbasic/m-system.io.filestream.w_1_1.vb)]"
  syntax:
    content: public override void Write (byte[] array, int offset, int count);
    parameters:
    - id: array
      type: System.Byte[]
      description: "Bufferen som inneholder data å skrive til dataflyten."
    - id: offset
      type: System.Int32
      description: "Forskyvning nullbasert byte i `array` som du vil kopiere byte til dataflyten."
    - id: count
      type: System.Int32
      description: "Maksimalt antall byte som skal skrive."
  overload: System.IO.FileStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>og <code>count</code> beskriver en ugyldig område i <code>array</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>count</code> er negativt."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "An I/O error occurred.  \n  \n \\- or -  \n  \n Another thread may have caused an unexpected change in the position of the operating system's file handle."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten er lukket."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den gjeldende forekomsten Dataflyten støtter ikke skriving."
  platform:
  - net462
- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: FileStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.FileStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Asynkront skriver en sekvens med byte til gjeldende strøm flytter gjeldende plassering i denne dataflyten på antall byte skrevet og overvåker avbryte forespørsler."
  remarks: "Metoden WriteAsync lar deg utføre ressursen mye filoperasjoner uten blokkerer hovedtråden. Denne ytelse vurderingen er spesielt viktig i en [!INCLUDE[win8_appname_long](~/add/includes/win8-appname-long-md.md)] app eller [!INCLUDE[desktop_appname](~/add/includes/desktop-appname-md.md)] appen der en tidkrevende dataflyten operasjon kan blokker UI-tråden og appen vises som om det ikke fungerer. Metodene asynkron brukes sammen med den `async` og `await` nøkkelord i Visual Basic og C#.       Bruk av <xref:System.IO.FileStream.CanWrite%2A>til å fastslå om den gjeldende forekomsten, støtter lesing.</xref:System.IO.FileStream.CanWrite%2A>       Hvis operasjonen er avbrutt før den er fullført, returnerte oppgaven inneholder den <xref:System.Threading.Tasks.TaskStatus>verdien den <xref:System.Threading.Tasks.Task.Status%2A>egenskapen.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus> Hvis håndtaket for filen er fjernet, returnerte oppgaven inneholder den <xref:System.ObjectDisposedException>unntak i den <xref:System.Threading.Tasks.Task.Exception%2A>egenskapen.</xref:System.Threading.Tasks.Task.Exception%2A> </xref:System.ObjectDisposedException>"
  example:
  - "The following example shows how to write asynchronously to a file.  \n  \n [!code-vb[Asynchronous_File_IO_async#3](~/add/codesnippet/visualbasic/7726d527-d678-42ba-9864-_1.vb)]\n [!code-cs[Asynchronous_File_IO_async#3](~/add/codesnippet/csharp/7726d527-d678-42ba-9864-_1.cs)]"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Buffer til å skrive data fra."
    - id: offset
      type: System.Int32
      description: "Forskyvning nullbasert byte i `buffer` som du vil kopiere byte til dataflyten."
    - id: count
      type: System.Int32
      description: "Maksimalt antall byte som skal skrive."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Tokenet, for å overvåke for å avbryte forespørsler."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone Skriveoperasjonen."
  overload: System.IO.FileStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>eller <code>count</code> er negativt."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Summen av <code> offset </code> og <code> count </code> er større enn bufferlengden."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke skriving."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten har blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Dataflyten er i bruk av en tidligere skriveoperasjon."
  platform:
  - net462
- uid: System.IO.FileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.FileStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: FileStream.WriteByte(Byte)
  fullName: System.IO.FileStream.WriteByte(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Skriver en byte til gjeldende plassering i filstrøm."
  remarks: "Denne metoden overstyrer <xref:System.IO.Stream.WriteByte%2A>.</xref:System.IO.Stream.WriteByte%2A>       Bruk `WriteByte` å skrive en byte til en `FileStream` effektivt. Hvis dataflyten er lukket eller ikke skrivbar, vil bli utløst et unntak.      > [!NOTE] > Bruk av <xref:System.IO.FileStream.CanWrite%2A>til å fastslå om den gjeldende forekomsten, støtter skriving.</xref:System.IO.FileStream.CanWrite%2A> Hvis du vil ha mer informasjon, kan du se <xref:System.IO.Stream.CanWrite%2A>.</xref:System.IO.Stream.CanWrite%2A>"
  example:
  - "The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \n  \n [!code-vb[System.IO.FileStream1#1](~/add/codesnippet/visualbasic/m-system.io.filestream.w_0_1.vb)]\n [!code-cs[System.IO.FileStream1#1](~/add/codesnippet/csharp/m-system.io.filestream.w_0_1.cs)]\n [!code-cpp[System.IO.FileStream1#1](~/add/codesnippet/cpp/m-system.io.filestream.w_0_1.cpp)]"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: "En byte til å skrive til dataflyten."
  overload: System.IO.FileStream.WriteByte*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dataflyten er lukket."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Dataflyten støtter ikke skriving."
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.IO.EndOfStreamException
  isExternal: true
  name: System.IO.EndOfStreamException
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(SafeFileHandle,FileAccess)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess)
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeFileHandle
  nameWithType: SafeFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(IntPtr,FileAccess)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode)
  nameWithType: FileStream.FileStream(String,FileMode)
  fullName: System.IO.FileStream.FileStream(String,FileMode)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(SafeFileHandle,FileAccess,Int32)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess,Int32)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(IntPtr,FileAccess,Boolean)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileAccess)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess)
- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
  nameWithType: FileStream.FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(SafeFileHandle,FileAccess,Int32,Boolean)
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(IntPtr,FileAccess,Boolean,Int32)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32)
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileAccess,FileShare)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
  nameWithType: FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(IntPtr,FileAccess,Boolean,Int32,Boolean)
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32)
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,Boolean)
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
  nameWithType: FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileAccess,FileShare,Int32,FileOptions)
- uid: System.IO.FileOptions
  parent: System.IO
  isExternal: false
  name: FileOptions
  nameWithType: FileOptions
  fullName: System.IO.FileOptions
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
  nameWithType: FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions)
- uid: System.Security.AccessControl.FileSystemRights
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSystemRights
  nameWithType: FileSystemRights
  fullName: System.Security.AccessControl.FileSystemRights
- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
  nameWithType: FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
  fullName: System.IO.FileStream.FileStream(String,FileMode,FileSystemRights,FileShare,Int32,FileOptions,FileSecurity)
- uid: System.Security.AccessControl.FileSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
- uid: System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.FileStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: FileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.FileStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.FileStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: FileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.FileStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IO.FileStream.CanRead
  parent: System.IO.FileStream
  isExternal: false
  name: CanRead
  nameWithType: FileStream.CanRead
  fullName: System.IO.FileStream.CanRead
- uid: System.IO.FileStream.CanSeek
  parent: System.IO.FileStream
  isExternal: false
  name: CanSeek
  nameWithType: FileStream.CanSeek
  fullName: System.IO.FileStream.CanSeek
- uid: System.IO.FileStream.CanWrite
  parent: System.IO.FileStream
  isExternal: false
  name: CanWrite
  nameWithType: FileStream.CanWrite
  fullName: System.IO.FileStream.CanWrite
- uid: System.IO.FileStream.Dispose(System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileStream.Dispose(Boolean)
  fullName: System.IO.FileStream.Dispose(Boolean)
- uid: System.IO.FileStream.EndRead(System.IAsyncResult)
  parent: System.IO.FileStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: FileStream.EndRead(IAsyncResult)
  fullName: System.IO.FileStream.EndRead(IAsyncResult)
- uid: System.IO.FileStream.EndWrite(System.IAsyncResult)
  parent: System.IO.FileStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: FileStream.EndWrite(IAsyncResult)
  fullName: System.IO.FileStream.EndWrite(IAsyncResult)
- uid: System.IO.FileStream.Finalize
  parent: System.IO.FileStream
  isExternal: false
  name: Finalize()
  nameWithType: FileStream.Finalize()
  fullName: System.IO.FileStream.Finalize()
- uid: System.IO.FileStream.Flush
  parent: System.IO.FileStream
  isExternal: false
  name: Flush()
  nameWithType: FileStream.Flush()
  fullName: System.IO.FileStream.Flush()
- uid: System.IO.FileStream.Flush(System.Boolean)
  parent: System.IO.FileStream
  isExternal: false
  name: Flush(Boolean)
  nameWithType: FileStream.Flush(Boolean)
  fullName: System.IO.FileStream.Flush(Boolean)
- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.FileStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: FileStream.FlushAsync(CancellationToken)
  fullName: System.IO.FileStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.FileStream.GetAccessControl
  parent: System.IO.FileStream
  isExternal: false
  name: GetAccessControl()
  nameWithType: FileStream.GetAccessControl()
  fullName: System.IO.FileStream.GetAccessControl()
- uid: System.IO.FileStream.Handle
  parent: System.IO.FileStream
  isExternal: false
  name: Handle
  nameWithType: FileStream.Handle
  fullName: System.IO.FileStream.Handle
- uid: System.IO.FileStream.IsAsync
  parent: System.IO.FileStream
  isExternal: false
  name: IsAsync
  nameWithType: FileStream.IsAsync
  fullName: System.IO.FileStream.IsAsync
- uid: System.IO.FileStream.Length
  parent: System.IO.FileStream
  isExternal: false
  name: Length
  nameWithType: FileStream.Length
  fullName: System.IO.FileStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.FileStream.Lock(System.Int64,System.Int64)
  parent: System.IO.FileStream
  isExternal: false
  name: Lock(Int64,Int64)
  nameWithType: FileStream.Lock(Int64,Int64)
  fullName: System.IO.FileStream.Lock(Int64,Int64)
- uid: System.IO.FileStream.Name
  parent: System.IO.FileStream
  isExternal: false
  name: Name
  nameWithType: FileStream.Name
  fullName: System.IO.FileStream.Name
- uid: System.IO.FileStream.Position
  parent: System.IO.FileStream
  isExternal: false
  name: Position
  nameWithType: FileStream.Position
  fullName: System.IO.FileStream.Position
- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: FileStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.FileStream.Read(Byte[],Int32,Int32)
- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: FileStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.FileStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.FileStream.ReadByte
  parent: System.IO.FileStream
  isExternal: false
  name: ReadByte()
  nameWithType: FileStream.ReadByte()
  fullName: System.IO.FileStream.ReadByte()
- uid: System.IO.FileStream.SafeFileHandle
  parent: System.IO.FileStream
  isExternal: false
  name: SafeFileHandle
  nameWithType: FileStream.SafeFileHandle
  fullName: System.IO.FileStream.SafeFileHandle
- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.FileStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: FileStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.FileStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)
  parent: System.IO.FileStream
  isExternal: false
  name: SetAccessControl(FileSecurity)
  nameWithType: FileStream.SetAccessControl(FileSecurity)
  fullName: System.IO.FileStream.SetAccessControl(FileSecurity)
- uid: System.IO.FileStream.SetLength(System.Int64)
  parent: System.IO.FileStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: FileStream.SetLength(Int64)
  fullName: System.IO.FileStream.SetLength(Int64)
- uid: System.IO.FileStream.Unlock(System.Int64,System.Int64)
  parent: System.IO.FileStream
  isExternal: false
  name: Unlock(Int64,Int64)
  nameWithType: FileStream.Unlock(Int64,Int64)
  fullName: System.IO.FileStream.Unlock(Int64,Int64)
- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.FileStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: FileStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.FileStream.Write(Byte[],Int32,Int32)
- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.FileStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: FileStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.FileStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.IO.FileStream.WriteByte(System.Byte)
  parent: System.IO.FileStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: FileStream.WriteByte(Byte)
  fullName: System.IO.FileStream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.FileStream.#ctor*
  parent: System.IO.FileStream
  isExternal: false
  name: FileStream
  nameWithType: FileStream.FileStream
- uid: System.IO.FileStream.BeginRead*
  parent: System.IO.FileStream
  isExternal: false
  name: BeginRead
  nameWithType: FileStream.BeginRead
- uid: System.IO.FileStream.BeginWrite*
  parent: System.IO.FileStream
  isExternal: false
  name: BeginWrite
  nameWithType: FileStream.BeginWrite
- uid: System.IO.FileStream.CanRead*
  parent: System.IO.FileStream
  isExternal: false
  name: CanRead
  nameWithType: FileStream.CanRead
- uid: System.IO.FileStream.CanSeek*
  parent: System.IO.FileStream
  isExternal: false
  name: CanSeek
  nameWithType: FileStream.CanSeek
- uid: System.IO.FileStream.CanWrite*
  parent: System.IO.FileStream
  isExternal: false
  name: CanWrite
  nameWithType: FileStream.CanWrite
- uid: System.IO.FileStream.Dispose*
  parent: System.IO.FileStream
  isExternal: false
  name: Dispose
  nameWithType: FileStream.Dispose
- uid: System.IO.FileStream.EndRead*
  parent: System.IO.FileStream
  isExternal: false
  name: EndRead
  nameWithType: FileStream.EndRead
- uid: System.IO.FileStream.EndWrite*
  parent: System.IO.FileStream
  isExternal: false
  name: EndWrite
  nameWithType: FileStream.EndWrite
- uid: System.IO.FileStream.Finalize*
  parent: System.IO.FileStream
  isExternal: false
  name: Finalize
  nameWithType: FileStream.Finalize
- uid: System.IO.FileStream.Flush*
  parent: System.IO.FileStream
  isExternal: false
  name: Flush
  nameWithType: FileStream.Flush
- uid: System.IO.FileStream.FlushAsync*
  parent: System.IO.FileStream
  isExternal: false
  name: FlushAsync
  nameWithType: FileStream.FlushAsync
- uid: System.IO.FileStream.GetAccessControl*
  parent: System.IO.FileStream
  isExternal: false
  name: GetAccessControl
  nameWithType: FileStream.GetAccessControl
- uid: System.IO.FileStream.Handle*
  parent: System.IO.FileStream
  isExternal: false
  name: Handle
  nameWithType: FileStream.Handle
- uid: System.IO.FileStream.IsAsync*
  parent: System.IO.FileStream
  isExternal: false
  name: IsAsync
  nameWithType: FileStream.IsAsync
- uid: System.IO.FileStream.Length*
  parent: System.IO.FileStream
  isExternal: false
  name: Length
  nameWithType: FileStream.Length
- uid: System.IO.FileStream.Lock*
  parent: System.IO.FileStream
  isExternal: false
  name: Lock
  nameWithType: FileStream.Lock
- uid: System.IO.FileStream.Name*
  parent: System.IO.FileStream
  isExternal: false
  name: Name
  nameWithType: FileStream.Name
- uid: System.IO.FileStream.Position*
  parent: System.IO.FileStream
  isExternal: false
  name: Position
  nameWithType: FileStream.Position
- uid: System.IO.FileStream.Read*
  parent: System.IO.FileStream
  isExternal: false
  name: Read
  nameWithType: FileStream.Read
- uid: System.IO.FileStream.ReadAsync*
  parent: System.IO.FileStream
  isExternal: false
  name: ReadAsync
  nameWithType: FileStream.ReadAsync
- uid: System.IO.FileStream.ReadByte*
  parent: System.IO.FileStream
  isExternal: false
  name: ReadByte
  nameWithType: FileStream.ReadByte
- uid: System.IO.FileStream.SafeFileHandle*
  parent: System.IO.FileStream
  isExternal: false
  name: SafeFileHandle
  nameWithType: FileStream.SafeFileHandle
- uid: System.IO.FileStream.Seek*
  parent: System.IO.FileStream
  isExternal: false
  name: Seek
  nameWithType: FileStream.Seek
- uid: System.IO.FileStream.SetAccessControl*
  parent: System.IO.FileStream
  isExternal: false
  name: SetAccessControl
  nameWithType: FileStream.SetAccessControl
- uid: System.IO.FileStream.SetLength*
  parent: System.IO.FileStream
  isExternal: false
  name: SetLength
  nameWithType: FileStream.SetLength
- uid: System.IO.FileStream.Unlock*
  parent: System.IO.FileStream
  isExternal: false
  name: Unlock
  nameWithType: FileStream.Unlock
- uid: System.IO.FileStream.Write*
  parent: System.IO.FileStream
  isExternal: false
  name: Write
  nameWithType: FileStream.Write
- uid: System.IO.FileStream.WriteAsync*
  parent: System.IO.FileStream
  isExternal: false
  name: WriteAsync
  nameWithType: FileStream.WriteAsync
- uid: System.IO.FileStream.WriteByte*
  parent: System.IO.FileStream
  isExternal: false
  name: WriteByte
  nameWithType: FileStream.WriteByte
