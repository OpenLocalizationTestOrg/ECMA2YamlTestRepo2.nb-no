### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  summary: "Gir <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> objekter som representerer roten nøklene i Windows-registret, og <xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;> </xref> metoder for å få tilgang til nøkkel/verdi-par."
  remarks: "Denne klassen gir settet med standard roten nøkler ble funnet i registeret på datamaskiner som kjører Windows. Registeret er en funksjon for informasjon om programmer, brukerne og standard systeminnstillinger for lagring. Programmer kan for eksempel bruke registeret til å lagre informasjon som skal beholdes når programmet lukkes, og få tilgang til den samme informasjonen når programmet lastes inn på nytt. Du kan for eksempel lagre innstillinger, skjermen plasseringer eller størrelsen på vinduet. Du kan kontrollere dataene for hver bruker ved å lagre informasjonen på et annet sted i registret.       Grunntallet eller rot <xref:Microsoft.Win32.RegistryKey>forekomster som vises av den `Registry` klassen men markerer grunnleggende mekanisme for undernøkler og verdier i registret.</xref:Microsoft.Win32.RegistryKey> Alle nøkler er skrivebeskyttet fordi registret er avhengig av den tilhørende forekomsten. Nøkler som vises av `Registry` er: <xref:Microsoft.Win32.Registry.CurrentUser>inneholder informasjon om brukerinnstillinger.</xref:Microsoft.Win32.Registry.CurrentUser>       <xref:Microsoft.Win32.Registry.LocalMachine>Lagrer konfigurasjonsinformasjon for den lokale maskinen.</xref:Microsoft.Win32.Registry.LocalMachine>       <xref:Microsoft.Win32.Registry.ClassesRoot>Lagrer informasjon om typer (og klasser) og tilhørende egenskaper.</xref:Microsoft.Win32.Registry.ClassesRoot>       <xref:Microsoft.Win32.Registry.Users>Inneholder informasjon om brukeren standardkonfigurasjonen.</xref:Microsoft.Win32.Registry.Users>       <xref:Microsoft.Win32.Registry.PerformanceData>Lagrer ytelsesinformasjon om programvarekomponenter.</xref:Microsoft.Win32.Registry.PerformanceData>       <xref:Microsoft.Win32.Registry.CurrentConfig>Lagrer ikke-brukerspesifikke maskinvareinformasjon.</xref:Microsoft.Win32.Registry.CurrentConfig>       <xref:Microsoft.Win32.Registry.DynData>Lagrer dynamiske data.</xref:Microsoft.Win32.Registry.DynData>       Når du har identifisert root-nøkkelen som du vil lagre/hente informasjon fra registret, kan du bruke den <xref:Microsoft.Win32.RegistryKey>klasse for å legge til eller fjerne undernøkler og endre verdiene for en gitt nøkkel.</xref:Microsoft.Win32.RegistryKey>       Maskinvareenheter sett informasjon i registret automatisk ved hjelp av Plug and Play-grensesnittet. Programvare for installasjon av enhetsdrivere sett informasjon i registret ved å skrive til standard APIer.      ## Statiske metoder for å komme og innstillingen verdier i i .NET Framework, versjon 2.0, klassen registret inneholder `static` <xref:Microsoft.Win32.Registry.GetValue%2A>og <xref:Microsoft.Win32.Registry.SetValue%2A>metoder for angivelse og henting av verdiene fra registernøklene.</xref:Microsoft.Win32.Registry.SetValue%2A> </xref:Microsoft.Win32.Registry.GetValue%2A> Disse metodene åpne og lukk registret nøkler hver gang de brukes, slik at de ikke utføre i tillegg til samme metodene i den <xref:Microsoft.Win32.RegistryKey>klassen når du kobler til et stort antall verdier.</xref:Microsoft.Win32.RegistryKey>       Den <xref:Microsoft.Win32.RegistryKey>klassen gir deg også metoder som gjør det mulig å angi Windows access control sikkerheten for registernøkler til å teste datatypen for en verdi før du henter den og slette nøkler.</xref:Microsoft.Win32.RegistryKey>"
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_1.vb)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_2.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_2.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Definerer typer (eller klasser) for dokumenter og egenskaper som er knyttet til disse typene. Dette feltet leser Windows base registernøkkelen HKEY_CLASSES_ROOT."
  remarks: "Både konvensjonelt programmer og OLE-programmer kan du bruke data som er lagret under denne nøkkelen. Denne nøkkelen gir deg også bakoverkompatibilitet med Windows 3.1 registreringsdatabasen ved å lagre informasjonen for DDE og OLE. Filvisningsprogrammer og grensesnittet utvidelser lagrer identifikatorer OLE klassen i denne nøkkelen, og behandling av servere som er registrert i denne nøkkelen."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-vb[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_4_1.vb)]\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_4_1.cpp)]\n [!code-cs[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_4_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder konfigurasjonsinformasjon som er knyttet til maskinvaren som er spesifikk for brukeren. Dette feltet leser Windows base registernøkkelen HKEY_CURRENT_CONFIG."
  remarks: "Dette medlemmet er tilordnet til en undernøkkel i <xref:Microsoft.Win32.Registry.LocalMachine>.</xref:Microsoft.Win32.Registry.LocalMachine>       Et eksempel på bruk av dette medlemmet er en applikasjon med et annet servernavn for dataene avhengig av om systemet er koblet til et nettverk."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_1_1.cpp)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_1_1.vb)]\n [!code-cs[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_1_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder informasjon om de gjeldende brukerinnstillingene. Dette feltet leser Windows base registernøkkelen HKEY_CURRENT_USER"
  remarks: "Informasjon som er lagret i denne nøkkelen inneholder innstillingene for miljøvariabler og data om programmet grupper, farger, skrivere, nettverkstilkoblinger og programinnstillinger. Denne nøkkelen gjør det enklere å etablere innstillinger for den gjeldende brukeren. Denne nøkkelen lagre programvareleverandører de gjeldende innstillingene for brukerspesifikke som skal brukes i sine egne programmer. Microsoft, for eksempel oppretter HKEY_CURRENT_USER\\Software\\Microsoft nøkkelen for de-programmene å bruke med hver programmet som oppretter en egen undernøkkel under nøkkelen Microsoft."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_6_1.cpp)]\n [!code-cs[Classic Registry.CurrentUser Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_6_1.cs)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_6_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder dynamiske registret data. Dette feltet leser Windows base registernøkkelen HKEY_DYN_DATA."
  remarks: "Windows 98/Windows meg registeret støtter både statiske data (som er lagret på disk i registret) og dynamiske dataene (endres regelmessig, for eksempel ytelsesstatistikk). Denne dynamiske dataområdet er mekanisme som tillater at virtuelle enhetsdrivere (VxDer) for å angi sanntidsdata til Win32-programmer som kan kjøre eksternt og lokalt. Det gjør også system-skjermen for å gi ytelsesstatistikk om eksterne Windows 98/Windows meg systemer.       VxDer er begrenset til ytelsesdata. De kan gi data de vil sende ringen 0 ringen 3 effektivt uten legger beslag CPU. Registeret støtter dynamiske data ved å lagre en peker til en funksjon som returnerer en verdi (eller mange verdier). Når spørringer en registerverdier knyttet til en dynamisk nøkkel at funksjonen kalles for å hente den ønskede verdien eller verdiene.      > [!NOTE] > Dynamiske nøkler ble introdusert i Microsoft Windows 95 til å håndtere dynamiske registret data. De støttes bare i Windows 98/Windows."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-vb[Classic Registry.DynData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_3_1.vb)]\n [!code-cs[Classic Registry.DynData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_3_1.cs)]\n [!code-cpp[Classic Registry.DynData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_3_1.cpp)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Operativsystemet støtter ikke dynamisk data. Det vil si at er det ikke Windows 98, Windows 98 Second Edition eller installasjonen (Windows Me)."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Henter verdien som er tilknyttet det angitte navnet på den angitte registernøkkelen. Hvis navnet ikke finnes i den angitte nøkkelen, returnerer en standardverdi som du angir, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> hvis den angitte nøkkelen ikke finnes."
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The GetValue and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_14_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_14_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_14_1.cpp)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "Full registret banen til den nøkkelen, som begynner med en gyldig registret rot, for eksempel &quot;HKEY_CURRENT_USER&quot;."
    - id: valueName
      type: System.String
      description: "Navnet på navn/verdi-paret."
    - id: defaultValue
      type: System.Object
      description: "Verdien som skal returneres hvis `valueName` finnes ikke."
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>Hvis du nøkkelen som er angitt av <code> keyName </code> finnes ikke, ellers verdien som er tilknyttet <code> valueName </code>, eller <code> defaultValue </code> Hvis <code> valueName </code> finnes ikke."
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Brukeren har ikke tillatelse til å lese fra registernøkkel."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Den <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> som inneholder den angitte verdien er merket for sletting."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>begynner ikke med en gyldig registret rot."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder konfigurasjonsdataene for den lokale maskinen. Dette feltet leser Windows base registernøkkelen HKEY_LOCAL_MACHINE."
  remarks: "`LocalMachine`inneholder fem nøkler: maskinvare beskriver den fysiske maskinvaren på datamaskinen, enhetsdrivere måte å bruke dette maskinvare, og tilordninger og relaterte data som er koblet kjernemodus drivere med brukermodus kode. Alle data i denne nøkkelen er opprettet hver gang systemet startes på nytt. Du beskrivelse nøkkelen beskriver faktiske maskinvaren. Du DeviceMap nøkkelen inneholder diverse data i formatene som er spesifikke for bestemte klasser til drivere. Du ResourceMap nøkkelen beskriver hvilke enhetsdrivere Domenekrav som maskinvareressurser. Windows NT-diagnostikk programmet (Winmsdp.exe) kan rapportere om innholdet i et enkelt å lese-skjema.       SAM mappen services-database for sikkerhetsinformasjon for bruker og gruppekontoer og domenene i Windows 2000 Server (SAM er kontoadministratoren sikkerhet, kjent som directory tjenestedatabasen).       Sikkerhet inneholder den lokale sikkerhetspolicyen, for eksempel bestemte rettigheter. Denne nøkkelen brukes bare i delsystemet for Windows 2000-sikkerhet.       Programvare maskinspesifikke programvaren databasen. Denne nøkkelen inneholder data om programvaren installeres på den lokale datamaskinen, sammen med ulike elementer diverse konfigurasjonsdata.       Kontroller systemoppstart, enheten driver innlasting, Windows 2000-tjenester og virkemåten for operativsystemet.       Antallet hvis det finnes lignende data under <xref:Microsoft.Win32.Registry.CurrentUser>og under LocalMachine, dataene i <xref:Microsoft.Win32.Registry.CurrentUser>prioriteres.</xref:Microsoft.Win32.Registry.CurrentUser> </xref:Microsoft.Win32.Registry.CurrentUser> Imidlertid kan verdiene i denne nøkkelen også utvide (stedet erstatte) data i Registry.LocalMachine. Noen elementer (for eksempel enhetsdriveren innlasting av oppføringene) er også meningsløs hvis de oppstår utenfor Registry.LocalMachine."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.LocalMachine Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_0_1.cs)]\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_0_1.cpp)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_0_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder ytelsesinformasjon for programvarekomponentene som. Dette feltet leser Windows base registernøkkelen HKEY_PERFORMANCE_DATA."
  remarks: "Hver programvarekomponent oppretter nøkler for databaseobjektene tellere når den er installert, og skriver tellerdata mens den kjører. Du har tilgang til disse dataene som du vil få tilgang til andre registret data, ved hjelp av den <xref:Microsoft.Win32.RegistryKey>funksjoner.</xref:Microsoft.Win32.RegistryKey>       Men du kan bruke registeret til å samle inn ytelsesdata, lagres dataene ikke i registret-databasen. I stedet tilgang til registret med denne nøkkelen fører til at systemet for å samle inn data fra de riktige systemansvarlige objektet.       Hvis du vil hente ytelsesdata fra det lokale systemet, kan du bruke den <xref:Microsoft.Win32.RegistryKey.GetValue%2A>metode med nøkkelen Registry.PerformanceData.</xref:Microsoft.Win32.RegistryKey.GetValue%2A> Det første kallet åpner nøkkelen (du ikke trenger å åpne nøkkelen først). Må du bruke den <xref:Microsoft.Win32.RegistryKey.Close%2A>metode for å lukke håndtaket for nøkkelen når du er ferdig med å få ytelsesdata.</xref:Microsoft.Win32.RegistryKey.Close%2A> Brukeren kan ikke installere eller fjerne en programvarekomponent mens ytelsesdata er i bruk.       Hvis du vil hente ytelsesdata fra et eksternt system, må du bruke den <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>metode med navnet på det eksterne systemet og nøkkelen Registry.PerformanceData.</xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> Kallet henter en nøkkel som representerer ytelsesdata for det eksterne systemet. Hvis du vil hente dataene, kan du kalle <xref:Microsoft.Win32.RegistryKey.GetValue%2A>ved hjelp av denne nøkkelen, i stedet for nøkkelen Registry.PerformanceData.</xref:Microsoft.Win32.RegistryKey.GetValue%2A>      > [!NOTE] > På Windows Server 2003 en bruker må ha minst tilhøre gruppen brukere av Ytelsesmåler for å få tilgang til undernøkler for denne base nøkkelen."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cs[Classic Registry.PerformanceData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_2_1.cs)]\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_2_1.cpp)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_2_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Angir angitt navn/verdi-par angitt registernøkkel. Hvis den angitte nøkkelen ikke finnes, er den opprettet."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_8_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_8_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_8_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "Full registret banen til den nøkkelen, som begynner med en gyldig registret rot, for eksempel &quot;HKEY_CURRENT_USER&quot;."
    - id: valueName
      type: System.String
      description: "Navnet på navn/verdi-paret."
    - id: value
      type: System.Object
      description: "Verdien som skal lagres."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>begynner ikke med en gyldig registret rot.       - eller - <code>keyName</code> er lengre enn den maksimale tillatte lengden (255 tegn)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> er skrivebeskyttet, og derfor kan ikke skrive til, for eksempel den er en primære noden."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Brukeren har ikke tillatelse til å opprette eller endre registernøkler."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Angir navn/verdi-paret på den angitte registernøkkelen ved hjelp av datatypen angitt registeret. Hvis den angitte nøkkelen ikke finnes, er den opprettet."
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/7747259a-b475-4eec-8a66-_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/7747259a-b475-4eec-8a66-_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/7747259a-b475-4eec-8a66-_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "Full registret banen til den nøkkelen, som begynner med en gyldig registret rot, for eksempel &quot;HKEY_CURRENT_USER&quot;."
    - id: valueName
      type: System.String
      description: "Navnet på navn/verdi-paret."
    - id: value
      type: System.Object
      description: "Verdien som skal lagres."
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "Datatypen registret skal brukes ved å lagre dataene."
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>begynner ikke med en gyldig registret rot.       - eller - <code>keyName</code> er lengre enn den maksimale tillatte lengden (255 tegn).       - eller - typen <code>value</code> samsvarer ikke med datatypen registret angitt av <code>valueKind</code>, derfor dataene kan ikke konvertere riktig."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Den <xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> er skrivebeskyttet, og derfor kan ikke skrive til, for eksempel det er en node primære, eller nøkkelen er ikke åpnet med skrivetilgang."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Brukeren har ikke tillatelse til å opprette eller endre registernøkler."
  platform:
  - net462
- uid: Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "Inneholder informasjon om brukeren standardkonfigurasjonen. Dette feltet leser Windows base registernøkkelen HKEY_USERS."
  remarks: "Denne nøkkelen inneholder en gren for hver bruker på datamaskinen. Standardkonfigurasjonen er angitt for nye brukere på den lokale datamaskinen, og for gjeldende standardbrukeren Hvis brukeren ikke er endret innstillingene. Fordi Windows 98 / meg støtter også Registry.Users, programmer kan få tilgang til brukerspesifikke informasjonen på samme måte de under Windows 2000. Hver bruker informasjonen lagres i en separat fil som kan lagres lokalt eller på en nettverksserver. Windows 98 / meg kan kopiere denne filen til gjeldende systemet slik at innstillinger kan flyttes fra én datamaskin til en annen med brukeren."
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_5_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_5_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_5_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
