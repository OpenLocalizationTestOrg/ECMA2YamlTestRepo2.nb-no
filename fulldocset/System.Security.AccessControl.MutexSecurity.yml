### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.MutexSecurity
  id: MutexSecurity
  children:
  - System.Security.AccessControl.MutexSecurity.#ctor
  - System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.MutexSecurity.AccessRightType
  - System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexSecurity.AccessRuleType
  - System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.MutexSecurity.AuditRuleType
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  langs:
  - csharp
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
  type: Class
  summary: "Representerer Windows access control sikkerheten for en navngitt mutex. Denne klassen kan arves."
  remarks: "Et objekt for MutexSecurity angir tilgangsrettigheter for en navngitt system mutex, og angir også hvordan forsøk på tilgang overvåkes. Tilgangsrettigheter til mutexen uttrykkes som regler med hver tilgangsregel representert av en <xref:System.Security.AccessControl.MutexAccessRule>objektet.</xref:System.Security.AccessControl.MutexAccessRule> Hver overvåking regel representeres av en <xref:System.Security.AccessControl.MutexAuditRule>objektet.</xref:System.Security.AccessControl.MutexAuditRule>       Dette gjenspeiler de underliggende Windows-sikkerhetssystemet, der hver som kan sikres har mer enn én detaljert tilgangskontrolliste (DACL) som styrer tilgang til sikrede objektet, og maksimalt én systemets tilgangskontrolliste (SACL) som angir hvilken forsøk på tilgang overvåkes. DACL og SACL sorteres lister over tilgangskontrolloppføringer (TILGANGSKONTROLLISTEN) som angir tilgang og overvåking av brukere og grupper. En <xref:System.Security.AccessControl.MutexAccessRule>eller <xref:System.Security.AccessControl.MutexAuditRule>objekt kan representere flere TILGANGSKONTROLLISTEN.</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule>      > [!NOTE] > Et <xref:System.Threading.Mutex>objekt kan representere en lokal mutex eller en navngitt system mutex.</xref:System.Threading.Mutex> Windows access control sikkerhet har betydning bare for navngitte system Mutexer.       MutexSecurity, <xref:System.Security.AccessControl.MutexAccessRule>, og <xref:System.Security.AccessControl.MutexAuditRule>klasser skjule implementeringsdetaljene tilgangskontrollister og tilgangskontrolloppføringer.</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule> De kan du ignorere sytten TILGANGSKONTROLLISTEN ulike og av hvor komplekse opprettholder riktig arv og overføring av tilgangsrettigheter. Disse objektene også er utformet for å forhindre følgende vanlige access control feil:-opprette en sikkerhetsbeskrivelse med en null DACL. En null referanse til en DACL tillater brukerne å legge til tilgangsregler til et objekt, oppretter potensielt avslått for tjenesteforespørsler. Et nytt objekt MutexSecurity starter alltid med en tom DACL som nekter tilgang for alle brukere.      -Bryter den kanoniske rekkefølgen på tilgangskontrolloppføringer. Hvis listen TILGANGSKONTROLLISTEN i DACL er ikke i den kanoniske rekkefølgen, kan brukere utilsiktet få tilgang til sikrede objektet. For eksempel må forbudte tilgangsrettigheter alltid vises før tillatte tilgangsrettigheter. MutexSecurity objekter har riktig rekkefølge internt.      -Manipulering sikkerhet sikkerhetsbeskrivelse flaggene som skal resource manager kontroll.      – Oppretter ugyldig kombinasjoner av TILGANGSKONTROLLISTEN flagg.      -Manipulering arvede tilgangskontrolloppføringer. Arv og overføring er behandlet av ressursbehandling som svar på endringer i tilgang og audit regler.      -Innsetting meningsløs tilgangskontrolloppføringer i tilgangskontrollister.       Bare funksjoner støttes ikke av .NET sikkerhetsobjektene er skadelige aktivitetene bør unngås av fleste utviklere av programmer, for eksempel følgende:-lavt nivå oppgaver som vanligvis er utført av ressursbehandling.      -Legge til eller fjerne tilgangskontrolloppføringer på en måte som ikke har den kanoniske rekkefølgen.       Hvis du vil endre Windows access control sikkerhet for en navngitt mutex, kan du bruke den <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>metode for å hente objektet MutexSecurity.</xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> Endre sikkerhetsobjektet ved å legge til og fjerne regler, og bruk <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>metode for å koble til det.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > Når du endrer til et objekt for MutexSecurity påvirker ikke rettigheter til en navngitt mutex før du kaller den <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>metode for å tilordne det endrede sikkerhetsobjektet til navngitt mutex.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>       Hvis du vil kopiere kodetilgangssikkerhet kontrollen fra én mutex til en annen, kan du bruke den <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>metode for å hente et MutexSecurity-objekt som representerer tilgang og audit regler for den første mutexen, og deretter bruke den <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>metoden eller en konstruktør som godtar et MutexSecurity-objekt for å tilordne disse reglene til den andre mutexen.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>       Brukere med en investering i sikkerhet sikkerhetsbeskrivelse definition language SDDL kan bruke den <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>metode for å angi tilgangsregler for en navngitt mutex og <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>metode for å hente en streng som representerer tilgangsregler i SDDL-format.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Dette anbefales ikke til ny utvikling.      > [!NOTE] > Sikkerhet på synkroniseringsobjektene støttes ikke for Windows 98 eller installasjonen."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a MutexSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_12_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_12_1.cs)]"
  syntax:
    content: 'public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse standardverdier."
  remarks: "En ny <xref:System.Security.AccessControl.MutexSecurity>objektet alltid starter med en tom liste for detaljert (DACL), som nekter tilgang for alle brukere.</xref:System.Security.AccessControl.MutexSecurity>"
  syntax:
    content: public MutexSecurity ();
    parameters: []
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Denne klassen støttes ikke i Windows 98 eller installasjonen."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klassen med de angitte delene av access control sikkerhetsregler fra system-mutex med det angitte navnet."
  remarks: "Denne konstruktøren, kan du få tilgang kontrollen sikkerheten for en navngitt system mutex uten først å opprette en <xref:System.Threading.Mutex>objektet.</xref:System.Threading.Mutex>       Forsiktig må bli brukt til trening når du arbeider med navngitte systemobjekter. Hvis det er et systemobjekt navnet `name` som ikke er en mutex, kontroll tilgang sikkerheten kan hentes."
  syntax:
    content: public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på system-mutex der tilgangsregler for kontrollen sikkerhetsinformasjonen som skal hentes."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "En kombinasjon av <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> flaggene som angir delene som skal hentes."
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Det er ingen systemobjekt med det angitte navnet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Denne klassen støttes ikke i Windows 98 eller installasjonen."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Henter opplistingen som den <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse bruker til å representere tilgangsrettigheter."
  remarks: "Klasser som er avledet fra den <xref:System.Security.AccessControl.ObjectSecurity>klasse overstyring av <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>egenskapen og returner typen de bruker til å representere tilgangsrettigheter.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Når du arbeider med matriser eller samlinger som inneholder flere objekttyper sikkerhet, kan du bruke denne egenskapen til å bestemme den riktige opplistingstypen til bruk med hver sikkerhetsobjekt."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "En <xref:System.Type>objektet som representerer den <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> opplisting.</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Oppretter en ny tilgangsregel for kontrollen for den angitte brukeren med den angitte tilgangsrettigheter tilgangskontroll og flagg."
  remarks: "Den anbefalte måten å opprette tilgangsregler for kontrollen er å bruke konstruktører for <xref:System.Security.AccessControl.MutexAccessRule>klasse.</xref:System.Security.AccessControl.MutexAccessRule>      > [!NOTE] > Selv om flaggene arv og overføring er meningsløs for navngitte Mutexer, er det fremdeles mulig å angi dem. Dette anbefales ikke, fordi den unødvendig klientytelse vedlikehold av regler, for eksempel ved å påvirke kombinasjonen av regler som vil ellers være kompatibel."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "En <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> som identifiserer brukeren eller gruppen regelen gjelder for."
    - id: accessMask
      type: System.Int32
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> verdier som angir tilgangsrettigheter til å gi eller avslå, endres til et heltall."
    - id: isInherited
      type: System.Boolean
      description: "Meningsløs for navngitte Mutexer fordi de har ikke et hierarki."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Meningsløs for navngitte Mutexer fordi de har ikke et hierarki."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Meningsløs for navngitte Mutexer fordi de har ikke et hierarki."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Én av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> verdier som angir om rettighetene som er gitt eller nektet."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> -objekt som representerer angitt rettigheter for den angitte brukeren."
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, eller <code>type</code> angir en ugyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>accessMask</code> er null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>verken typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, eller en type som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteres til typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Henter typen som den <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse bruker til å representere tilgangsregler."
  remarks: "Klasser som er avledet fra den <xref:System.Security.AccessControl.ObjectSecurity>klasse overstyring av <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>egenskapen og returner typen de bruker til å representere tilgangsregler.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Når du arbeider med matriser eller samlinger som inneholder flere objekttyper sikkerhet, kan du bruke denne egenskapen til å bestemme regeltypen riktig tilgang til bruk med hver sikkerhetsobjekt."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "En <xref:System.Type>objektet som representerer den <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> klasse.</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søker etter en access control søkeregel som den nye regelen kan slås sammen. Hvis ingen blir funnet, legger du til den nye regelen."
  remarks: "Metoden AddAccessRule søker etter regler med samme bruker eller gruppe, og den samme <xref:System.Security.AccessControl.AccessControlType>som `rule`.</xref:System.Security.AccessControl.AccessControlType> Hvis ingen blir funnet, `rule` er lagt til. Hvis en søkeregel blir funnet, rettigheter i `rule` skal slås sammen med den eksisterende regelen."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName><xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/a07c477f-17a9-4bd4-908e-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/a07c477f-17a9-4bd4-908e-_1.cs)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "Kontrollen tilgangsregelen å legge til."
  overload: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Principal.IdentityNotMappedException
    commentId: T:System.Security.Principal.IdentityNotMappedException
    description: "<code>rule </code>kan ikke tilordnes til en kjent identitet."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søker etter en regel for sporing av endringer som den nye regelen kan slås sammen. Hvis ingen blir funnet, legger du til den nye regelen."
  remarks: "Metoden AddAuditRule søker etter regler med samme bruker eller gruppe som `rule`. Hvis ingen blir funnet, `rule` er lagt til. Hvis en søkeregel blir funnet, flaggene i `rule` sammen i den eksisterende regelen."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "Audit-regel for å legge til. Brukeren som er angitt av denne regelen bestemmer søket."
  overload: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Oppretter en ny regel for sporing av endringer, angi brukeren regelen gjelder for tilgangsrettigheter til å overvåke og resultatet som utløser audit regelen."
  remarks: "Den anbefalte måten å opprette regler for sporing av endringer er å bruke konstruktører for <xref:System.Security.AccessControl.MutexAuditRule>klasse.</xref:System.Security.AccessControl.MutexAuditRule>      > [!NOTE] > Selv om flaggene arv og overføring er meningsløs for navngitte Mutexer, er det fremdeles mulig å angi dem. Dette anbefales ikke, fordi den unødvendig klientytelse vedlikehold av regler, for eksempel ved å påvirke kombinasjonen av regler som vil ellers være kompatibel."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "En <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> som identifiserer brukeren eller gruppen regelen gjelder for."
    - id: accessMask
      type: System.Int32
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> verdier som angir tilgangsrettigheter til å overvåke, endres til et heltall."
    - id: isInherited
      type: System.Boolean
      description: "Meningsløs for navngitte Vent behandler, fordi de har ikke et hierarki."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Meningsløs for navngitte Vent behandler, fordi de har ikke et hierarki."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Meningsløs for navngitte Vent behandler, fordi de har ikke et hierarki."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> verdier som angir om du vil overvåke vellykket tilgang, mislykket tilgang eller begge deler."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> -objekt som representerer angitt audit regel for den angitte brukeren. Returtypen for metoden er basisklassen, <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, men returverdien kan brukes bare som den utledede klassen."
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, eller <code>flags</code> angir en ugyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>accessMask</code> er null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>verken typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, eller en type som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteres til typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Henter typen som den <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse bruker til å representere audit regler."
  remarks: "Klasser som er avledet fra den <xref:System.Security.AccessControl.ObjectSecurity>klasse overstyring av <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>egenskapen og returner typen de bruker til å representere audit rettigheter.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Når du arbeider med matriser eller samlinger som inneholder flere objekttyper sikkerhet, kan du bruke denne egenskapen for å finne riktig audit regeltypen til bruk med hver sikkerhetsobjekt."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "En <xref:System.Type>objektet som representerer den <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> klasse.</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søk etter en kontroll tilgangsregel med samme bruker og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Tillat eller Nekt) som angitt regel, og kompatibel arv og flagg for overføring; hvis en slik regel finnes, fjernes rettigheter i den angitte tilgangsregelen fra den."
  remarks: "Gjeldende <xref:System.Security.AccessControl.MutexSecurity>søkes for en regel som har den samme brukeren, og den samme <xref:System.Security.AccessControl.AccessControlType>verdi som `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> Hvis ingen slik regel finnes, ingen handling ble utført, og metoden returnerer `false`. Hvis det finnes like regler, flaggene deres arv og kompatibilitetslag kontrolleres for kompatibilitet med flaggene som er angitt i `rule`. Hvis ingen kompatibel regel finnes, ingen handling ble utført, og metoden returnerer `false`. Hvis en regel med kompatibel flagg blir funnet, rettighetene som er angitt i `rule` fjernes fra en kompatibel regel, og metoden returnerer `true`. Hvis `rule` angir rettigheter som ikke finnes i kompatibel regelen, ingen handling ble utført i forhold til rettighetene. Hvis alle rettigheter fjernes fra kompatibel regel, hele regelen er fjernet fra gjeldende <xref:System.Security.AccessControl.MutexSecurity>objektet.</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Selv om du kan angi arv og overføring flagg for mutex tilgangsregler, ved å opprette dem med den <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>metoden dette anbefales ikke.</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> Arv og overføring har ingen betydning for navngitte Mutexer, og de foreta vedlikehold av tilgangsregler mer kompliserte."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in a <xref:System.Security.AccessControl.MutexSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.MutexRights>, <xref:System.Security.AccessControl.MutexRights>, and <xref:System.Security.AccessControl.MutexRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.MutexRights> and <xref:System.Security.AccessControl.MutexRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.MutexRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object. The extraneous <xref:System.Security.AccessControl.MutexRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/02c8df82-84a8-4212-a3e0-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/02c8df82-84a8-4212-a3e0-_1.cs)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> som angir og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> til å søke etter og et sett med arv og overføring flaggene som en tilsvarende regel, hvis finnes, må være kompatibel med. Angir rettigheter til å fjerne fra kompatibel regelen om."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en kompatibel regel finnes. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søk etter alle tilgangsregler kontroll med samme bruker og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Tillat eller Nekt) som den angitte regel, og hvis finner fjerner dem."
  remarks: "Gjeldende <xref:System.Security.AccessControl.MutexSecurity>objektet søkes for regler som har den samme brukeren, og den samme <xref:System.Security.AccessControl.AccessControlType>verdi som `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> Tillatelser som er angitt av `rule` ignoreres når du utfører dette søket. Hvis det finnes ingen samsvarende regler, ble ingen handling utført."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.MutexSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/6d97fdf7-4cee-497f-898e-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/6d97fdf7-4cee-497f-898e-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> som angir og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> til å søke etter. Tillatelser som er angitt av denne regelen, ignoreres."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søker etter en tilgangsregel for kontrollen som er lik den angitte regel, og hvis funnet, fjerner den."
  remarks: "Regelen fjernes hvis du bare nøyaktig `rule` i alle detaljer, inkludert flagg. Andre regler med samme bruker og <xref:System.Security.AccessControl.AccessControlType>påvirkes ikke.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > En regel representerer en eller flere underliggende tilgangskontrolloppføringer (TILGANGSKONTROLLISTEN), og disse postene dele eller kombineres behov når du endrer sikkerhet tilgangsregler for en bruker. En regel finnes kanskje ikke lenger i skjemaet den hadde da den ble lagt til, og derfor i dette tilfellet RemoveAccessRuleSpecific-metoden kan ikke fjernes."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/fa20d5ab-0fa1-47be-9c16-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/fa20d5ab-0fa1-47be-9c16-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "Den <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> fjerne."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søk etter en regel for kontroll av audit med den samme brukeren som den angitte regelen og kompatibel arv og overføring flagg. Hvis en kompatibel regel finnes, er rettigheter i den angitte regelen fjernet fra den."
  remarks: "Gjeldende <xref:System.Security.AccessControl.MutexSecurity>søkes for en regel for sporing av endringer som har den samme brukeren som `rule`.</xref:System.Security.AccessControl.MutexSecurity> Hvis ingen slik regel finnes, ingen handling ble utført, og metoden returnerer `false`. Hvis det finnes like regler, flaggene deres arv og kompatibilitetslag kontrolleres for kompatibilitet med flaggene som er angitt i `rule`. Hvis ingen kompatibel regel finnes, ingen handling ble utført, og metoden returnerer `false`. Hvis en regel med kompatibel flagg blir funnet, rettighetene som er angitt i `rule` fjernes fra en kompatibel regel, og metoden returnerer `true`. Hvis `rule` angir rettigheter som ikke finnes i kompatibel regelen, ingen handling ble utført i forhold til rettighetene. Hvis alle rettigheter fjernes fra kompatibel regel, hele regelen er fjernet fra gjeldende <xref:System.Security.AccessControl.MutexSecurity>objektet.</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Selv om du kan angi arv og overføring flagg for mutex audit regler ved å opprette dem med den <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>metoden dette anbefales ikke.</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> Arv og overføring har ingen betydning for navngitte Mutexer, og de foreta vedlikehold av audit regler mer kompliserte."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> som angir brukeren til å søke etter og et sett med arv og overføring flaggene som en tilsvarende regel, hvis finnes, må være kompatibel med. Angir rettigheter til å fjerne fra kompatibel regelen om."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en kompatibel regel finnes. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søker for alle audit regler med samme bruker som den angitte regelen, og hvis funnet, fjernet."
  remarks: "Gjeldende <xref:System.Security.AccessControl.MutexSecurity>søkes for audit regler som har samme bruker som `rule`.</xref:System.Security.AccessControl.MutexSecurity> Tillatelser som er angitt av `rule` ignoreres når du utfører dette søket. Samsvarende reglene fjernes. Hvis det finnes ingen samsvarende regler, ble ingen handling utført."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "En <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> som angir til å søke etter. Tillatelser som er angitt av denne regelen, ignoreres."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Søker etter en regel for sporing av endringer som er lik den angitte regel, og hvis funnet, fjerner den."
  remarks: "Regelen fjernes hvis du bare nøyaktig `rule` i alle detaljer, inkludert flagg. Andre audit regler for samme bruker påvirkes ikke.      > [!IMPORTANT] > En regel representerer en eller flere underliggende tilgangskontrolloppføringer (TILGANGSKONTROLLISTEN), og disse postene dele eller kombineres behov når du endrer audit sikkerhetsregler for en bruker. En regel finnes kanskje ikke lenger i skjemaet den hadde da den ble lagt til, og derfor i dette tilfellet RemoveAuditRuleSpecific-metoden kan ikke fjernes."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "Den <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> som skal fjernes."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Fjerner alle tilgangsregler for kontroll med samme bruker som den angitte regelen uavhengig av <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>, og legger til den angitte regelen."
  remarks: "Hvis det finnes ingen tilgangsregler som bruker samsvarer med den angitte regelen `rule` er lagt til."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/382093ed-47a5-4dd0-aee6-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/382093ed-47a5-4dd0-aee6-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. Brukeren som er angitt av denne regelen bestemmer regler for å fjerne før denne regelen er lagt til."
  overload: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Fjerner alle tilgangsregler for kontroll med samme bruker og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Tillat eller Nekt) som angitt regel, og legger til den angitte regelen."
  remarks: "Hvis den angitte regelen er <xref:System.Security.AccessControl.AccessControlType>, denne metoden virker å fjerne alle <xref:System.Security.AccessControl.AccessControlType>regler for den angitte brukeren å erstatte dem med den angitte regelen.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Hvis den angitte regelen er <xref:System.Security.AccessControl.AccessControlType>, alle <xref:System.Security.AccessControl.AccessControlType>regler for den angitte brukeren er erstattet med den angitte regelen.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Hvis det er ingen regler som bruker og <xref:System.Security.AccessControl.AccessControlType>samsvarer med den angitte regelen `rule` er lagt til.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/5e6eedb1-8b35-40cc-b676-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/csharp/5e6eedb1-8b35-40cc-b676-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. Brukeren og <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> fastslå regler for å fjerne før denne regelen er lagt til i denne regelen."
  overload: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Fjerner alle audit regler med samme bruker som den angitte regelen uavhengig av den <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> verdi, og legger til den angitte regelen."
  remarks: "Hvis det finnes ingen audit regler som bruker samsvarer med den angitte regelen `rule` er lagt til."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;></xref> to add. Brukeren som er angitt av denne regelen bestemmer regler for å fjerne før denne regelen er lagt til."
  overload: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Principal.IdentityNotMappedException
  parent: System.Security.Principal
  isExternal: false
  name: IdentityNotMappedException
  nameWithType: IdentityNotMappedException
  fullName: System.Security.Principal.IdentityNotMappedException
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAccessRule
  nameWithType: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAuditRule
  nameWithType: MutexAuditRule
  fullName: System.Security.AccessControl.MutexAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.#ctor*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity.MutexSecurity
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: MutexSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: MutexSecurity.AddAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: MutexSecurity.AddAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: MutexSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: MutexSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: MutexSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: MutexSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: MutexSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: MutexSecurity.ResetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: MutexSecurity.SetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: MutexSecurity.SetAuditRule
