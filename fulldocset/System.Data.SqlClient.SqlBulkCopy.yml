### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "Lar deg effektivt masseinnlasting en SQL Server-tabell med data fra andre kilder."
  remarks: "Microsoft SQL Server inneholder et populære ledeteksten verktøy navnet **bcp** for flytting av data fra en tabell til en annen, om på en enkeltserver eller mellom servere. Klassen SqlBulkCopy kan du skrive løsninger for forvaltet kode som gir lignende bruksområder. Det finnes andre måter å laste inn data i en tabell med SQL Server (for eksempel INSERT-setninger), men SqlBulkCopy tilbyr en betydelige fordel over dem.       Klassen SqlBulkCopy kan brukes til å skrive data bare for SQL Server-tabeller. Datakilden er imidlertid ikke begrenset til SQL Server. alle datakilder kan brukes, så lenge data kan lastes til en <xref:System.Data.DataTable>serverforekomsten eller lese med en <xref:System.Data.IDataReader>forekomsten.</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy mislykkes når bulk innlasting av en <xref:System.Data.DataTable>kolonnetypen <xref:System.Data.SqlTypes.SqlDateTime>til en SQL Server kolonne av typen én av dato/klokkeslett-typene lagt til i SQL Server 2008.</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasse ved hjelp av den angitte Åpne forekomsten av <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "Fordi tilkoblingen er åpen når den <xref:System.Data.SqlClient.SqlBulkCopy>forekomsten er initialisert, tilkoblingen er åpen etter den <xref:System.Data.SqlClient.SqlBulkCopy>forekomsten er lukket.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Hvis den `connection` -argumentet er null, en <xref:System.ArgumentNullException>forårsakes.</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Allerede åpen <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -forekomst som skal brukes til å utføre massekopieringsoperasjon. Hvis tilkoblingsstrengen ikke bruker <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, kan du bruke <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> skal sendes at Brukernavnet og passordet sikrere enn ved å angi at Brukernavnet og passordet som tekst i tilkoblingsstrengen."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initialiserer og åpner en ny forekomst av <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> basert på den angitte <code> connectionString </code>. Konstruktøren bruker den <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> å initialisere en ny forekomst av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasse."
  remarks: "Tilkoblingen lukkes automatisk på slutten av massekopieringsoperasjon.       Hvis `connectionString` er null, en <xref:System.ArgumentNullException>forårsakes.</xref:System.ArgumentNullException> Hvis `connectionString` er en tom streng en <xref:System.ArgumentException>forårsakes.</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "Strengen som definerer tilkoblingen åpnes for bruk av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> forekomsten. Hvis tilkoblingsstrengen ikke bruker <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, kan du bruke &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; eller &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; og <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> skal sendes at Brukernavnet og passordet sikrere enn ved å angi at Brukernavnet og passordet som tekst i tilkoblingsstrengen."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initialiserer og åpner en ny forekomst av <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> basert på den angitte <code> connectionString </code>. Konstruktøren bruker som <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> å initialisere en ny forekomst av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasse. Den <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> forekomsten fungerer i henhold til alternativene som er angitt i den <code> copyOptions </code> parameteren."
  remarks: "Du finner detaljert informasjon om alle bulk kopieringsalternativene i den <xref:System.Data.SqlClient.SqlBulkCopyOptions>emnet.</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "Strengen som definerer tilkoblingen åpnes for bruk av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> forekomsten. Hvis tilkoblingsstrengen ikke bruker <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, kan du bruke &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; eller &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; og <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> skal sendes at Brukernavnet og passordet sikrere enn ved å angi at Brukernavnet og passordet som tekst i tilkoblingsstrengen."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "En kombinasjon av verdier fra det <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> opplistingen som avgjør hvilke data kilderadene kopieres til måltabellen."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasse ved hjelp av den angitte eksisterende Åpne forekomsten av <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>. Den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> forekomsten fungerer i henhold til alternativene som er angitt i den <code> copyOptions </code> parameteren. Hvis en ikke-null <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> er angitt, operasjonene av vil bli utført i transaksjonen."
  remarks: "Hvis alternativene omfatter `UseInternalTransaction` og `externalTransaction` -argumentet er null, en **InvalidArgumentException** er et.       Eksempler demonstrerer hvordan du bruker `SqlBulkCopy` i en transaksjon, kan du se [transaksjon og massekopieringsoperasjoner](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Allerede åpen <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -forekomst som skal brukes til å utføre massekopiering. Hvis tilkoblingsstrengen ikke bruker <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, kan du bruke <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> skal sendes at Brukernavnet og passordet sikrere enn ved å angi at Brukernavnet og passordet som tekst i tilkoblingsstrengen."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "En kombinasjon av verdier fra det <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> opplistingen som avgjør hvilke data kilderadene kopieres til måltabellen."
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "En eksisterende <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> serverforekomsten under massekopiering gjennomføres."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Antall rader i hvert sett. På slutten av hver bunke er radene i den satsvise jobben sendt til serveren."
  remarks: "En bunke er fullført når BatchSize rader er behandlet eller det finnes ingen flere rader som skal sendes til datakilden for målet.       Null (standard) angir som hver <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>operasjonen er en enkelt bunke.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Hvis den <xref:System.Data.SqlClient.SqlBulkCopy>forekomsten er deklarert uten det <xref:System.Data.SqlClient.SqlBulkCopyOptions>alternativet i kraft rader er sendt til serveren BatchSize rader om gangen, men ingen transaksjonsrelatert handling ble utført.</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> Hvis <xref:System.Data.SqlClient.SqlBulkCopyOptions>er i bruk, settes inn hvert sett med rader som en separat transaksjon.</xref:System.Data.SqlClient.SqlBulkCopyOptions>       Egenskapen BatchSize kan angis når som helst. Hvis en massekopiering pågår allerede, er gjeldende bunke angitt i henhold til forrige bunkestørrelsen. Etterfølgende bunker bruke den nye størrelsen. Hvis BatchSize opprinnelig er null og endret under en <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>pågår allerede, at operasjonen laster inn data som en enkelt bunke.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Alle etterfølgende <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>operasjoner i samme <xref:System.Data.SqlClient.SqlBulkCopy>forekomsten bruke den nye BatchSize.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "Heltallsverdien egenskapen BatchSize eller null hvis ingen verdi er angitt."
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Antall sekunder for operasjonen skal fullføres før det blir tidsavbrutt."
  remarks: "Hvis operasjonen er tidsavbrutt, er ikke transaksjonen skrevet, og alle kopierte radene er fjernet i måltabellen."
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "Heltallsverdien for egenskapen BulkCopyTimeout. Standardverdien er 30 sekunder. Verdien 0 indikerer ingen grense; massekopiering vente på ubestemt tid."
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Lukker det <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> forekomsten."
  remarks: "Når du kaller en avslutning på den <xref:System.Data.SqlClient.SqlBulkCopy>objektet, ingen andre lykkes innlimingsoperasjonen.</xref:System.Data.SqlClient.SqlBulkCopy> Kall til <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>metoden vil throw <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Lukk metoden fra den <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>hendelse fører til at en <xref:System.InvalidOperationException>til å bli utløst.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       Legg merke til at åpne <xref:System.Data.SqlClient.SqlBulkCopy>forekomster er implisitt lukket på slutten av en `using` block.</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Returnerer en samling av <xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;> </xref> elementer. Kolonnetilordningene Definer relasjoner mellom kolonner i datakilden, og kolonner i målet."
  remarks: "Hvis datakilden og måltabellen har samme antall kolonner og ordenstall posisjonen for hver kildekolonne i datakilden samsvarer med ordenstall posisjonen for den tilsvarende målkolonnen ColumnMappings-samlingen er ikke nødvendig. Hvis kolonnen antall er forskjellige, eller ordenstall posisjonen er ikke konsekvent, må du bruke ColumnMappings for å kontrollere at dataene er kopiert til de riktige kolonnene.       Denne samlingen kan åpnes under kjøring av en massekopieringsoperasjon, men kan ikke endres. Forsøk på å endre den vil throw <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "En samling av kolonnetilordningene. Som standard er det en tom samling."
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Navnet på måltabellen på serveren."
  remarks: "Hvis DestinationTableName ikke er angitt når <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>kalles, en <xref:System.ArgumentNullException>forårsakes.</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Hvis DestinationTableName endres under en <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>operasjonen kjører, at endringen påvirker ikke gjeldende operasjon.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Den nye DestinationTableName-verdien brukes neste gang en <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>-metoden.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName er et navn på tre deler (`<database>.<owningschema>.<name>`). Hvis du velger, kan du kvalifisere tabellnavnet med databasen og eier skjemaet. Hvis tabellnavnet bruker et understrekingstegn (_&quot;) eller andre spesialtegn, må du imidlertid escape navnet bruker omkringliggende hakeparenteser som i (`[<database>.<owningschema>.<name_01>]`). For mer informasjon, kan du se &quot;Identifikatorer&quot; i SQL Server Books Online.       Du kan massekopiering data til en midlertidig tabell ved hjelp av en verdi, for eksempel `tempdb..#table` eller `tempdb.<owner>.#table` for egenskapen DestinationTableName."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "Strengverdien for egenskapen DestinationTableName, eller null hvis ingen som er angitt."
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Aktiverer eller deaktiverer en <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> -objekt til dataflyten data fra en <xref href=&quot;System.Data.IDataReader&quot;> </xref> objekt"
  remarks: "Når EnableStreaming er `true`, <xref:System.Data.SqlClient.SqlBulkCopy>leser fra en <xref:System.Data.IDataReader>objekt med <xref:System.Data.CommandBehavior>, optimalisere minnebruk ved hjelp av den <xref:System.Data.IDataReader>direkteavspilling funksjoner.</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> Når den er satt til USANN, den <xref:System.Data.SqlClient.SqlBulkCopy>klassen laster inn alle data som returneres av den <xref:System.Data.IDataReader>objektet i minnet før du sender den til [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] eller SQL Azure.</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objekt kan spille av data fra en <xref href=&quot;System.Data.IDataReader&quot;> </xref> objekt; hvis ikke, false. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Definerer antall rader som skal behandles før generering av en varslingshendelse."
  remarks: "Denne egenskapen er utformet for komponenter i brukergrensesnittet som illustrerer fremdriften for en massekopieringsoperasjon. Angir hvor mange rader som skal behandles før generering av en varslingshendelse. Egenskapen NotifyAfter kan angis når som helst mens en massekopieringsoperasjon pågår. Endringer i løpet av en massekopieringsoperasjon tre i kraft etter neste varsling. Den nye innstillingen gjelder for alle etterfølgende operasjoner i samme forekomst.       Hvis NotifyAfter er satt til et tall mindre enn null, en <xref:System.ArgumentOutOfRangeException>forårsakes.</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "Heltallsverdien egenskapen NotifyAfter eller null hvis egenskapen er ikke angitt."
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Forekommer i hver gang antall rader som er angitt av den <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>egenskapen har blitt behandlet.</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "Legg merke til at innstillingene for <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>og <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>uavhengige.</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Mottak av en SqlRowsCopied hendelse innebærer ikke at noen rader er sendt til serveren eller utført.       Du kan ikke kalle SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) eller SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) fra denne hendelsen.</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Gjøre dette fører til at en <xref:System.InvalidOperationException>som et, og <xref:System.Data.SqlClient.SqlBulkCopy>objekt tilstand, endres ikke.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> Hvis brukeren ønsker å avbryte operasjonen fra hendelsen, i <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>-egenskapen for den <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>kan brukes.</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (Se [transaksjon og massekopieringsoperasjoner](~/add/includes/ajax-current-ext-md.md) eksempler som bruker den <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>egenskap.)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>       Ingen handling, for eksempel transaksjonsaktivitet som støttes i tilkoblingen under kjøring av massekopieringsoperasjon, og det anbefales at du ikke bruker samme tilkobling brukes under SqlRowsCopied-hendelsen. Du kan imidlertid åpne en annen tilkobling."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Frigir alle ressursene som brukes av den gjeldende forekomsten av den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> klasse."
  remarks: "Kall `Dispose` når du er ferdig med <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> Den `Dispose` metoden forlater den <xref:System.Data.SqlClient.SqlBulkCopy>i en ubrukelig tilstand.</xref:System.Data.SqlClient.SqlBulkCopy> Etter kall `Dispose`, må du frigi alle referanser til den <xref:System.Data.SqlClient.SqlBulkCopy>Slik saneringsoppsamlingen kan gjenvinne minnet som den <xref:System.Data.SqlClient.SqlBulkCopy>ble bruker.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Hvis du vil ha mer informasjon, se [Rydder opp uforvaltede ressurser](~/add/includes/ajax-current-ext-md.md) og [implementere metoden fjerne](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid kall `Dispose` før du slipper siste referanse til <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> Ellers ressurser den bruker vil ikke bli frigjort før saneringsoppsamling kall av <xref:System.Data.SqlClient.SqlBulkCopy>objektets `Finalize` metode.</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Overfører alle radene fra den angitte <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> matrisen slik at en måltabell som er angitt av det <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>-egenskapen til det <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "En <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Overfører alle radene fra den angitte <xref href=&quot;System.Data.DataRow&quot;> </xref> matrisen slik at en måltabell som er angitt av det <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>-egenskapen til det <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Mens massekopieringsoperasjon pågår, tilknyttede målet <xref:System.Data.SqlClient.SqlConnection>er opptatt for den, og ingen andre operasjoner kan ikke utføres for tilkoblingen.</xref:System.Data.SqlClient.SqlConnection>       Den <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>samlingen tilordner fra den <xref:System.Data.DataRow>kolonner til måltabellen for databasen.</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objektene som skal kopieres til måltabellen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopierer alle rader i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av den <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Alle rader i den <xref:System.Data.DataTable>kopieres til måltabellen unntatt de som er slettet.</xref:System.Data.DataTable>       Mens massekopieringsoperasjon pågår, tilknyttede målet <xref:System.Data.SqlClient.SqlConnection>er opptatt for den, og ingen andre operasjoner kan ikke utføres for tilkoblingen.</xref:System.Data.SqlClient.SqlConnection>       Den <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>samlingen tilordner fra den <xref:System.Data.DataTable>kolonner til måltabellen for databasen.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Kopierer alle rader i den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref> til en måltabell som er angitt av den <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Kopieringen begynner den neste tilgjengelige raden i leseren. Vanligvis, leseren bare ble returnert av <xref:System.Data.IDbCommand.ExecuteReader%2A>eller et lignende kall, slik at den neste tilgjengelige raden er den første raden.</xref:System.Data.IDbCommand.ExecuteReader%2A> Hvis du vil behandle flere resultater, kan du kalle <xref:System.Data.IDataReader.NextResult%2A>på dataleseren og kall WriteToServer på nytt.</xref:System.Data.IDataReader.NextResult%2A>       Legg merke til at bruker WriteToServer endrer statusen til leseren. Kaller metoden <xref:System.Data.IDataReader.Read%2A>før den returnerer false, operasjonen er avbrutt eller det oppstår en feil.</xref:System.Data.IDataReader.Read%2A> Dette betyr at dataleseren er i en annen tilstand, sannsynligvis på slutten av resultatsettet, når WriteToServer-operasjonen er fullført.       Mens massekopieringsoperasjon pågår, tilknyttede målet <xref:System.Data.SqlClient.SqlConnection>er opptatt for den, og ingen andre operasjoner kan ikke utføres for tilkoblingen.</xref:System.Data.SqlClient.SqlConnection>       Den <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>samlingen tilordnes fra dataene leseren kolonner til måltabellen for databasen.</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Overfører bare rader som samsvarer med tilstanden angitte rad i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av den <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Bare rader i den <xref:System.Data.DataTable>som er i tilstand som er angitt i den `rowState` argumentet og ikke er slettet kopieres til måltabellen.</xref:System.Data.DataTable>      > [!NOTE] > Hvis <xref:System.Data.DataRowState>er angitt noen <xref:System.Data.DataRowState>, <xref:System.Data.DataRowState>, og <xref:System.Data.DataRowState>rader vil også bli kopiert til serveren.</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> Ingen unntak vil starter.       Mens massekopieringsoperasjon pågår, tilknyttede målet <xref:System.Data.SqlClient.SqlConnection>er opptatt for den, og ingen andre operasjoner kan ikke utføres for tilkoblingen.</xref:System.Data.SqlClient.SqlConnection>       Den <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>samlingen tilordner fra den <xref:System.Data.DataTable>kolonner til måltabellen for databasen.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: rowState
      type: System.Data.DataRowState
      description: "En verdi fra den <xref href=&quot;System.Data.DataRowState&quot;> </xref> opplisting. Bare rader som samsvarer med tilstanden rad er kopiert til målet."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som kopierer alle radene fra den angitte <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> matrisen slik at en måltabell som er angitt av det <> </> *> for i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "En <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som kopierer alle radene fra den angitte <xref href=&quot;System.Data.DataRow&quot;> </xref> matrisen slik at en måltabell som er angitt av det <> </> *> for i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objektene som skal kopieres til måltabellen."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller WriteToServerAsync flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller WriteToServerAsync og <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>for den samme forekomsten før fullføring av oppgaven.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Tilkoblingen faller eller den er lukket under kjøring av WriteToServerAsync.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Den asynkrone versjonen av <> </> *>, som kopierer alle rader i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av den <> </> *>-egenskapen for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller WriteToServerAsync flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller WriteToServerAsync og <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>for den samme forekomsten før fullføring av oppgaven.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Tilkoblingen faller eller den er lukket under kjøring av WriteToServerAsync.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Den asynkrone versjonen av <> </> *>, som kopierer alle rader i den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref> til en måltabell som er angitt av den <> </> *>-egenskapen for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller WriteToServerAsync flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller WriteToServerAsync og <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>for den samme forekomsten før fullføring av oppgaven.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Tilkoblingen faller eller den er lukket under kjøring av WriteToServerAsync.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       Den <xref href=&quot;System.Data.IDataReader&quot;> </xref> ble lukket før den fullstendige <xref:System.Threading.Tasks.Task>returnerte.</xref:System.Threading.Tasks.Task>       Den <xref href=&quot;System.Data.IDataReader&quot;> </xref>for tilknyttede tilkoblingen ble lukket før den fullstendige <xref:System.Threading.Tasks.Task>returnerte.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som kopierer alle radene fra den angitte <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> matrisen slik at en måltabell som er angitt av det <> </> *> for i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "En <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instruksjonene for annullering. En <> </> *> verdien i parameteren gjør denne metoden tilsvarer <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som kopierer alle radene fra den angitte <xref href=&quot;System.Data.DataRow&quot;> </xref> matrisen slik at en måltabell som er angitt av det <> </> *> for i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.       Avbryte tokenet kan brukes til å be om at operasjonen forlates før tidsavbruddet for kommando utløper.  Unntak rapporteres via returnerte oppgaven-objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objektene som skal kopieres til måltabellen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instruksjonene for annullering. En <> </> *> verdien i parameteren gjør denne metoden tilsvarer <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller <> </> *> flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller <> </> *> og <> </> *> for den samme forekomsten før fullføring av oppgaven.       Tilkoblingen faller eller den er lukket under <> </> *> kjøring.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som overfører bare rader som samsvarer med tilstanden angitte rad i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av det <> </> *>-egenskapen for det <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: rowState
      type: System.Data.DataRowState
      description: "En verdi fra den <xref href=&quot;System.Data.DataRowState&quot;> </xref> opplisting. Bare rader som samsvarer med tilstanden rad er kopiert til målet."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller WriteToServerAsync flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller WriteToServerAsync og <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>for den samme forekomsten før fullføring av oppgaven.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Tilkoblingen faller eller den er lukket under kjøring av WriteToServerAsync.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Den asynkrone versjonen av <> </> *>, som kopierer alle rader i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av den <> </> *>-egenskapen for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.       Avbryte tokenet kan brukes til å be om at operasjonen forlates før tidsavbruddet for kommando utløper.  Unntak rapporteres via returnerte oppgaven-objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instruksjonene for annullering. En <> </> *> verdien i parameteren gjør denne metoden tilsvarer <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller <> </> *> flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller <> </> *> og <> </> *> for den samme forekomsten før fullføring av oppgaven.       Tilkoblingen faller eller den er lukket under <> </> *> kjøring.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Den asynkrone versjonen av <> </> *>, som kopierer alle rader i den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref> til en måltabell som er angitt av den <> </> *>-egenskapen for den <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.       Avbryte tokenet kan brukes til å be om at operasjonen forlates før tidsavbruddet for kommando utløper.  Unntak rapporteres via returnerte oppgaven-objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instruksjonene for annullering. En <> </> *> verdien i parameteren gjør denne metoden tilsvarer <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller <> </> *> flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller <> </> *> og <> </> *> for den samme forekomsten før fullføring av oppgaven.       Tilkoblingen faller eller den er lukket under <> </> *> kjøring.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       Den <xref href=&quot;System.Data.IDataReader&quot;> </xref> ble lukket før den fullstendige <xref:System.Threading.Tasks.Task>returnerte.</xref:System.Threading.Tasks.Task>       Den <xref href=&quot;System.Data.IDataReader&quot;> </xref>for tilknyttede tilkoblingen ble lukket før den fullstendige <xref:System.Threading.Tasks.Task>returnerte.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Asynkron versjonen av <> </> *>, som overfører bare rader som samsvarer med tilstanden angitte rad i den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> til en måltabell som er angitt av det <> </> *>-egenskapen for det <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet.       Avbryte tokenet kan brukes til å be om at operasjonen forlates før tidsavbruddet for kommando utløper.  Unntak rapporteres via returnerte oppgaven-objektet."
  remarks: "For mer informasjon om asynkrone programming i den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] dataleverandøren for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], se [asynkront Programming](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "En <xref href=&quot;System.Data.DataTable&quot;> </xref> rader som skal kopieres til måltabellen."
    - id: rowState
      type: System.Data.DataRowState
      description: "En verdi fra den <xref href=&quot;System.Data.DataRowState&quot;> </xref> opplisting. Bare rader som samsvarer med tilstanden rad er kopiert til målet."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Instruksjonene for annullering. En <> </> *> verdien i parameteren gjør denne metoden tilsvarer <> </> *>."
    return:
      type: System.Threading.Tasks.Task
      description: "En oppgave som representerer den asynkrone operasjonen."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Kaller <> </> *> flere ganger for samme forekomsten før fullføring av oppgaven.       Kaller <> </> *> og <> </> *> for den samme forekomsten før fullføring av oppgaven.       Tilkoblingen faller eller den er lukket under <> </> *> kjøring.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> objektet ble lukket under utførelse av metode.       Returnert i oppgaveobjektet oppstod det et tidsavbrudd for tilkoblingsutvalg.       Returnert i oppgaveobjektet i <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> -objektet er lukket før metoden.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>er angitt i tilkoblingsstrengen."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Returnerte i oppgaveobjekt, en feil ble returnert av [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] som oppstod under åpning av tilkoblingen."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
