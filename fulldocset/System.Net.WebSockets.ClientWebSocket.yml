### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.ClientWebSocket
  id: ClientWebSocket
  children:
  - System.Net.WebSockets.ClientWebSocket.#ctor
  - System.Net.WebSockets.ClientWebSocket.Abort
  - System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseStatus
  - System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  - System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.Dispose
  - System.Net.WebSockets.ClientWebSocket.Options
  - System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.State
  - System.Net.WebSockets.ClientWebSocket.SubProtocol
  langs:
  - csharp
  name: ClientWebSocket
  nameWithType: ClientWebSocket
  fullName: System.Net.WebSockets.ClientWebSocket
  type: Class
  summary: "Inneholder en klient for å koble til WebSocket-tjenester."
  remarks: "Noen av klassene og klassen elementer i den <xref:System.Net.WebSockets>navneområdet støttes i Windows 7, Windows Vista SP2 og Windows Server 2008.</xref:System.Net.WebSockets> Imidlertid støttes bare offentlige implementeringer av klienten og serveren WebSockets i Windows 8 og Windows Server 2012. Klasse-elementer i den <xref:System.Net.WebSockets>navneområdet som støttes i Windows 7, Windows Vista SP2 og Windows Server 2008 er abstrakt klasse elementer.</xref:System.Net.WebSockets> Dette gjør at du utvikler arver å utvide disse abstrakt klasse klasser og klassen elementer med en faktisk implementering av klienten WebSockets."
  syntax:
    content: 'public sealed class ClientWebSocket : System.Net.WebSockets.WebSocket'
  inheritance:
  - System.Object
  - System.Net.WebSockets.WebSocket
  implements: []
  inheritedMembers:
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ClientWebSocket()
  nameWithType: ClientWebSocket.ClientWebSocket()
  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Oppretter en forekomst av den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> klasse."
  syntax:
    content: public ClientWebSocket ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: ClientWebSocket.Abort()
  fullName: System.Net.WebSockets.ClientWebSocket.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Tilkoblingen avbrytes og annullerer ventende i/u-operasjoner."
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Lukk den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task>objektet fullfører etter den <xref:System.Net.WebSockets.ClientWebSocket>forekomsten er lukket.</xref:System.Net.WebSockets.ClientWebSocket> </xref:System.Threading.Tasks.Task>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "WebSocket Lukk statusen."
    - id: statusDescription
      type: System.String
      description: "En beskrivelse av Lukk statusen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Et avbryte token brukes til å overføre varsling at denne operasjonen kan avbrytes."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.WebSockets.ClientWebSocket.CloseAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Lukk utdata for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task>objektet fullfører etter utdataene på den <xref:System.Net.WebSockets.ClientWebSocket>forekomsten er lukket.</xref:System.Net.WebSockets.ClientWebSocket> </xref:System.Threading.Tasks.Task>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "WebSocket Lukk statusen."
    - id: statusDescription
      type: System.String
      description: "En beskrivelse av Lukk statusen."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Et avbryte token brukes til å overføre varsling at denne operasjonen kan avbrytes."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Henter årsaken hvorfor Lukk håndtrykk ble startet på <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  syntax:
    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketCloseStatus&quot;></xref>.       Årsak hvorfor Lukk håndtrykk ble startet."
  overload: System.Net.WebSockets.ClientWebSocket.CloseStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Henter en beskrivelse av årsaken hvorfor det <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten ble lukket."
  syntax:
    content: public override string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "Returnerer <xref:System.String>.</xref:System.String>       Beskrivelse av årsaken hvorfor det <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten ble lukket."
  overload: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  id: ConnectAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ConnectAsync(Uri,CancellationToken)
  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Koble til en WebSocket-server som en asynkron operasjon."
  remarks: "Metoden ConnectAsync starter WebSocket-håndtrykk med et eksternt nettverk mål og forhandler undertype protokollen.       For vanlig WebSocket-tilkoblinger, kan du bruke den `ws://` skjemaet i URIen. For sikker WebSocket-tilkoblinger over TLS/SSL, kan du bruke den `wss://` skjemaet.       Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task>objektet fullfører etter tilkobling-forespørsel på den <xref:System.Net.WebSockets.ClientWebSocket>forekomsten er fullført.</xref:System.Net.WebSockets.ClientWebSocket> </xref:System.Threading.Tasks.Task>"
  syntax:
    content: public System.Threading.Tasks.Task ConnectAsync (Uri uri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: uri
      type: System.Uri
      description: "URIEN for WebSocket-serveren til å koble til."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Et avbryte token brukes til å overføre varsling at operasjonen skal avbrytes."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>       Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.WebSockets.ClientWebSocket.ConnectAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: ClientWebSocket.Dispose()
  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  syntax:
    content: public override void Dispose ();
    parameters: []
  overload: System.Net.WebSockets.ClientWebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.Options
  id: Options
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: Options
  nameWithType: ClientWebSocket.Options
  fullName: System.Net.WebSockets.ClientWebSocket.Options
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Henter WebSocket-alternativer for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  syntax:
    content: public System.Net.WebSockets.ClientWebSocketOptions Options { get; }
    return:
      type: System.Net.WebSockets.ClientWebSocketOptions
      description: "Returns <xref href=&quot;System.Net.WebSockets.ClientWebSocketOptions&quot;></xref>.       WebSocket alternativer for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  overload: System.Net.WebSockets.ClientWebSocket.Options*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Motta data på <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>objektet fullfører etter receive-forespørsel på den <xref:System.Net.WebSockets.ClientWebSocket>forekomsten er fullført.</xref:System.Net.WebSockets.ClientWebSocket> </xref:System.Threading.Tasks.Task%601>       Send nøyaktig én og én motta støttes på hver <xref:System.Net.WebSockets.ClientWebSocket>objektet parallelt.</xref:System.Net.WebSockets.ClientWebSocket>"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "Databufferen som skal motta svaret."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Et avbryte token brukes til å overføre varsling at denne operasjonen kan avbrytes."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Sende data <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task>objektet fullfører etter send forespørselen på den <xref:System.Net.WebSockets.ClientWebSocket>forekomsten er fullført.</xref:System.Net.WebSockets.ClientWebSocket> </xref:System.Threading.Tasks.Task>       Send nøyaktig én og én motta støttes på hver <xref:System.Net.WebSockets.ClientWebSocket>objektet parallelt.</xref:System.Net.WebSockets.ClientWebSocket>"
  syntax:
    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "Bufferen som inneholder meldingen sendes."
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "Angir om bufferen er ren tekst eller i et binært format."
    - id: endOfMessage
      type: System.Boolean
      description: "Angir om dette er den siste asynkron sendingen. Satt til <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Hvis dette er den siste send; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> ellers."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Et avbryte token brukes til å overføre varsling at denne operasjonen kan avbrytes."
    return:
      type: System.Threading.Tasks.Task
      description: "Oppgaveobjektet som representerer den asynkrone operasjonen."
  overload: System.Net.WebSockets.ClientWebSocket.SendAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.State
  id: State
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: State
  nameWithType: ClientWebSocket.State
  fullName: System.Net.WebSockets.ClientWebSocket.State
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Hente WebSocket-tilstanden for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  syntax:
    content: public override System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "Returns <xref href=&quot;System.Net.WebSockets.WebSocketState&quot;></xref>.       WebSocket-status for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  overload: System.Net.WebSockets.ClientWebSocket.State*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.WebSockets
  summary: "Henter den støttede WebSocket undertype protokollen for den <xref href=&quot;System.Net.WebSockets.ClientWebSocket&quot;> </xref> forekomsten."
  syntax:
    content: public override string SubProtocol { get; }
    return:
      type: System.String
      description: "Returnerer <xref:System.String>.</xref:System.String>       Støttede WebSocket undertype-protokollen."
  overload: System.Net.WebSockets.ClientWebSocket.SubProtocol*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.WebSockets.WebSocket
  isExternal: false
  name: System.Net.WebSockets.WebSocket
- uid: System.Net.WebSockets.ClientWebSocket.#ctor
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ClientWebSocket()
  nameWithType: ClientWebSocket.ClientWebSocket()
  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()
- uid: System.Net.WebSockets.ClientWebSocket.Abort
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Abort()
  nameWithType: ClientWebSocket.Abort()
  fullName: System.Net.WebSockets.ClientWebSocket.Abort()
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ConnectAsync(Uri,CancellationToken)
  nameWithType: ClientWebSocket.ConnectAsync(Uri,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(Uri,CancellationToken)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebSockets.ClientWebSocket.Dispose
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Dispose()
  nameWithType: ClientWebSocket.Dispose()
  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()
- uid: System.Net.WebSockets.ClientWebSocket.Options
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Options
  nameWithType: ClientWebSocket.Options
  fullName: System.Net.WebSockets.ClientWebSocket.Options
- uid: System.Net.WebSockets.ClientWebSocketOptions
  parent: System.Net.WebSockets
  isExternal: false
  name: ClientWebSocketOptions
  nameWithType: ClientWebSocketOptions
  fullName: System.Net.WebSockets.ClientWebSocketOptions
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebSockets.ClientWebSocket.State
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: State
  nameWithType: ClientWebSocket.State
  fullName: System.Net.WebSockets.ClientWebSocket.State
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol
- uid: System.Net.WebSockets.ClientWebSocket.#ctor*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ClientWebSocket
  nameWithType: ClientWebSocket.ClientWebSocket
- uid: System.Net.WebSockets.ClientWebSocket.Abort*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Abort
  nameWithType: ClientWebSocket.Abort
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: ClientWebSocket.CloseAsync
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: ClientWebSocket.CloseOutputAsync
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ConnectAsync
  nameWithType: ClientWebSocket.ConnectAsync
- uid: System.Net.WebSockets.ClientWebSocket.Dispose*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Dispose
  nameWithType: ClientWebSocket.Dispose
- uid: System.Net.WebSockets.ClientWebSocket.Options*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: Options
  nameWithType: ClientWebSocket.Options
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: ClientWebSocket.ReceiveAsync
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SendAsync
  nameWithType: ClientWebSocket.SendAsync
- uid: System.Net.WebSockets.ClientWebSocket.State*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: State
  nameWithType: ClientWebSocket.State
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol*
  parent: System.Net.WebSockets.ClientWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
