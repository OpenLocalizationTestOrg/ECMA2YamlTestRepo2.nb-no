### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Gir støtte for alternative måter å generere Microsoft mellomspråk (MSIL) og metadata for en dynamisk metode, inkludert metoder for oppretting av token, og for å sette inn koden, unntaksbehandling og lokal variabel signatur BLOBer."
  remarks: "Klassen DynamicILInfo gjør det mulig for utviklere å skrive sine egne MSIL generatorer i stedet for å bruke <xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator>       For å opprette forekomster av andre typer kalle metoder og så videre, må MSIL du kan generere inkludere token for disse enhetene. Klassen DynamicILInfo inneholder flere overlastingene av den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>metode, som returnerer tokener gyldig i omfanget for den gjeldende DynamicILInfo.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> For eksempel hvis du vil kalle overbelastning av den <xref:System.Console.WriteLine%2A?displayProperty=fullName>metoden, kan du få en <xref:System.RuntimeMethodHandle>for som overbelaste og sende den til den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>metode for å få et token ikke bygge inn i din MSIL.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       Når du har opprettet <xref:System.Byte>matriser for lokal variabel signatur, unntak og koden meldingsteksten, kan du bruke den <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, og <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>metoder for å sette dem til i <xref:System.Reflection.Emit.DynamicMethod>knyttet til DynamicILInfo-objekt.</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       Generering av dine egne metadata og MSIL krever velkjente Common Language infrastruktur CLI ()-dokumentasjonen, spesielt &quot;Partisjonen II: Metadata definisjon og semantikk&quot; og &quot;Partisjon III: CIL instruksjon angitt&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International.      > [!NOTE] > Bruker ikke DynamicILInfo til å generere kode som oppretter en representant til en annen dynamiske metoden ved å kalle konstruktøren representanten direkte. Bruk i stedet den <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>metode for å opprette representanten.</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> En representant som opprettes med representanten konstruktøren har ikke en referanse til målet dynamiske-metoden. Metoden dynamiske kan gode av datasanering mens representanten er fremdeles i bruk."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter metoden dynamiske der brødtekst er generert av den gjeldende forekomsten."
  remarks: "En <xref:System.Reflection.Emit.DynamicILInfo>objektet er alltid tilknyttet en dynamisk måte.</xref:System.Reflection.Emit.DynamicILInfo> Formålet med <xref:System.Reflection.Emit.DynamicILInfo>klassen er å angi en annen måte å sette inn MSIL dataflyten, unntaksbehandling, og lokal variabel signaturen til en dynamisk metode for utviklere som ønsker å generere MSIL uten å bruke <xref:System.Reflection.Emit.ILGenerator>klasse.</xref:System.Reflection.Emit.ILGenerator> </xref:System.Reflection.Emit.DynamicILInfo>"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "En <xref:System.Reflection.Emit.DynamicMethod>-objekt som representerer metoden dynamiske som gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet er kodegenerering.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer signaturen for den tilknyttede dynamiske metoden."
  remarks: 'For informasjon om signaturen BLOBer, kan du se dokumentasjonen for Common Language infrastruktur (CLI), spesielt &quot;partisjonen II: Metadata definisjon og semantikk&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "En matrise som inneholder signaturen."
    return:
      type: System.Int32
      description: "Et token kan bygges inn i metadataene og MSIL dataflyten for den tilknyttede dynamiske metoden."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer en dynamisk metode kalles fra den tilknyttede metoden."
  remarks: "Token som returneres av denne metoden overlasten gjør det mulig å kalle en dynamisk metode fra metoden dynamiske tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Hvis du vil kalle tilknyttede dynamiske metoden rekursivt, angir du verdien til den <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>egenskapen.</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "Metoden dynamiske å kalle."
    return:
      type: System.Int32
      description: "Et token kan bygges inn i MSIL dataflyten for den tilknyttede dynamiske metoden som mål for en MSIL instruksjon."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer et felt å åpnes fra den tilknyttede dynamiske metoden."
  remarks: "Skaff deg et token for et felt som skal brukes fra metoden dynamiske tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Bruk <xref:System.Type.GetField%2A?displayProperty=fullName>metode for å hente en <xref:System.Reflection.FieldInfo>for feltet du vil ha tilgang til, og deretter bruker <xref:System.Reflection.FieldInfo.FieldHandle%2A>til å hente <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Feltet skal ha tilgang til."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som har tilgang til felt i området for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer en metode til å åpnes fra den tilknyttede dynamiske metoden."
  remarks: "Skaff deg et token for en metode som skal brukes av metoden dynamiske tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Bruk <xref:System.Type.GetMethod%2A?displayProperty=fullName>metode for å hente en <xref:System.Reflection.MethodInfo>for metoden du vil ha tilgang til, og deretter bruke <xref:System.Reflection.MethodBase.MethodHandle%2A>til å hente <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>      > [!NOTE] > For en metode som hører til en generell type, kan du bruke den <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>metoden overbelaste og angi en <xref:System.RuntimeTypeHandle>for den generelle typen.</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Metode for å få tilgang til."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som har tilgang til metoder, for eksempel <xref:System.Reflection.Emit.OpCodes.Call>eller <xref:System.Reflection.Emit.OpCodes.Ldtoken>, i området for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer en type som skal brukes i den tilknyttede dynamiske metoden."
  remarks: "Token som returneres av denne metoden overlasten kan du definere en lokal variabel type, og Send MSIL for å opprette en forekomst av en type i metoden dynamiske tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo>       Å hente en <xref:System.RuntimeTypeHandle>som representerer typen bruker det <xref:System.Type.TypeHandle%2A?displayProperty=fullName>egenskapen.</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "Typen som skal brukes."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som krever typen i området for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer en strenglitteral som skal brukes i den tilknyttede dynamiske metoden."
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "Strengen som skal brukes."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som krever en streng i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer et felt å åpnes fra tilknyttede dynamiske metoden; feltet er for den angitte generelle typen."
  remarks: "Skaff deg et token for et felt som skal brukes fra metoden dynamiske tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Bruk <xref:System.Type.GetField%2A?displayProperty=fullName>metode for å hente en <xref:System.Reflection.FieldInfo>for feltet du vil ha tilgang til, og deretter bruke <xref:System.Reflection.FieldInfo.FieldHandle%2A>til å hente <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Feltet skal ha tilgang til."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Den generelle typen i feltet tilhører."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som har tilgang til felt i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Henter en token, gyldig i omfanget for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, som representerer en metode på en generell type."
  remarks: "Skaff deg et token for en metode som kalles med dynamiske Moden tilknyttet gjeldende <xref:System.Reflection.Emit.DynamicILInfo>objektet.</xref:System.Reflection.Emit.DynamicILInfo> Bruk <xref:System.Type.GetMethod%2A?displayProperty=fullName>metode for å hente en <xref:System.Reflection.MethodInfo>for metoden du vil ringe, og deretter bruke <xref:System.Reflection.MethodBase.MethodHandle%2A>til å hente <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Metoden."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Den generelle typen metoden hører til."
    return:
      type: System.Int32
      description: "Et token som kan brukes som operand i en MSIL instruksjon som har tilgang til metoder, for eksempel <xref:System.Reflection.Emit.OpCodes.Call>eller <xref:System.Reflection.Emit.OpCodes.Ldtoken>, i området for gjeldende <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> objektet.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir koden meldingsteksten i den tilknyttede dynamiske metoden."
  remarks: "Ingen gyldighetsperiode utføres for MSIL dataflyten.       Kaller denne metoden en gang erstatter første MSIL dataflyten med andre.       Generering av dine egne metadata og MSIL krever velkjente Common Language infrastruktur CLI ()-dokumentasjonen, spesielt &quot;Partisjonen II: Metadata definisjon og semantikk&quot; og &quot;Partisjon III: CIL instruksjon angitt&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "En matrise som inneholder MSIL dataflyten."
    - id: maxStackSize
      type: System.Int32
      description: "Maksimalt antall elementer i operandstakken under utføring av metoden."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir koden meldingsteksten i den tilknyttede dynamiske metoden."
  remarks: "Ingen gyldighetsperiode utføres for MSIL dataflyten.       Kaller denne metoden en gang erstatter første MSIL dataflyten med andre.       Generering av dine egne metadata og MSIL krever velkjente med dokumentasjonen Common Language infrastruktur (CLI), spesielt &quot;partisjonen II: Metadata definisjon og semantikk&quot; og &quot;partisjonen III: CIL instruksjonssett.&quot; Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International."
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "En peker til en bytematrise som inneholder MSIL dataflyten."
    - id: codeSize
      type: System.Int32
      description: "Antall byte i MSIL dataflyten."
    - id: maxStackSize
      type: System.Int32
      description: "Maksimalt antall elementer i operandstakken under utføring av metoden."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> og <code>codeSize</code> er større enn 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>er mindre enn 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir metadataene unntak for den tilknyttede dynamiske metoden."
  remarks: 'Unntak metadataene for en metode som definerer plasseringen og størrelsen for alle `try`, `catch`, `finally`, filter, og som er feil. For informasjon om oppsettet av disse metadataene, kan du se dokumentasjonen for Common Language infrastruktur (CLI), spesielt &quot;partisjonen II: Metadata definisjon og semantikk&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "En matrise som inneholder unntak-metadata."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir metadataene unntak for den tilknyttede dynamiske metoden."
  remarks: 'Unntak metadataene for en metode som definerer plasseringen og størrelsen for alle `try`, `catch`, `finally`, filter, og som er feil. For informasjon om oppsettet av disse metadataene, kan du se dokumentasjonen Common Language infrastruktur (CLI), spesielt &quot;Partisjonen II: Metadata definisjon og semantikk&quot; og &quot;Partisjon III: CIL instruksjon angitt&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International.'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "En peker til en bytematrise som inneholder unntak-metadata."
    - id: exceptionsSize
      type: System.Int32
      description: "Antall byte unntak metadata."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> og <code>exceptionSize</code> er større enn 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>er mindre enn 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir den lokale variabelen signaturen som beskriver oppsettet for lokale variabler for den tilknyttede dynamiske metoden."
  remarks: "Den lokale variabelen signaturen beskriver oppsettet for en metode lokale variabler. For å forenkle konstruksjon av den lokale variabelen signaturen, kan du bruke den `static` (`Shared` i Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>metode for å få en <xref:System.Reflection.Emit.SignatureHelper>for lokale signaturen.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       For informasjon om lokale variabelen signaturer, kan du se dokumentasjonen for Common Language infrastruktur (CLI), spesielt &quot;partisjonen II: Metadata definisjon og semantikk&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "En matrise som inneholder oppsettet for lokale variabler for den tilknyttede <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Angir den lokale variabelen signaturen som beskriver oppsettet for lokale variabler for den tilknyttede dynamiske metoden."
  remarks: "Den lokale variabelen signaturen beskriver oppsettet for en metode lokale variabler. For å forenkle konstruksjon av den lokale variabelen signaturen, kan du bruke den `static` (`Shared` i Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>metode for å få en <xref:System.Reflection.Emit.SignatureHelper>for lokale signaturen.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       For informasjon om lokale variabelen signaturer, kan du se dokumentasjonen for Common Language infrastruktur (CLI), spesielt &quot;partisjonen II: Metadata definisjon og semantikk&quot;. Dokumentasjonen er tilgjengelig på Internett; Se [ECMA C# og Common Language infrastruktur standarder](http://go.microsoft.com/fwlink/?LinkID=99212) på MSDN og [Standard ECMA-335 - Common Language infrastruktur (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) på webområdet Ecma International."
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "En matrise som inneholder oppsettet for lokale variabler for den tilknyttede <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
    - id: signatureSize
      type: System.Int32
      description: "Antall byte i signaturen."
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> og <code>signatureSize</code> er større enn 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>er mindre enn 0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
