### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessThread
  id: ProcessThread
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
  - System.Diagnostics.ProcessThread.WaitReason
  langs:
  - csharp
  name: ProcessThread
  nameWithType: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  summary: "Representerer en tråd for operativsystemet prosessen."
  remarks: "Bruk ProcessThread til å få informasjon om en tråd som kjører på systemet. Gjør dette, kan du for eksempel for å overvåke trådens ytelse egenskaper.      > [!IMPORTANT] > Denne typen implementerer den <xref:System.IDisposable>grensesnitt.</xref:System.IDisposable> Når du er ferdig ved hjelp av typen, må du fjerne den direkte eller indirekte. Hvis du vil fjerne av typen direkte, kan du kalle den <xref:System.IDisposable.Dispose%2A>metoden i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Hvis du vil fjerne den indirekte, bruke et språk som `using` (i C#) eller `Using` (i Visual Basic). For mer informasjon, se &quot;Ved hjelp av et objekt som implementerer IDisposable&quot; i den <xref:System.IDisposable>grensesnittet emnet.</xref:System.IDisposable>       En tråd er en bane for kjøring av via et program. Det er den minste enheten utførelsen Win32 planlegger. Det består av en bunke, statusen for CPU-registrerer og en oppføring i listen kjøring av systemet Scheduler.       En prosess består av én eller flere tråder og koden, data og andre ressurser i et program i minnet. Vanlige programmet ressurser er åpne filer, semaforer og dynamisk tilordnede minne. Hver ressurs for en prosess er felles for alle som Prosessens tråder.       Et program utfører når systemet scheduler gir kjøring kontroll til en av programmets tråder. Scheduler bestemmer hvilken tråder som skal kjøres når. En lavere prioritet tråd kan tvinges til å vente mens høyere prioritet tråder fullfører sine oppgaver. På flere prosessorer datamaskiner kan scheduler flytte individuelle tråder til forskjellige prosessorer fordelingen dermed CPU-belastningen.       Hver prosess starter med et enkelt tråd som er kjent som den primære tråden. En tråd kan opprette flere tråder. Alle tråder i en prosess deler adresseområde for denne prosessen.       Den primære tråden er ikke nødvendigvis i første indeks i samlingen.      > [!NOTE] > Fra og med .NET Framework, versjon 2.0, muligheten til å referanse ytelsestelleren data på datamaskinene er nå fjernet for mange av .NET Framework-metoder og egenskaper. Denne endringen ble gjort til å forbedre ytelsen og aktivere ikke-administratorer kan bruke ProcessThread-klassen. Noen programmer som ikke fikk unntak i tidligere versjoner av .NET Framework kan derfor nå få <xref:System.NotSupportedException>.</xref:System.NotSupportedException> Metodene og egenskapene berørt er for mange til å vise her, men Unntaksinformasjonen er lagt til emnene berørte medlem.       Tråder i en prosess Utfør individuelt og er ikke klar over hverandre med mindre du gjøre dem synlige til hverandre. Tråder som deler vanlige ressurser, må-koordinat for arbeid ved hjelp av semaforer eller en annen metode for interprosesskommunikasjon.       Hvis du trenger en samling av alle ProcessThread-objekter som er knyttet til gjeldende prosessen, kan du hente det <xref:System.Diagnostics.Process.Threads%2A>for den <xref:System.Diagnostics.Process>forekomsten.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.Threads%2A>"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class ProcessThread : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.BasePriority
  id: BasePriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter basisprioriteten trådens."
  remarks: "BasePriority er Start prioriteten for prosess-tråden. Du kan vise informasjon om basisprioriteten via System-skjermen prioritet Base teller.       Operativsystemet beregner en tråd basisprioriteten ved å kombinere trådens prioritet på området med prosessens prioritetsklasse. Du kan angi prosessens <xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName>til en av verdiene i den <xref:System.Diagnostics.ProcessPriorityClass>opplisting som <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, eller <xref:System.Diagnostics.ProcessPriorityClass>.</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName> Du kan angi trådens <xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>egenskapen til en liste med verdier som bounds trådens basisprioriteten.</xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> Win32 bruker fire prioritet klasser med sju basisprioriteten nivåer per klasse.       Trådens gjeldende prioritet kan avvike fra basisprioriteten. Operativsystemet kan for eksempel endre den <xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>egenskap basert på tidspunktet utløp eller andre øker når en prosess må settes lengre enn andre, for å få tilgang til prosessoren.</xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> I tillegg kan du angi den <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>egenskapen vil føre til at systemet for å øke prioriteten for en tråd midlertidig når prosessen som utføres av ventende tilstand.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> Prioriteten er tilbakestilt når prosessen returnerer til ventende tilstand."
  syntax:
    content: public int BasePriority { get; }
    return:
      type: System.Int32
      description: "Basisprioriteten trådens operativsystemet beregnes ved å kombinere prosessen prioritetsklassen med prioriteringsnivå tilknyttede trådens."
  overload: System.Diagnostics.ProcessThread.BasePriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  id: CurrentPriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter gjeldende prioriteten for tråden."
  remarks: "Trådens gjeldende prioritet kan avvike fra basisprioriteten. Operativsystemet kan for eksempel endre CurrentPriority egenskap basert på tidspunktet gått eller andre øker når en prosess må settes lengre enn andre, for å få tilgang til prosessoren. I tillegg kan du angi den <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>egenskapen vil føre til at systemet for å øke prioriteten for en tråd midlertidig når prosessen som utføres av ventende tilstand.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> Prioriteten er tilbakestilt når prosessen returnerer til ventende tilstand."
  syntax:
    content: public int CurrentPriority { get; }
    return:
      type: System.Int32
      description: "Gjeldende prioriteten til at tråden kan avvike fra basisprioriteten basert på hvordan operativsystemet planlegging tråden. Prioriteten kan være midlertidig boosted for en aktiv tråd."
  overload: System.Diagnostics.ProcessThread.CurrentPriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.Id
  id: Id
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter den unike identifikatoren for tråden."
  remarks: "Operativsystemet blir brukt tråd ID-numre, som identifiserer tråder bare under deres levetid."
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "Den unike identifikatoren som er knyttet til en bestemt tråd."
  overload: System.Diagnostics.ProcessThread.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  id: IdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Angir den foretrukne prosessoren for denne tråden til å kjøre på."
  remarks: "IdealProcessor-verdien er null.  Med andre ord, for å angi tråd affinitet for første prosessoren egenskapen til null.       Systemet planlegger tråder på deres foretrukne prosessorer når det er mulig.       En prosess tråd kan migrere fra prosessor til prosessor med hver overføring laste prosessor-bufferen. Angi en prosessor for en tråd kan forbedre ytelsen under tungt system laster ved å redusere antall ganger hurtigbufferen prosessor lastes inn på nytt."
  example:
  - "The following example demonstrates how to set the IdealProcessor property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_25_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_25_1.cs)]"
  syntax:
    content: public int IdealProcessor { set; }
    return:
      type: System.Int32
      description: "Den foretrukne prosessoren for tråden, brukes når systemet planlegger tråder, for å finne ut hvilken prosessor til å kjøre tråden på."
  overload: System.Diagnostics.ProcessThread.IdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Systemet kan ikke angi tråden til å starte på den angitte prosessoren."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om operativsystemet midlertidig bør øke prioriteten for den tilknyttede tråden når hovedvinduet av trådens prosessen får fokus."
  remarks: "Når PriorityBoostEnabled er `true`, at systemet øker midlertidig trådens prioritet når den tilknyttede prosessen som utføres av ventende tilstand. Denne handlingen hindrer at andre prosesser å avbryte behandlingen av gjeldende tråd. PriorityBoostEnabled påvirkes alle eksisterende tråder, i tillegg til eventuelle tråder senere opprettes av prosessen. For å gjenopprette normalt, angir du <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>egenskapen `false`.</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>       PriorityBoostEnabled har en effekt når tråden kjører i en prosess som har en <xref:System.Diagnostics.Process.PriorityClass%2A>satt til en av dynamiske prioritet opplisting verdier (<xref:System.Diagnostics.ProcessPriorityClass>, <xref:System.Diagnostics.ProcessPriorityClass>, eller <xref:System.Diagnostics.ProcessPriorityClass>).</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A>      > [!NOTE] > Øke prioriteten for høy kan tømme ressurser fra viktige operativsystem og nettverk fungerer. Dette kan føre til problemer med andre oppgaver for operativsystemet."
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis du vil øke trådens prioritet når brukeren samhandler med prosessen grensesnitt; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente informasjonen som høyere prioritet.       - eller - kan ikke angi informasjonen som høyere prioritet."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  id: PriorityLevel
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir prioriteringsnivå trådens."
  remarks: "Prioriteringsnivå er ikke en enkelt verdi, men i stedet en liste med verdier. Operativsystemet beregner trådens basisprioriteten ved hjelp av prosessens <xref:System.Diagnostics.Process.PriorityClass%2A>kan velge en verdi fra området som er angitt i egenskapen PriorityLevel.</xref:System.Diagnostics.Process.PriorityClass%2A>"
  syntax:
    content: public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }
    return:
      type: System.Diagnostics.ThreadPriorityLevel
      description: "Én av de <xref href=&quot;System.Diagnostics.ThreadPriorityLevel&quot;> </xref> verdier som angir et område som bounds trådens prioritet."
  overload: System.Diagnostics.ProcessThread.PriorityLevel*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente tråd prioritet nivå informasjonen.       - eller - tråd prioriteringsnivå kan ikke angis."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter hvor lang tid at tråden har brukt kjører kode i operativsystemkjernen."
  remarks: "Windows bruker flere forskjellige beskyttelsesmekanismer og nederst i alle er forskjellen mellom brukermodus og priviligert modus. PrivilegedProcessorTime tilsvarer tiden som programmet har brukt kjører i priviligert modus, i operativsystemkjernen. Den <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>egenskapen angir hvor lang tid at programmet er kjører kode i brukermodus, utenfor system-kjerner.</xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>       Brukermodus begrenser programmet på to viktige måter. Først programmet kan ikke direkte tilgang til de eksterne enhetene, men i stedet må kalle kjernen operativsystem for å hente eller angi eksterne data. Operativsystemet kan derfor kontrollere én applikasjon ikke ødelegger eksterne data som kreves av en annen. Det andre kan ikke programmet lese eller endre data selve operativsystemet opprettholder. Denne begrensningen forhindrer programmer fra ved et uhell eller med hensikt ødelegge kjernen. Hvis programmet trenger operativsystem for å utføre en operasjon, kaller én av systemets for. Mange av disse overgang til priviligert modus utføre operasjonen, og gå tilbake jevnt til brukermodus."
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "En <xref:System.TimeSpan>som angir hvor lang tid at tråden har brukt kjører kode i operativsystemet-kjerner.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente tråd tiden."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Angir prosessorer som tilknyttede tråden kan kjøre."
  remarks: "Prosessoraffinitet av en tråd er settet med prosessorer som den har en relasjon til. Disse it kan bli planlagt til å kjøre på.       ProcessorAffinity representerer hver prosessor som litt. Bit 0 representerer prosessor én bit 1 representerer prosessor to og så videre. Tabellen nedenfor viser et delsett av mulig ProcessorAffinity for et fire prosessorer.      | Egenskapsverdien (i heksadesimal) | Ugyldig prosessorer |   |---------------------------------------|----------------------|   | 0x0001 | 1 |   | 0x0002 | 2 |   | 0x0003 | 1 eller 2 |   | 0x0004 | 3 |   | 0x0005 | 1 eller 3 |   | 0x0007 | 1, 2 eller 3 |   | 0x000F | 1, 2, 3 eller 4 |       Du kan også angi enkelt, foretrukne prosessor for en tråd ved å angi den <xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>egenskapen.</xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> En prosess tråd kan migrere fra prosessor til prosessor med hver overføring laste prosessor-bufferen. Angi en prosessor for en tråd kan forbedre ytelsen under tungt system laster ved å redusere antall ganger hurtigbufferen prosessor lastes inn på nytt."
  example:
  - "The following example shows how to set the ProcessorAffinity property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_22_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_22_1.cs)]"
  syntax:
    content: public IntPtr ProcessorAffinity { set; }
    return:
      type: System.IntPtr
      description: "En <xref:System.IntPtr>som peker til et sett med biter, som representerer en prosessor tråden kan kjøre på.</xref:System.IntPtr>"
  overload: System.Diagnostics.ProcessThread.ProcessorAffinity*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke angi prosessoraffiniteten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  id: ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Tilbakestiller ideelle prosessoren for denne tråden å angi at det er ingen enkelt ideelle prosessor. Med andre ord, slik at alle prosessorer ideelle."
  syntax:
    content: public void ResetIdealProcessor ();
    parameters: []
  overload: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke tilbakestille ideelle prosessoren."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartAddress
  id: StartAddress
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter minneadressen til funksjonen som operativsystemet kalt som startet denne tråden."
  remarks: "Hver prosess starter med et enkelt tråd som er kjent som den primære tråden. En tråd kan opprette flere tråder.       En prosess har et virtuelt adresseområde, kjørbar kode, data, objekthåndtak, miljøvariabler, basisprioriteten, og minimums- og maksimumsverdi jobber angitt størrelse. Tråder som en prosess dele virtuelle adressen plass og systemressurser. I tillegg lagres hver tråd unntak behandlingsprogrammer, en planlegging prioritet og et sett med strukturer som lagrer systemet tråd konteksten mens tråden venter på å planlegges. Konteksten tråd inkluderer trådens maskinen registrerer, kjernestakken, en tråd miljøet blokk og en bruker-bunke i adresseområdet til trådens prosessen.       Alle Windows-tråd begynner faktisk kjøring i en system-angitt funksjon, ikke Programdefinert funksjonen. Startadressen for den primære tråden er derfor det samme (som den representerer adressen til funksjonen angitt system) for alle Windows-prosesser i systemet. Egenskapen StartAddress kan imidlertid du startadressen i funksjonen, som er spesifikke for programmet."
  syntax:
    content: public IntPtr StartAddress { get; }
    return:
      type: System.IntPtr
      description: "Trådens startadressen, som peker til funksjonen Programdefinert som tråden utfører."
  overload: System.Diagnostics.ProcessThread.StartAddress*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartTime
  id: StartTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter tidspunktet operativsystemet startet tråden."
  syntax:
    content: public DateTime StartTime { get; }
    return:
      type: System.DateTime
      description: "En <xref:System.DateTime>som representerer tiden som var på systemet når operativsystemet startet tråden.</xref:System.DateTime>"
  overload: System.Diagnostics.ProcessThread.StartTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente tråd tiden."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ThreadState
  id: ThreadState
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter gjeldende status for denne tråden."
  remarks: "<xref:System.Diagnostics.ProcessThread.WaitReason%2A>Verdien for egenskapen er bare gyldig når ThreadState-verdien er <xref:System.Diagnostics.ThreadState>.</xref:System.Diagnostics.ThreadState> </xref:System.Diagnostics.ProcessThread.WaitReason%2A> Sjekk verdien for ThreadState derfor før du får den <xref:System.Diagnostics.ProcessThread.WaitReason%2A>egenskapen.</xref:System.Diagnostics.ProcessThread.WaitReason%2A>"
  syntax:
    content: public System.Diagnostics.ThreadState ThreadState { get; }
    return:
      type: System.Diagnostics.ThreadState
      description: "En <xref href=&quot;System.Diagnostics.ThreadState&quot;> </xref> som angir at tråden kjøring, for eksempel kjører, venter eller er avsluttet."
  overload: System.Diagnostics.ProcessThread.ThreadState*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter den totale mengden tid som denne tråden har brukt ved hjelp av prosessoren."
  remarks: "Egenskapen TotalProcessorTime angir den totale mengden tid at systemet har utført tråden utenfor ventende tilstand og gitt den prioritet på alle prosessorer. På et flere prosessorsystem, vil denne verdien inkluderer tiden som brukes på hver prosessor hvis tråden brukt mer enn én prosessor.       Egenskapen TotalProcessorTime er summen av den <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>og <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>Egenskaper.</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> </xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "En <xref:System.TimeSpan>som angir hvor lang tid at tråden har hatt kontroll over prosessoren.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.TotalProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente tråd tiden."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter hvor lang tid at den tilhørende tråden har brukt kjører koden i programmet."
  remarks: "Windows NT bruker flere forskjellige beskyttelsesmekanismer og nederst i alle er forskjellen mellom brukermodus og priviligert modus. UserProcessorTime tilsvarer tiden som programmet har brukt kjører i brukermodus, utenfor operativsystemkjernen. Den <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>tilsvarer hvor lang tid at programmet er brukte kjører kode i priviligert modus i system-kjerner.</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>       Brukermodus begrenser programmet på to viktige måter. Først programmet kan ikke direkte tilgang til de eksterne enhetene, men i stedet må kalle kjernen operativsystem for å hente eller angi eksterne data. Operativsystemet kan derfor kontrollere én applikasjon ikke ødelegger eksterne data som kreves av en annen. Det andre kan ikke programmet lese eller endre data selve operativsystemet opprettholder. Denne begrensningen forhindrer programmer fra ved et uhell eller med hensikt ødelegge kjernen. Hvis programmet trenger operativsystem for å utføre en operasjon, kaller én av systemets for. Mange av disse overgang til priviligert modus utføre operasjonen, og gå tilbake jevnt til brukermodus."
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "En <xref:System.TimeSpan>som angir hvor lang tid at tråden har brukt kjører koden i programmet, i motsetning til i operativsystemet-kjerner.</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.UserProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke hente tråd tiden."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.WaitReason
  id: WaitReason
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter årsaken til at tråden venter."
  remarks: "Egenskapen WaitReason er bare gyldig når <xref:System.Diagnostics.ProcessThread.ThreadState%2A>er <xref:System.Diagnostics.ThreadState>.</xref:System.Diagnostics.ThreadState> </xref:System.Diagnostics.ProcessThread.ThreadState%2A> Kontroller derfor den <xref:System.Diagnostics.ProcessThread.ThreadState%2A>verdi før du får egenskapen WaitReason.</xref:System.Diagnostics.ProcessThread.ThreadState%2A>"
  syntax:
    content: public System.Diagnostics.ThreadWaitReason WaitReason { get; }
    return:
      type: System.Diagnostics.ThreadWaitReason
      description: "En <xref href=&quot;System.Diagnostics.ThreadWaitReason&quot;> </xref> som representerer årsaken til at tråden er i ventende tilstand."
  overload: System.Diagnostics.ProcessThread.WaitReason*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tråden er ikke i ventende tilstand."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Plattformen er Windows 98 eller installasjonen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Prosessen er på en ekstern datamaskin."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Diagnostics.ProcessThread.BasePriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
- uid: System.Diagnostics.ThreadPriorityLevel
  parent: System.Diagnostics
  isExternal: false
  name: ThreadPriorityLevel
  nameWithType: ThreadPriorityLevel
  fullName: System.Diagnostics.ThreadPriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
- uid: System.Diagnostics.ProcessThread.StartAddress
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.ProcessThread.ThreadState
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
- uid: System.Diagnostics.ThreadState
  parent: System.Diagnostics
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Diagnostics.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
- uid: System.Diagnostics.ThreadWaitReason
  parent: System.Diagnostics
  isExternal: false
  name: ThreadWaitReason
  nameWithType: ThreadWaitReason
  fullName: System.Diagnostics.ThreadWaitReason
- uid: System.Diagnostics.ProcessThread.BasePriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
- uid: System.Diagnostics.ProcessThread.CurrentPriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
- uid: System.Diagnostics.ProcessThread.PriorityLevel*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor
  nameWithType: ProcessThread.ResetIdealProcessor
- uid: System.Diagnostics.ProcessThread.StartAddress*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
- uid: System.Diagnostics.ProcessThread.ThreadState*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
