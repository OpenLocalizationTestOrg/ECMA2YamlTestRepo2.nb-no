### YamlMime:ManagedReference
items:
- uid: System.Collections.Queue
  id: Queue
  children:
  - System.Collections.Queue.#ctor
  - System.Collections.Queue.#ctor(System.Collections.ICollection)
  - System.Collections.Queue.#ctor(System.Int32)
  - System.Collections.Queue.#ctor(System.Int32,System.Single)
  - System.Collections.Queue.Clear
  - System.Collections.Queue.Clone
  - System.Collections.Queue.Contains(System.Object)
  - System.Collections.Queue.CopyTo(System.Array,System.Int32)
  - System.Collections.Queue.Count
  - System.Collections.Queue.Dequeue
  - System.Collections.Queue.Enqueue(System.Object)
  - System.Collections.Queue.GetEnumerator
  - System.Collections.Queue.IsSynchronized
  - System.Collections.Queue.Peek
  - System.Collections.Queue.Synchronized(System.Collections.Queue)
  - System.Collections.Queue.SyncRoot
  - System.Collections.Queue.ToArray
  - System.Collections.Queue.TrimToSize
  langs:
  - csharp
  name: Queue
  nameWithType: Queue
  fullName: System.Collections.Queue
  type: Class
  summary: "Representerer et første-modulen for First samling av objekter."
  remarks: "Denne klassen implementerer en kø som en sirkulær matrise. Objekter som er lagret i en kø er satt inn i én end og fjernes fra den andre.       Køer og bunker er nyttig når du trenger midlertidige lagringsplassen som informasjon. Det vil si når du vil forkaste et element etter henting av verdien. Bruk køen Hvis du trenger tilgang til informasjonen i samme rekkefølge som den er lagret i samlingen. Bruk <xref:System.Collections.Stack>Hvis du trenger tilgang til informasjonen i omvendt rekkefølge.</xref:System.Collections.Stack> Bruk <xref:System.Collections.Concurrent.ConcurrentQueue%601>eller <xref:System.Collections.Concurrent.ConcurrentStack%601>Hvis du trenger tilgang til samlingen fra flere tråder samtidig.</xref:System.Collections.Concurrent.ConcurrentStack%601> </xref:System.Collections.Concurrent.ConcurrentQueue%601>       Tre primære operasjoner kan utføres på en kø og elementene:- <xref:System.Collections.Queue.Enqueue%2A>legger til et element på slutten av køen.</xref:System.Collections.Queue.Enqueue%2A>      - <xref:System.Collections.Queue.Dequeue%2A>fjerner eldste elementet fra starten av køen.</xref:System.Collections.Queue.Dequeue%2A>      - <xref:System.Collections.Queue.Peek%2A>returnerer eldste elementet som ved starten av køen, men ikke fjerner den fra køen.</xref:System.Collections.Queue.Peek%2A>       Egenskaper for en kø er antallet elementer køen kan inneholde. Som elementer er lagt til en kø, kapasiteten økes automatisk etter behov via ny tildeling.  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når køen er laget. Standard veksten faktorer er 2.0. Kapasitet av køen, alltid økes med minst minst fire, uavhengig av veksten faktorer. For eksempel vil en kø med en veksten faktorer av 1.0 alltid øke kapasitet med fire når større kapasitet kreves.       Køen godtar `null` som en gyldig verdi og tillater dupliserte elementer.       Generell versjon av denne samlingen, kan du se<xref:System.Collections.Generic.Queue%601?displayProperty=fullName></xref:System.Collections.Generic.Queue%601?displayProperty=fullName>"
  example:
  - "The following example shows how to create and add values to a Queue and how to print out its values.  \n  \n [!code-cs[Classic Queue Example#1](~/add/codesnippet/csharp/t-system.collections.queue_1.cs)]\n [!code-cpp[Classic Queue Example#1](~/add/codesnippet/cpp/t-system.collections.queue_1.cpp)]\n [!code-vb[Classic Queue Example#1](~/add/codesnippet/visualbasic/t-system.collections.queue_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Queue/QueueDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Queue : ICloneable, System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Queue.#ctor
  id: '#ctor'
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Queue()
  nameWithType: Queue.Queue()
  fullName: System.Collections.Queue.Queue()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Queue&quot;> </xref> klassen som er tomt, har standard første kapasitet og bruker standard veksten faktorer."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antallet elementer i <xref:System.Collections.Queue>kan inneholde.</xref:System.Collections.Queue> </xref:System.Collections.Queue>  Som elementer er lagt til i en <xref:System.Collections.Queue>, kapasiteten økes automatisk etter behov via ny tildeling.</xref:System.Collections.Queue>  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue>       Denne konstruktøren, er en O(1)-operasjon."
  syntax:
    content: public Queue ();
    parameters: []
  overload: System.Collections.Queue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Queue(ICollection)
  nameWithType: Queue.Queue(ICollection)
  fullName: System.Collections.Queue.Queue(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Queue&quot;> </xref> klassen som inneholder elementer fra den angitte samlingen har samme første kapasitet som antall elementer som er overført, og bruker standard veksten faktorer."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antallet elementer i <xref:System.Collections.Queue>kan inneholde.</xref:System.Collections.Queue> </xref:System.Collections.Queue>  Som elementer er lagt til i en <xref:System.Collections.Queue>, kapasiteten økes automatisk etter behov via ny tildeling.</xref:System.Collections.Queue>  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue>       Elementene kopieres til den <xref:System.Collections.Queue>i samme rekkefølge som leses av den <xref:System.Collections.IEnumerator>for <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.Queue>       Denne konstruktøren, er en O (`n`) operasjonen, der `n` er antallet elementer i `col`."
  syntax:
    content: public Queue (System.Collections.ICollection col);
    parameters:
    - id: col
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>å kopiere elementer fra.</xref:System.Collections.ICollection>"
  overload: System.Collections.Queue.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>col</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Queue.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Queue(Int32)
  nameWithType: Queue.Queue(Int32)
  fullName: System.Collections.Queue.Queue(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Queue&quot;> </xref> klassen som er tomt, har den angitte opprinnelige kapasiteten og bruker standard veksten faktorer."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antallet elementer i <xref:System.Collections.Queue>kan inneholde.</xref:System.Collections.Queue> </xref:System.Collections.Queue>  Som elementer er lagt til i en <xref:System.Collections.Queue>, kapasiteten økes automatisk etter behov via ny tildeling.</xref:System.Collections.Queue>  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue>       Hvis størrelsen på samlingen kan beregnede, trenger ved å angi første kapasiteten utføre flere endring operasjoner ved å legge til elementer i <xref:System.Collections.Queue>.</xref:System.Collections.Queue>       Denne konstruktøren, er en O (`n`) operasjonen, der `n` er `capacity`."
  syntax:
    content: public Queue (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Startantallet med elementer som i <xref href=&quot;System.Collections.Queue&quot;> </xref> kan inneholde."
  overload: System.Collections.Queue.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>er mindre enn null."
  platform:
  - net462
- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Queue(Int32,Single)
  nameWithType: Queue.Queue(Int32,Single)
  fullName: System.Collections.Queue.Queue(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Queue&quot;> </xref> klassen som er tomt, har den angitte opprinnelige kapasiteten og bruker den angitte veksten faktoren."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antallet elementer i <xref:System.Collections.Queue>kan inneholde.</xref:System.Collections.Queue> </xref:System.Collections.Queue>  Som elementer er lagt til i en <xref:System.Collections.Queue>, kapasiteten økes automatisk etter behov via ny tildeling.</xref:System.Collections.Queue>  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue> Kapasiteten for den <xref:System.Collections.Queue>, alltid økes med en minimumsverdi, uavhengig av veksten faktorer; en veksten faktorer av 1.0 ikke hindrer den <xref:System.Collections.Queue>fra øker i størrelse.</xref:System.Collections.Queue> </xref:System.Collections.Queue>       Hvis størrelsen på samlingen kan beregnede, trenger ved å angi første kapasiteten utføre flere endring operasjoner ved å legge til elementer i <xref:System.Collections.Queue>.</xref:System.Collections.Queue>       Denne konstruktøren, er en O (`n`) operasjonen, der `n` er `capacity`."
  syntax:
    content: public Queue (int capacity, float growFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Startantallet med elementer som i <xref href=&quot;System.Collections.Queue&quot;> </xref> kan inneholde."
    - id: growFactor
      type: System.Single
      description: "Faktorer som kapasiteten for den <xref href=&quot;System.Collections.Queue&quot;> </xref> utvides."
  overload: System.Collections.Queue.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>er mindre enn null.       - eller - <code>growFactor</code> er mindre enn 1,0 eller større enn 10.0."
  platform:
  - net462
- uid: System.Collections.Queue.Clear
  id: Clear
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Clear()
  nameWithType: Queue.Clear()
  fullName: System.Collections.Queue.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Fjerner alle objekter fra den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "<xref:System.Collections.Queue.Count%2A>er satt til null, og frigis også referanser til andre objekter fra elementene i samlingen.</xref:System.Collections.Queue.Count%2A>       Kapasiteten forblir uendret. Tilbakestille kapasitet av <xref:System.Collections.Queue>kan du kontakte <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A> </xref:System.Collections.Queue> Beskjæring et tomt <xref:System.Collections.Queue>angir kapasiteten for den <xref:System.Collections.Queue>standard kapasitet.</xref:System.Collections.Queue> </xref:System.Collections.Queue>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Queue>.  \n  \n [!code-cpp[Classic Queue.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.que_6_1.cpp)]\n [!code-cs[Classic Queue.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.que_6_1.cs)]\n [!code-vb[Classic Queue.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_6_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Queue.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.Clone
  id: Clone
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Clone()
  nameWithType: Queue.Clone()
  fullName: System.Collections.Queue.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Oppretter en lite kopi av det <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "En lite kopi av en samling overfører bare elementer i samlingen, om de er referansetyper eller verdityper, men den ikke kopiere objektene som referansene refererer til. Referansene i den nye samlingen peke til de samme objektene referansene i den opprinnelige samlingen henviser til.       I motsetning overfører en dyp kopi av en samling elementene, og alt direkte eller indirekte referert til av elementene.       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En lite kopi av det <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Queue.Contains(Object)
  fullName: System.Collections.Queue.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Bestemmer om et element i den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Denne metoden bestemmer likhet ved å kalle <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Denne metoden utfører en lineær søket. Denne metoden er derfor en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>       Fra og med .NET Framework 2.0, denne metoden brukes på samlingens objektenes <xref:System.Object.Equals%2A>og <xref:System.IComparable.CompareTo%2A>metoder på `obj` å finne ut om `item` finnes.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Forsøket ble gjort i tidligere versjoner av .NET Framework, ved hjelp av <xref:System.Object.Equals%2A>og <xref:System.IComparable.CompareTo%2A>metoder for den `obj` parameteren for objekter i samlingen.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Den <xref:System.Object>ikke i den <xref href=&quot;System.Collections.Queue&quot;> </xref>.</xref:System.Object> Verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is found in the <xref href=&quot;System.Collections.Queue&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Queue.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Queue
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Queue.CopyTo(Array,Int32)
  fullName: System.Collections.Queue.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopier de <xref href=&quot;System.Collections.Queue&quot;> </xref> elementer i en eksisterende endimensjonal <xref:System.Array>, med Start fra angitte matriseindeksen.</xref:System.Array>"
  remarks: "Elementene kopieres til <xref:System.Array>i samme rekkefølge som enumeratoren går gjennom <xref:System.Collections.Queue>.</xref:System.Collections.Queue> </xref:System.Array>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  example:
  - "The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.  \n  \n [!code-cpp[Classic Queue.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.que_4_1.cpp)]\n [!code-cs[Classic Queue.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.que_4_1.cs)]\n [!code-vb[Classic Queue.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_4_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensjonal <xref:System.Array>som er målet for elementene kopieres fra <xref href=&quot;System.Collections.Queue&quot;> </xref>.</xref:System.Array> Den <xref:System.Array>må ha nullbasert indeksering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Den nullbaserte indeksen i `array` som kopiering begynner."
  overload: System.Collections.Queue.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>er flerdimensjonal.       - eller - antallet elementer i kilden <xref href=&quot;System.Collections.Queue&quot;> </xref> er større enn den tilgjengelige plassen fra <code>index</code> til slutten av målet <code>array</code>."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "Hva slags kilden <xref href=&quot;System.Collections.Queue&quot;> </xref> kan ikke endres automatisk til av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Queue.Count
  id: Count
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Count
  nameWithType: Queue.Count
  fullName: System.Collections.Queue.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter antallet elementer i den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antall elementer som i <xref:System.Collections.Queue>kan lagre.</xref:System.Collections.Queue> </xref:System.Collections.Queue> Antallet er antall elementer som er egentlig i <xref:System.Collections.Queue>.</xref:System.Collections.Queue>       Kapasiteten for en <xref:System.Collections.Queue>er alltid større enn eller lik antallet.</xref:System.Collections.Queue> Hvis antallet er større enn kapasiteten ved å legge til elementer, økes kapasiteten automatisk ved å tildele den interne matrisen på nytt før du kopierer de gamle elementene og legge til nye elementer. Den nye kapasiteten avgjøres av å multiplisere gjeldende kapasitet med veksten faktorer, som fastslått når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue> Kapasiteten for den <xref:System.Collections.Queue>, alltid økes med en minimumsverdi, uavhengig av veksten faktorer; en veksten faktorer av 1.0 ikke hindrer den <xref:System.Collections.Queue>fra øker i størrelse.</xref:System.Collections.Queue> </xref:System.Collections.Queue>       Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Henting av verdien for denne egenskapen er en O(1)-operasjon."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Antallet elementer i den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.Dequeue
  id: Dequeue
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Dequeue()
  nameWithType: Queue.Dequeue()
  fullName: System.Collections.Queue.Dequeue()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Fjerner og returnerer objektet i begynnelsen av den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Denne metoden er lik den <xref:System.Collections.Queue.Peek%2A>metoden, men <xref:System.Collections.Queue.Peek%2A>ikke endre <xref:System.Collections.Queue>.</xref:System.Collections.Queue> </xref:System.Collections.Queue.Peek%2A> </xref:System.Collections.Queue.Peek%2A>       `null`kan legges til i <xref:System.Collections.Queue>som verdi.</xref:System.Collections.Queue> Å skille mellom en null-verdi og slutten av den <xref:System.Collections.Queue>, se den <xref:System.Collections.Queue.Count%2A>egenskaps- eller catch den <xref:System.InvalidOperationException>, som er et når den <xref:System.Collections.Queue>er tom.</xref:System.Collections.Queue> </xref:System.InvalidOperationException> </xref:System.Collections.Queue.Count%2A> </xref:System.Collections.Queue>       Denne metoden er en O(1)-operasjon."
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \n  \n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_0_1.vb)]\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_0_1.cs)]\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_0_1.cpp)]"
  syntax:
    content: public virtual object Dequeue ();
    parameters: []
    return:
      type: System.Object
      description: "Objektet som er fjernet fra begynnelsen av den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.Dequeue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Collections.Queue&quot;> </xref> er tom."
  platform:
  - net462
- uid: System.Collections.Queue.Enqueue(System.Object)
  id: Enqueue(System.Object)
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Enqueue(Object)
  nameWithType: Queue.Enqueue(Object)
  fullName: System.Collections.Queue.Enqueue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Legger til et objekt på slutten av den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Kapasiteten for en <xref:System.Collections.Queue>er antallet elementer i <xref:System.Collections.Queue>kan inneholde.</xref:System.Collections.Queue> </xref:System.Collections.Queue>  Som elementer er lagt til i en <xref:System.Collections.Queue>, kapasiteten økes automatisk etter behov via ny tildeling.</xref:System.Collections.Queue>  Kapasiteten kan reduseres ved å kalle <xref:System.Collections.Queue.TrimToSize%2A>.</xref:System.Collections.Queue.TrimToSize%2A>       Veksten faktorer er antallet gjeldende kapasitet er multiplisert når større kapasitet kreves.  Veksten faktorer bestemmes når den <xref:System.Collections.Queue>bygges.</xref:System.Collections.Queue> Kapasiteten for den <xref:System.Collections.Queue>, alltid økes med en minimumsverdi, uavhengig av veksten faktorer; en veksten faktorer av 1.0 ikke hindrer den <xref:System.Collections.Queue>fra øker i størrelse.</xref:System.Collections.Queue> </xref:System.Collections.Queue>       Hvis <xref:System.Collections.Queue.Count%2A>er mindre enn den interne matrisen kapasitet, denne metoden er en O(1)-operasjon.</xref:System.Collections.Queue.Count%2A> Hvis den interne matrisen må være tildeles på nytt for å gi plass til nye elementet, denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \n  \n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_5_1.vb)]\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_5_1.cs)]\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_5_1.cpp)]"
  syntax:
    content: public virtual void Enqueue (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Objektet som skal legge til den <xref href=&quot;System.Collections.Queue&quot;> </xref>. Verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Queue.Enqueue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Queue
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Queue.GetEnumerator()
  fullName: System.Collections.Queue.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer en opplisting som går gjennom den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Den `foreach` -setningen for språket C# (`for each` i Visual Basic) skjuler av hvor komplekse enumeratorene.  Ved hjelp av derfor `foreach` anbefales, i stedet for direkte manipulering enumeratoren.       Enumeratorene kan brukes til å lese data i samlingen, men de kan ikke brukes til å endre den underliggende samlingen.       I utgangspunktet er enumeratoren plassert før det første elementet i samlingen. <xref:System.Collections.IEnumerator.Reset%2A>henter også enumeratoren tilbake til denne plasseringen.</xref:System.Collections.IEnumerator.Reset%2A>  På denne plasseringen <xref:System.Collections.IEnumerator.Current%2A>er udefinert.</xref:System.Collections.IEnumerator.Current%2A> Du må derfor kalle <xref:System.Collections.IEnumerator.MoveNext%2A>å flytte enumeratoren til det første elementet i samlingen før leser <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Returnerer det samme objektet før enten <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kalles.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>angir <xref:System.Collections.IEnumerator.Current%2A>til neste element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Hvis <xref:System.Collections.IEnumerator.MoveNext%2A>formidler slutten av samlingen enumeratoren er plassert etter det siste elementet i samlingen og <xref:System.Collections.IEnumerator.MoveNext%2A>returnerer `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Når enumeratoren er på denne plasseringen, etterfølgende kall til <xref:System.Collections.IEnumerator.MoveNext%2A>også returnere `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Hvis siste kall til <xref:System.Collections.IEnumerator.MoveNext%2A>returnerte `false`, <xref:System.Collections.IEnumerator.Current%2A>er udefinert.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Angi <xref:System.Collections.IEnumerator.Current%2A>til det første elementet i samlingen på nytt, kan du kalle <xref:System.Collections.IEnumerator.Reset%2A>etterfulgt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En opplisting forblir gyldig så lenge samlingen forblir uendret. Hvis du endrer til samlingen, for eksempel å legge til, endre eller slette elementer, enumeratoren ugyldiggjøres, og virkemåten er ikke definert.       Enumeratoren har ikke eksklusiv tilgang til samlingen. lister opp i en samling er derfor gjelder ikke en sikker-prosedyre.  For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen.  Du må implementere din egen synkronisering for å tillate samlingen for å få tilgang til flere tråder for lesing og skriving.       Denne metoden er en O(1)-operasjon."
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Queue&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Queue.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Queue
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Queue.IsSynchronized
  fullName: System.Collections.Queue.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter en verdi som angir om tilgang til den <xref href=&quot;System.Collections.Queue&quot;> </xref> er synkronisert (tråden trygt)."
  remarks: "Du kan garantere at tråden av <xref:System.Collections.Queue>, alle operasjoner må utføres via wrapperen som er returnert av den <xref:System.Collections.Queue.Synchronized%2A>metoden.</xref:System.Collections.Queue.Synchronized%2A> </xref:System.Collections.Queue>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration. Retrieving the value of this property is an O(1) operation.  \n  \n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.que_0_1.cpp)]\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.que_0_1.cs)]\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.que_0_1.vb)]  \n  \n The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized, and use a synchronized <xref:System.Collections.Queue>.  \n  \n [!code-cpp[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.que_0_2.cpp)]\n [!code-cs[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.que_0_2.cs)]\n [!code-vb[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.que_0_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tilgang til den <xref href=&quot;System.Collections.Queue&quot;> </xref> er synkronisert (tråden trygt); ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Queue.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.Peek
  id: Peek
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Peek()
  nameWithType: Queue.Peek()
  fullName: System.Collections.Queue.Peek()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer objektet i begynnelsen av den <xref href=&quot;System.Collections.Queue&quot;> </xref> uten å fjerne den."
  remarks: "Denne metoden er lik <xref:System.Collections.Queue.Dequeue%2A>metoden, men kikking endrer ikke <xref:System.Collections.Queue>.</xref:System.Collections.Queue> </xref:System.Collections.Queue.Dequeue%2A>       `null`kan legges til i <xref:System.Collections.Queue>som verdi.</xref:System.Collections.Queue> Å skille mellom en null-verdi og slutten av den <xref:System.Collections.Queue>, se den <xref:System.Collections.Queue.Count%2A>egenskaps- eller catch den <xref:System.InvalidOperationException>, som er et når den <xref:System.Collections.Queue>er tom.</xref:System.Collections.Queue> </xref:System.InvalidOperationException> </xref:System.Collections.Queue.Count%2A> </xref:System.Collections.Queue>       Denne metoden er en O(1)-operasjon."
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Queue>, remove elements from the <xref:System.Collections.Queue>, or view the element at the beginning of the <xref:System.Collections.Queue>.  \n  \n [!code-vb[Classic Queue.Enqueue Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_1_1.vb)]\n [!code-cs[Classic Queue.Enqueue Example#1](~/add/codesnippet/csharp/m-system.collections.que_1_1.cs)]\n [!code-cpp[Classic Queue.Enqueue Example#1](~/add/codesnippet/cpp/m-system.collections.que_1_1.cpp)]"
  syntax:
    content: public virtual object Peek ();
    parameters: []
    return:
      type: System.Object
      description: "Objektet i begynnelsen av den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Collections.Queue&quot;> </xref> er tom."
  platform:
  - net462
- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)
  id: Synchronized(System.Collections.Queue)
  parent: System.Collections.Queue
  langs:
  - csharp
  name: Synchronized(Queue)
  nameWithType: Queue.Synchronized(Queue)
  fullName: System.Collections.Queue.Synchronized(Queue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer en ny <xref href=&quot;System.Collections.Queue&quot;> </xref> som bryter opprinnelige køen, og sikre tråd."
  remarks: "Wrapperen som er returnert av denne metoden låser køen før en operasjon utføres slik at den er utført på en sikker måte.       Du kan garantere at tråden av <xref:System.Collections.Queue>, alle operasjoner må utføres via denne wrapper bare.</xref:System.Collections.Queue>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Queue.SyncRoot%2A> during the entire enumeration. This method is an O(1) operation.  \n  \n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.que_3_1.cpp)]\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.que_3_1.cs)]\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.que_3_1.vb)]  \n  \n The following example shows how to synchronize a <xref:System.Collections.Queue>, determine if a <xref:System.Collections.Queue> is synchronized and use a synchronized <xref:System.Collections.Queue>.  \n  \n [!code-cpp[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.que_3_2.cpp)]\n [!code-cs[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.que_3_2.cs)]\n [!code-vb[Classic Queue.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_3_2.vb)]"
  syntax:
    content: public static System.Collections.Queue Synchronized (System.Collections.Queue queue);
    parameters:
    - id: queue
      type: System.Collections.Queue
      description: "Den <xref href=&quot;System.Collections.Queue&quot;> </xref> skal synkroniseres."
    return:
      type: System.Collections.Queue
      description: "En <xref href=&quot;System.Collections.Queue&quot;> </xref> wrapperen som er synkronisert (tråden trygt)."
  overload: System.Collections.Queue.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queue</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Queue.SyncRoot
  id: SyncRoot
  parent: System.Collections.Queue
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Queue.SyncRoot
  fullName: System.Collections.Queue.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter et objekt som kan brukes til å synkronisere tilgang til den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Opprette en synkronisert versjon av den <xref:System.Collections.Queue>, bruker den <xref:System.Collections.Queue.Synchronized%2A>metoden.</xref:System.Collections.Queue.Synchronized%2A> </xref:System.Collections.Queue> Avledede klasser kan imidlertid gi sin egen synkroniserte versjon av den <xref:System.Collections.Queue>ved hjelp av SyncRoot-egenskapen.</xref:System.Collections.Queue> Synkronisering koden må utføre operasjoner på SyncRoot av den <xref:System.Collections.Queue>, ikke direkte på <xref:System.Collections.Queue>.</xref:System.Collections.Queue> </xref:System.Collections.Queue> Dette sikrer ordentlig med samlinger som er avledet fra andre objekter. Nærmere bestemt den opprettholder riktig synkronisering med andre tråder som kan være samtidig endring av <xref:System.Collections.Queue>objektet.</xref:System.Collections.Queue>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration. Retrieving the value of this property is an O(1) operation.  \n  \n [!code-cpp[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.que_1_1.cpp)]\n [!code-cs[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.que_1_1.cs)]\n [!code-vb[Classic Queue.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.que_1_1.vb)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Et objekt som kan brukes til å synkronisere tilgang til den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.ToArray
  id: ToArray
  parent: System.Collections.Queue
  langs:
  - csharp
  name: ToArray()
  nameWithType: Queue.ToArray()
  fullName: System.Collections.Queue.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopier de <xref href=&quot;System.Collections.Queue&quot;> </xref> elementer til en ny matrise."
  remarks: "Den <xref:System.Collections.Queue>er ikke endret.</xref:System.Collections.Queue> Rekkefølgen på elementer i den nye matrisen er lik rekkefølgen av elementer fra begynnelsen av den <xref:System.Collections.Queue>til slutten.</xref:System.Collections.Queue>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  example:
  - "The following example shows how to copy a <xref:System.Collections.Queue> into a one-dimensional array.  \n  \n [!code-cpp[Classic Queue.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.que_2_1.cpp)]\n [!code-cs[Classic Queue.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.que_2_1.cs)]\n [!code-vb[Classic Queue.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.que_2_1.vb)]"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "En ny matrise som inneholder elementer fra de <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  overload: System.Collections.Queue.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Queue.TrimToSize
  id: TrimToSize
  parent: System.Collections.Queue
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: Queue.TrimToSize()
  fullName: System.Collections.Queue.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Angir kapasiteten til faktisk antall elementer i den <xref href=&quot;System.Collections.Queue&quot;> </xref>."
  remarks: "Denne metoden kan brukes til å minimere en kø minne indirekte Hvis ingen nye elementer legges til køen.       Tilbakestille en <xref:System.Collections.Queue>til sin opprinnelige tilstand, kan du kalle den <xref:System.Collections.Queue.Clear%2A>metoden før du kaller TrimToSize.</xref:System.Collections.Queue.Clear%2A> </xref:System.Collections.Queue> Beskjæring et tomt <xref:System.Collections.Queue>angir kapasiteten for den <xref:System.Collections.Queue>standard kapasitet.</xref:System.Collections.Queue> </xref:System.Collections.Queue>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Queue.Count%2A>.</xref:System.Collections.Queue.Count%2A>"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.Queue.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;System.Collections.Queue&quot;> </xref> er skrivebeskyttet."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArrayTypeMismatchException
  isExternal: true
  name: System.ArrayTypeMismatchException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Queue.#ctor
  parent: System.Collections.Queue
  isExternal: false
  name: Queue()
  nameWithType: Queue.Queue()
  fullName: System.Collections.Queue.Queue()
- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)
  parent: System.Collections.Queue
  isExternal: false
  name: Queue(ICollection)
  nameWithType: Queue.Queue(ICollection)
  fullName: System.Collections.Queue.Queue(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Queue.#ctor(System.Int32)
  parent: System.Collections.Queue
  isExternal: false
  name: Queue(Int32)
  nameWithType: Queue.Queue(Int32)
  fullName: System.Collections.Queue.Queue(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)
  parent: System.Collections.Queue
  isExternal: false
  name: Queue(Int32,Single)
  nameWithType: Queue.Queue(Int32,Single)
  fullName: System.Collections.Queue.Queue(Int32,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Queue.Clear
  parent: System.Collections.Queue
  isExternal: false
  name: Clear()
  nameWithType: Queue.Clear()
  fullName: System.Collections.Queue.Clear()
- uid: System.Collections.Queue.Clone
  parent: System.Collections.Queue
  isExternal: false
  name: Clone()
  nameWithType: Queue.Clone()
  fullName: System.Collections.Queue.Clone()
- uid: System.Collections.Queue.Contains(System.Object)
  parent: System.Collections.Queue
  isExternal: false
  name: Contains(Object)
  nameWithType: Queue.Contains(Object)
  fullName: System.Collections.Queue.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Queue
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Queue.CopyTo(Array,Int32)
  fullName: System.Collections.Queue.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Queue.Count
  parent: System.Collections.Queue
  isExternal: false
  name: Count
  nameWithType: Queue.Count
  fullName: System.Collections.Queue.Count
- uid: System.Collections.Queue.Dequeue
  parent: System.Collections.Queue
  isExternal: false
  name: Dequeue()
  nameWithType: Queue.Dequeue()
  fullName: System.Collections.Queue.Dequeue()
- uid: System.Collections.Queue.Enqueue(System.Object)
  parent: System.Collections.Queue
  isExternal: false
  name: Enqueue(Object)
  nameWithType: Queue.Enqueue(Object)
  fullName: System.Collections.Queue.Enqueue(Object)
- uid: System.Collections.Queue.GetEnumerator
  parent: System.Collections.Queue
  isExternal: false
  name: GetEnumerator()
  nameWithType: Queue.GetEnumerator()
  fullName: System.Collections.Queue.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Queue.IsSynchronized
  parent: System.Collections.Queue
  isExternal: false
  name: IsSynchronized
  nameWithType: Queue.IsSynchronized
  fullName: System.Collections.Queue.IsSynchronized
- uid: System.Collections.Queue.Peek
  parent: System.Collections.Queue
  isExternal: false
  name: Peek()
  nameWithType: Queue.Peek()
  fullName: System.Collections.Queue.Peek()
- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)
  parent: System.Collections.Queue
  isExternal: false
  name: Synchronized(Queue)
  nameWithType: Queue.Synchronized(Queue)
  fullName: System.Collections.Queue.Synchronized(Queue)
- uid: System.Collections.Queue
  parent: System.Collections
  isExternal: false
  name: Queue
  nameWithType: Queue
  fullName: System.Collections.Queue
- uid: System.Collections.Queue.SyncRoot
  parent: System.Collections.Queue
  isExternal: false
  name: SyncRoot
  nameWithType: Queue.SyncRoot
  fullName: System.Collections.Queue.SyncRoot
- uid: System.Collections.Queue.ToArray
  parent: System.Collections.Queue
  isExternal: false
  name: ToArray()
  nameWithType: Queue.ToArray()
  fullName: System.Collections.Queue.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Queue.TrimToSize
  parent: System.Collections.Queue
  isExternal: false
  name: TrimToSize()
  nameWithType: Queue.TrimToSize()
  fullName: System.Collections.Queue.TrimToSize()
- uid: System.Collections.Queue.#ctor*
  parent: System.Collections.Queue
  isExternal: false
  name: Queue
  nameWithType: Queue.Queue
- uid: System.Collections.Queue.Clear*
  parent: System.Collections.Queue
  isExternal: false
  name: Clear
  nameWithType: Queue.Clear
- uid: System.Collections.Queue.Clone*
  parent: System.Collections.Queue
  isExternal: false
  name: Clone
  nameWithType: Queue.Clone
- uid: System.Collections.Queue.Contains*
  parent: System.Collections.Queue
  isExternal: false
  name: Contains
  nameWithType: Queue.Contains
- uid: System.Collections.Queue.CopyTo*
  parent: System.Collections.Queue
  isExternal: false
  name: CopyTo
  nameWithType: Queue.CopyTo
- uid: System.Collections.Queue.Count*
  parent: System.Collections.Queue
  isExternal: false
  name: Count
  nameWithType: Queue.Count
- uid: System.Collections.Queue.Dequeue*
  parent: System.Collections.Queue
  isExternal: false
  name: Dequeue
  nameWithType: Queue.Dequeue
- uid: System.Collections.Queue.Enqueue*
  parent: System.Collections.Queue
  isExternal: false
  name: Enqueue
  nameWithType: Queue.Enqueue
- uid: System.Collections.Queue.GetEnumerator*
  parent: System.Collections.Queue
  isExternal: false
  name: GetEnumerator
  nameWithType: Queue.GetEnumerator
- uid: System.Collections.Queue.IsSynchronized*
  parent: System.Collections.Queue
  isExternal: false
  name: IsSynchronized
  nameWithType: Queue.IsSynchronized
- uid: System.Collections.Queue.Peek*
  parent: System.Collections.Queue
  isExternal: false
  name: Peek
  nameWithType: Queue.Peek
- uid: System.Collections.Queue.Synchronized*
  parent: System.Collections.Queue
  isExternal: false
  name: Synchronized
  nameWithType: Queue.Synchronized
- uid: System.Collections.Queue.SyncRoot*
  parent: System.Collections.Queue
  isExternal: false
  name: SyncRoot
  nameWithType: Queue.SyncRoot
- uid: System.Collections.Queue.ToArray*
  parent: System.Collections.Queue
  isExternal: false
  name: ToArray
  nameWithType: Queue.ToArray
- uid: System.Collections.Queue.TrimToSize*
  parent: System.Collections.Queue
  isExternal: false
  name: TrimToSize
  nameWithType: Queue.TrimToSize
