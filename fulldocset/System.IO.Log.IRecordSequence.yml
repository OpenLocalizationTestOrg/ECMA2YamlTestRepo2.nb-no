### YamlMime:ManagedReference
items:
- uid: System.IO.Log.IRecordSequence
  id: IRecordSequence
  children:
  - System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  - System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  - System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  - System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  - System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  - System.IO.Log.IRecordSequence.BaseSequenceNumber
  - System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  - System.IO.Log.IRecordSequence.CreateReservationCollection
  - System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)
  - System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)
  - System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  - System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  - System.IO.Log.IRecordSequence.Flush
  - System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)
  - System.IO.Log.IRecordSequence.LastSequenceNumber
  - System.IO.Log.IRecordSequence.MaximumRecordLength
  - System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  - System.IO.Log.IRecordSequence.ReadRestartAreas
  - System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  - System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  - System.IO.Log.IRecordSequence.ReservedBytes
  - System.IO.Log.IRecordSequence.RestartSequenceNumber
  - System.IO.Log.IRecordSequence.RetryAppend
  - System.IO.Log.IRecordSequence.TailPinned
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  - System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  langs:
  - csharp
  name: IRecordSequence
  nameWithType: IRecordSequence
  fullName: System.IO.Log.IRecordSequence
  type: Interface
  summary: "Gir et generisk grensesnitt for en serie med oppføringer."
  remarks: "Grensesnittet IRecordSequence gir et abstrakt grensesnitt for en post-orientert dataflyt. En forekomst av IRecordSequence kan brukes til å lese og skrive loggoppføringer.       Grensesnittet IRecordSequence tilbyr følgende funksjoner – tilføye loggen poster ved hjelp av den <xref:System.IO.Log.IRecordSequence.Append%2A>metoder.</xref:System.IO.Log.IRecordSequence.Append%2A>      -Lese føyer poster ved hjelp av den <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A>metoden.</xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A>      -Skriv en spesiell omstart post ved hjelp av <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A>metode.</xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A>      -Lese starte poster fra i nylig skriftlig omstart post ved hjelp av den <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metoden.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>      -Tømme oppføringene til robust store ved hjelp av den <xref:System.IO.Log.IRecordSequence.Flush%2A>metoden.</xref:System.IO.Log.IRecordSequence.Flush%2A>      -Reservere plass til tilføyer poster.      -Gratis loggplass ved å flytte grunntallet loggen.      -Motta <xref:System.IO.Log.IRecordSequence.TailPinned>hendelsesvarsler å flytte grunntallet loggen til å frigjøre plass.</xref:System.IO.Log.IRecordSequence.TailPinned>       Loggoppføringer legges til en forekomst av IRecordSequence, og hver loggpost er angitt et unikt sekvensnummer. Serienumre er absolutt monotont økende i en gitt post-sekvens. En loggpost består av ugjennomsiktig data som er angitt til IRecordSequence-forekomst i en <xref:System.Collections.IList>av ArraySegments byte.</xref:System.Collections.IList>       Grensesnittet IRecordSequence viser også noen grunnleggende egenskaper som gir informasjon om loggen grensene.      - <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>Egenskapen inneholder sekvensnummeret for den første gyldige posten i post-sekvensen.</xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>      - <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>Egenskapen inneholder et sekvensnummer som vil være større enn sekvensnummeret for sist legges oppføring.</xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>      - <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A>Egenskapen inneholder sekvensnummeret for den siste skriftlig Start området.</xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A>      - <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A>Egenskapen inneholder størrelsen på den største posten som kan legges til, eller lese fra sekvensen.</xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A>      - <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A>Egenskapen inneholder den totale størrelsen på alle adressereservasjonene som er gjort i denne sekvensnummeret.</xref:System.IO.Log.IRecordSequence.ReservedBytes%2A>      -Hvis den <xref:System.IO.Log.IRecordSequence.RetryAppend%2A>er satt til `true`, og en <xref:System.IO.Log.IRecordSequence.Append%2A>operasjonen mislyktes fordi det er ingen plass i sekvensen, post rekkefølgen vil prøve å ledig plass og prøv på nytt tilføyingsoperasjonen.</xref:System.IO.Log.IRecordSequence.Append%2A> </xref:System.IO.Log.IRecordSequence.RetryAppend%2A>"
  syntax:
    content: 'public interface IRecordSequence : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  id: AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: AdvanceBaseSequenceNumber(SequenceNumber)
  nameWithType: IRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Flytter sekvensnummeret base av loggen fremover."
  remarks: "Når du bruker en <xref:System.IO.Log.LogRecordSequence>forekomsten, og prøv å flytte sekvensnummeret for å frigjøre plass i loggen, ny base sekvensnummeret må befinne seg i en annen loggen omfanget for det forrige omfanget må være merket som tomt.</xref:System.IO.Log.LogRecordSequence> Frigjøring omfang delvis støttes ikke."
  syntax:
    content: public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);
    parameters:
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret av post-sekvensen."
  overload: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>newBaseSequenceNumber</code>er ugyldig."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>newBaseSequenceNumber</code>er ikke aktiv i loggen."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under endring sekvensen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen er full."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver en loggpost til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.Append*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, legger du til en loggpost til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.Append*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, legger du til en loggpost til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>, ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Føyer oppføringen vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon angitt av den `reservations` parameteren. Hvis append lykkes, vil den bruke minste reservasjon området som kan inneholde dataene, og at reservasjon området vil bli fjernet fra samlingen.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for denne oppføring."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.Append*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, legger du til en loggpost til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>, ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Føyer oppføringen vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon angitt av den `reservations` parameteren. Hvis append lykkes, vil den bruke minste reservasjon området som kan inneholde dataene, og at reservasjon området vil bli fjernet fra samlingen.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for denne oppføring."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.Append*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BaseSequenceNumber
  id: BaseSequenceNumber
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BaseSequenceNumber
  nameWithType: IRecordSequence.BaseSequenceNumber
  fullName: System.IO.Log.IRecordSequence.BaseSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, henter sekvensnummeret for den første gyldige posten i gjeldende <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  remarks: "Ugyldig serienumre er større enn eller lik BaseSequenceNumber og mindre enn <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>.</xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>       Verdien for denne egenskapen kan endres ved å ringe det <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A>eller <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A>metode.</xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> </xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Det laveste sekvensnummeret som svarer til en gyldig oppføring i den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  overload: System.IO.Log.IRecordSequence.BaseSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter en asynkron tilføye operasjonen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer asynkrone append, som fortsatt kan ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter en asynkron tilføye operasjonen, ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer asynkrone append, som fortsatt kan ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter en asynkron tilføye operasjonen med plass reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Føyer oppføringen vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon angitt av den `reservations` parameteren. Hvis append lykkes, vil den bruke minste reservasjon området som kan inneholde dataene, og at reservasjon området vil bli fjernet fra samlingen.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for denne oppføring."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer asynkrone append, som fortsatt kan ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter en asynkron tilføye operasjonen, ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Føyer oppføringen vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon angitt av den `reservations` parameteren. Hvis append lykkes, vil den bruke minste reservasjon området som kan inneholde dataene, og at reservasjon området vil bli fjernet fra samlingen.       Denne metoden er vanligvis fullført før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservations
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for denne oppføring."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer asynkrone append, som fortsatt kan ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  id: BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginFlush(SequenceNumber,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter du en asynkron skriveoperasjon, ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returnert av metoden gjeldende til den <xref:System.IO.Log.IRecordSequence.EndFlush%2A>metode for å sikre at tømming er fullført og frigis ressurser på riktig måte.</xref:System.IO.Log.IRecordSequence.EndFlush%2A> </xref:System.IAsyncResult> Hvis det oppstår en feil under en asynkron tømming, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndFlush%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndFlush%2A>       Kaller denne metoden sikrer at alle poster som har blitt lagt til i <xref:System.IO.Log.IRecordSequence>skrives robust.</xref:System.IO.Log.IRecordSequence>       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron tømming forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndFlush%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndFlush%2A>"
  syntax:
    content: public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);
    parameters:
    - id: sequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den nyeste posten må være skrevet. Hvis <xref href=&quot;System.IO.Log.SequenceNumber&quot;> </xref> er ugyldig, og alle poster må være skrevet."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når tømming er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller bestemt asynkron tømming forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer den asynkrone tømme operasjon som kan fortsatt være ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginFlush*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving av data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  id: BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyres i en avledet klasse starter en asynkron Reserver og tilføye operasjonen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       De angitte adressereservasjonene er lagt til den angitte reservasjonen tilføye samlingen i en udelelig operasjon med en post operasjonen. Hvis append mislykkes, er ikke nok plass reservert.       Denne metoden kan vanligvis fullføres før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public IAsyncResult BeginReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservasjonssamlingen å reservere i."
    - id: reservations
      type: System.Int64[]
      description: "Adressereservasjonene foreta, i byte."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer denne asynkron operasjon kan fremdeles være ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage plass til å inneholde den nye oppføringen, eller foreta reservasjonen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  id: BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyres i en avledet klasse starter en asynkron Reserver og tilføye operasjonen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>metode for å sikre at append-operasjonen er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron append, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       De angitte adressereservasjonene er lagt til den angitte reservasjonen tilføye samlingen i en udelelig operasjon med en post operasjonen. Hvis append mislykkes, er ikke nok plass reservert.       Denne metoden kan vanligvis fullføres før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservasjonssamlingen å reservere i."
    - id: reservations
      type: System.Int64[]
      description: "Adressereservasjonene foreta, i byte."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når alternativet Legg er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller denne bestemte asynkrone Tilføy forespørselen fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer denne asynkron operasjon kan fremdeles være ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage plass til å inneholde den nye oppføringen, eller foreta reservasjonen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter du en asynkron Start området skriveoperasjon ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>metode for å sikre at Skriveoperasjonen omstart område er fullført og ressurser kan bli frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron området skrive omstarten, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Når operasjonen er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige.       Hvis en <xref:System.IO.Log.ReservationCollection>er angitt, skriftlig Start området vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon i samlingen.</xref:System.IO.Log.ReservationCollection> Hvis metoden lykkes, vil den bruke minste reservasjonen som kan inneholde dataene, og at reservasjon fjernes fra samlingen.       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>"
  syntax:
    content: public IAsyncResult BeginWriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for dette området for omstart."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når Start området skriving er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller skriveforespørselen denne bestemt asynkrone Start området fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer den asynkrone Start området skriveoperasjon som kan fortsatt være ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginWriteRestartArea*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  id: BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, starter du en asynkron Start området skriveoperasjon ved hjelp av mellomrom som er reservert tidligere i sekvensen."
  remarks: "Du må sende den <xref:System.IAsyncResult>returneres av denne metoden hvis den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>metode for å sikre at Skriveoperasjonen omstart område er fullført og ressurser blir frigjort på riktig måte.</xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> </xref:System.IAsyncResult> Hvis det oppstod en feil under en asynkron området skrive omstarten, en ikke unntak før den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>metoden med den <xref:System.IAsyncResult>returneres av denne metoden.</xref:System.IAsyncResult> </xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>       Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       Når operasjonen er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige.       Hvis en <xref:System.IO.Log.ReservationCollection>er angitt, skriftlig Start området vil bruke plassen som er tidligere reservert, ved hjelp av en reservasjon i samlingen.</xref:System.IO.Log.ReservationCollection> Hvis metoden lykkes, vil den bruke minste reservasjonen som kan inneholde dataene, og at reservasjon fjernes fra samlingen.       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>"
  syntax:
    content: public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for dette området for omstart."
    - id: callback
      type: System.AsyncCallback
      description: "En valgfri asynkrone Tilbakekall kalles når Start området skriving er fullført."
    - id: state
      type: System.Object
      description: "Et gitt objekt som skiller skriveforespørselen denne bestemt asynkrone Start området fra andre forespørsler."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>som representerer den asynkrone Start området skriveoperasjon som kan fortsatt være ventende.</xref:System.IAsyncResult>"
  overload: System.IO.Log.IRecordSequence.BeginWriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde den nye posten."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.CreateReservationCollection
  id: CreateReservationCollection
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: CreateReservationCollection()
  nameWithType: IRecordSequence.CreateReservationCollection()
  fullName: System.IO.Log.IRecordSequence.CreateReservationCollection()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, oppretter du en ny <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>."
  syntax:
    content: public System.IO.Log.ReservationCollection CreateReservationCollection ();
    parameters: []
    return:
      type: System.IO.Log.ReservationCollection
      description: "Den nyopprettede <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref>."
  overload: System.IO.Log.IRecordSequence.CreateReservationCollection*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)
  id: EndAppend(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: EndAppend(IAsyncResult)
  nameWithType: IRecordSequence.EndAppend(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndAppend(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, Tilføy endene en asynkron operasjon."
  remarks: "Denne metoden blokkerer til at i/u-operasjonen er fullført. Feil som oppstår under en asynkron skriveforespørselen, for eksempel diskfeil under i/u-forespørselen blir synlige når EndAppend kalles.       Denne metoden må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>returnert av den <xref:System.IO.Log.IRecordSequence.BeginAppend%2A>metoden.</xref:System.IO.Log.IRecordSequence.BeginAppend%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referanse til utestående asynkront i/u-forespørselen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.EndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)
  id: EndFlush(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: EndFlush(IAsyncResult)
  nameWithType: IRecordSequence.EndFlush(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndFlush(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, slutter en asynkron skriveoperasjon."
  remarks: "Denne metoden blokkerer til at i/u-operasjonen er fullført. Feil som oppstår under en asynkron tømming forespørsel, for eksempel diskfeil under i/u-forespørselen blir synlige når EndFlush kalles.       Denne metoden må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>returnert av den <xref:System.IO.Log.IRecordSequence.BeginFlush%2A>metoden.</xref:System.IO.Log.IRecordSequence.BeginFlush%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referanse til utestående asynkront i/u-forespørselen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den forrige posten skrevet."
  overload: System.IO.Log.IRecordSequence.EndFlush*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  id: EndReserveAndAppend(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: EndReserveAndAppend(IAsyncResult)
  nameWithType: IRecordSequence.EndReserveAndAppend(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndReserveAndAppend(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, slutter en asynkron reservere og tilføye operasjonen."
  remarks: "Denne metoden blokkerer til at i/u-operasjonen er fullført. Feil som oppstår under en asynkron skriveforespørselen, for eksempel diskfeil under i/u-forespørselen blir synlige når EndReserveAndAppend kalles.       Denne metoden må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>returnert av den <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A>metoden.</xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referanse til utestående asynkront i/u-forespørselen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.EndReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  id: EndWriteRestartArea(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: EndWriteRestartArea(IAsyncResult)
  nameWithType: IRecordSequence.EndWriteRestartArea(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndWriteRestartArea(IAsyncResult)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, slutter skriveoperasjon en asynkron Start området."
  remarks: "Denne metoden blokkerer til at i/u-operasjonen er fullført. Feil som oppstår under en asynkron skriveforespørselen, for eksempel diskfeil under i/u-forespørselen blir synlige når EndWriteRestartArea kalles.       Denne metoden må kalles nøyaktig én gang for hver <xref:System.IAsyncResult>returnert av den <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A>metoden.</xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A> </xref:System.IAsyncResult>"
  syntax:
    content: public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "En referanse til utestående asynkront i/u-forespørselen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for skriftlig loggposten."
  overload: System.IO.Log.IRecordSequence.EndWriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Flush
  id: Flush
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Flush()
  nameWithType: IRecordSequence.Flush()
  fullName: System.IO.Log.IRecordSequence.Flush()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, sikrer den at alle nye oppføringer er skrevet."
  remarks: "Kaller denne metoden sikrer at alle poster som har blitt lagt til i <xref:System.IO.Log.IRecordSequence>er skrevet robust.</xref:System.IO.Log.IRecordSequence>"
  syntax:
    content: public System.IO.Log.SequenceNumber Flush ();
    parameters: []
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den forrige posten skrevet."
  overload: System.IO.Log.IRecordSequence.Flush*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving av data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)
  id: Flush(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: Flush(SequenceNumber)
  nameWithType: IRecordSequence.Flush(SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.Flush(SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, sikrer den at alle nye poster til og med post med det angitte sekvensnummeret robust skrevet."
  remarks: "Kaller denne metoden sikrer at alle poster med sekvens tall opp til og med det angitte sekvensnummeret er robust skrevet."
  syntax:
    content: public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);
    parameters:
    - id: sequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den nyeste posten må være skrevet. Hvis <xref href=&quot;System.IO.Log.SequenceNumber&quot;> </xref> er ugyldig, og alle poster må være skrevet."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den forrige posten skrevet."
  overload: System.IO.Log.IRecordSequence.Flush*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving av data."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.LastSequenceNumber
  id: LastSequenceNumber
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: LastSequenceNumber
  nameWithType: IRecordSequence.LastSequenceNumber
  fullName: System.IO.Log.IRecordSequence.LastSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Henter sekvensnummeret når overstyrt i en avledet klasse, som er større enn den siste posten legges."
  remarks: "Denne egenskapen inneholder et sekvensnummer som vil være større enn sekvensnummeret for sist legges post. Ugyldig serienumre er større enn eller lik <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>, og mindre enn LastSequenceNumber.</xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>      > [!NOTE] > Ved bruk av en <xref:System.IO.Log.LogRecordSequence>forekomst, <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A>verdi kan bli utdatert før poster tømmes til loggen.</xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> </xref:System.IO.Log.LogRecordSequence> Se <xref:System.IO.Log.IRecordSequence.Flush%2A>og <xref:System.IO.Log.RecordAppendOptions>for mer informasjon om tømming poster.</xref:System.IO.Log.RecordAppendOptions> </xref:System.IO.Log.IRecordSequence.Flush%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber LastSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Et sekvensnummer som er større enn den siste posten legges."
  overload: System.IO.Log.IRecordSequence.LastSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.MaximumRecordLength
  id: MaximumRecordLength
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: MaximumRecordLength
  nameWithType: IRecordSequence.MaximumRecordLength
  fullName: System.IO.Log.IRecordSequence.MaximumRecordLength
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, henter størrelsen på den største posten som kan legges til eller lese fra denne sekvensen, i byte."
  syntax:
    content: public long MaximumRecordLength { get; }
    return:
      type: System.Int64
      description: "Størrelsen på den største posten som kan legges til eller lese fra denne sekvensen, i byte."
  overload: System.IO.Log.IRecordSequence.MaximumRecordLength*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  id: ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  nameWithType: IRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  fullName: System.IO.Log.IRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, returnerer en et tallsett samling poster i sekvensen."
  remarks: "Når overstyrt i en avledet klasse, returnerer en et tallsett samling poster i sekvensen. Rekkefølgen på nummererte postene, avhengig av verdien for den `logRecordEnum` parameteren."
  example:
  - "This sample demonstrates the use of the ReadLogRecords method.  \n  \n```c#  \nusing System;  \n using System.IO;  \n using System.IO.Log;  \n  \n class ReadRecordsSample  \n {  \n     static SequenceNumber AppendRecord(IRecordSequence sequence,  \n                                        string message,  \n                                        SequenceNumber user,  \n                                        SequenceNumber previous)  \n     {  \n         MemoryStream data = new MemoryStream();  \n         BinaryWriter writer = new BinaryWriter(data);  \n         writer.Write(message);  \n  \n         ArraySegment<byte>[] segments;  \n         segments = new ArraySegment<byte>[1];  \n         segments[0] = new ArraySegment(data.GetBuffer(),  \n                                        0,  \n                                        Data.Length);  \n  \n         return sequence.Append(segments,  \n                                user,  \n                                previous,  \n                                WriteFlags.None);  \n     }  \n  \n     public static void Main(string[] args)  \n     {  \n         IRecordSequence sequence;  \n         sequence = new FileIRecordSequence(args[0]);  \n  \n         SequenceNumber a, b, c, d;  \n  \n         a = AppendRecord(sequence,  \n                          \"This is record A\",  \n                          SequenceNumber.Invalid,  \n                          SequenceNumber.Invalid);  \n         Console.WriteLine(\"Record A has sequence number System.IO.Log\", a);  \n  \n         b = AppendRecord(sequence,  \n                          \"This is record B\",  \n                          a,  \n                          a);  \n         Console.WriteLine(\"Record B has sequence number System.IO.Log\", b);  \n  \n         c = AppendRecord(sequence,  \n                          \"This is record C\",  \n                          a,  \n                          a);  \n         Console.WriteLine(\"Record C has sequence number System.IO.Log\", c);  \n  \n         d = AppendRecord(sequence,  \n                          \"This is record D\",  \n                          b,  \n                          c);  \n         Console.WriteLine(\"Record D has sequence number System.IO.Log\", d);  \n  \n         foreach(LogRecord record in  \n                 sequence.ReadLogRecords(a, ReadDirection.Forward))  \n         {  \n             BinaryReader reader = new BinaryReader(record.Data);  \n             Console.WriteLine(\"System.IO.Log: T:System.IO.Log.IRecordSequence\",  \n                               record.SequenceNumber,  \n                               reader.ReadString());  \n         }  \n  \n         foreach(LogRecord record in  \n                 sequence.ReadLogRecords(d, ReadDirection.User))  \n         {  \n             BinaryReader reader = new BinaryReader(record.Data);  \n             Console.WriteLine(\"System.IO.Log: T:System.IO.Log.IRecordSequence\",  \n                               record.SequenceNumber,  \n                               reader.ReadString());  \n         }  \n  \n         foreach(LogRecord record in  \n                 sequence.ReadLogRecords(d, ReadDirection.Previous))  \n         {  \n             BinaryReader reader = new BinaryReader(record.Data);  \n             Console.WriteLine(\"System.IO.Log: T:System.IO.Log.IRecordSequence\",  \n                               record.SequenceNumber,  \n                               reader.ReadString());  \n         }  \n     }  \n       }  \n```"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);
    parameters:
    - id: start
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for den første posten der skrivebeskyttede starter."
    - id: logRecordEnum
      type: System.IO.Log.LogRecordEnumeratorType
      description: "En gyldig <xref href=&quot;System.IO.Log.LogRecordEnumeratorType&quot;> </xref> verdi som angir måten (det vil si fremover eller bakover) i hvilke poster bør du lese fra en <xref href=&quot;System.IO.Log.LogRecordSequence&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
      description: "En et tallsett samling med oppføringer i sekvensen."
  overload: System.IO.Log.IRecordSequence.ReadLogRecords*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under lesing av oppføringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.ReadRestartAreas
  id: ReadRestartAreas
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: ReadRestartAreas()
  nameWithType: IRecordSequence.ReadRestartAreas()
  fullName: System.IO.Log.IRecordSequence.ReadRestartAreas()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, returnerer en et tallsett samling av omstart-områder i sekvensen."
  remarks: "Start-områder listes opp i omvendt rekkefølge tallet rekkefølgen som er fra høyeste sekvensnummer til sekvensnummeret laveste. Start bare områder med serienumre mellom det siste sekvensnummeret og listes opp sekvensnummeret base.      > [!NOTE] > Hvis den loggen omfanget som inneholder den <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>er skadet, kan denne metoden throw en <xref:System.IO.IOException>med feilmeldingen &quot;kan ikke utføre forespørselen på grunn av et uventet unntak av i/u.</xref:System.IO.IOException> </xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> Følgende feilkode ble returnert: &quot;80070026&quot; &quot;."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadRestartAreas ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
      description: "En et tallsett samling av omstart områder i sekvensen."
  overload: System.IO.Log.IRecordSequence.ReadRestartAreas*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under lesing av oppføringen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  id: ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: IRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.IRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, gjør ett reservasjon og automatisk legger til en oppføring i sekvensen."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       De angitte adressereservasjonene er lagt til den angitte reservasjonen tilføye samlingen i en udelelig operasjon med en post operasjonen. Hvis append mislykkes, er ikke nok plass reservert.       Denne metoden kan vanligvis fullføres før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder samlingen å reservere i."
    - id: reservations
      type: System.Int64[]
      description: "Adressereservasjonene foreta, i byte."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.ReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage plass til å inneholde den nye oppføringen, eller foreta reservasjonen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  id: ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: IRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.IRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, gjør ett reservasjon og automatisk legger til en oppføring i sekvensen."
  remarks: "Dataene i den `data` parameteren settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser er imidlertid gjort for å dele data tilbake i matrisen segmenter når oppføringen er lest.       De angitte adressereservasjonene er lagt til den angitte reservasjonen tilføye samlingen i en udelelig operasjon med en post operasjonen. Hvis append mislykkes, er ikke nok plass reservert.       Denne metoden kan vanligvis fullføres før oppføringen er skrevet. For å sikre at en oppføring er skrevet, enten angi den <xref:System.IO.Log.RecordAppendOptions>flagget ved hjelp av den `recordAppendOptions` parameteren eller kall av <xref:System.IO.Log.IRecordSequence.Flush%2A>metode.</xref:System.IO.Log.IRecordSequence.Flush%2A> </xref:System.IO.Log.RecordAppendOptions>"
  syntax:
    content: public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: nextUndoRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i rekkefølgen som angis av brukeren."
    - id: previousRecord
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for neste post i forrige rekkefølge."
    - id: recordAppendOptions
      type: System.IO.Log.RecordAppendOptions
      description: "En gyldig verdi for <xref href=&quot;System.IO.Log.RecordAppendOptions&quot;> </xref> som angir hvor dataene skal skrives."
    - id: reservationCollection
      type: System.IO.Log.ReservationCollection
      description: "Reservasjonssamlingen å reservere i."
    - id: reservations
      type: System.Int64[]
      description: "Adressereservasjonene foreta, i byte."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Serienummeret for føyer loggposten."
  overload: System.IO.Log.IRecordSequence.ReserveAndAppend*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under tilføying oppføringen."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage plass til å inneholde den nye oppføringen, eller foreta reservasjonen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.ReservedBytes
  id: ReservedBytes
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: ReservedBytes
  nameWithType: IRecordSequence.ReservedBytes
  fullName: System.IO.Log.IRecordSequence.ReservedBytes
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, henter Totalt antall byte som er reservert."
  syntax:
    content: public long ReservedBytes { get; }
    return:
      type: System.Int64
      description: "Den totale størrelsen på alle adressereservasjonene som er gjort i denne sekvensnummeret."
  overload: System.IO.Log.IRecordSequence.ReservedBytes*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.RestartSequenceNumber
  id: RestartSequenceNumber
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: RestartSequenceNumber
  nameWithType: IRecordSequence.RestartSequenceNumber
  fullName: System.IO.Log.IRecordSequence.RestartSequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, henter sekvensnummeret for nylig skriftlig Start området."
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen."
  syntax:
    content: public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den mest nylig er skrevet starte området."
  overload: System.IO.Log.IRecordSequence.RestartSequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.RetryAppend
  id: RetryAppend
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: RetryAppend
  nameWithType: IRecordSequence.RetryAppend
  fullName: System.IO.Log.IRecordSequence.RetryAppend
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Henter eller angir en verdi som angir om tilføyer automatisk på nytt hvis loggen er full."
  remarks: "Hvis verdien for denne egenskapen `true`, og en <xref:System.IO.Log.IRecordSequence.Append%2A>kallet mislykkes fordi det ikke er nok plass i sekvensen, post rekkefølgen vil prøve å ledig plass og prøv på nytt i append.</xref:System.IO.Log.IRecordSequence.Append%2A>"
  syntax:
    content: public bool RetryAppend { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tilføyer automatisk på nytt hvis loggen er full. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Log.IRecordSequence.RetryAppend*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Egenskapen ble åpnet etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.TailPinned
  id: TailPinned
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: TailPinned
  nameWithType: IRecordSequence.TailPinned
  fullName: System.IO.Log.IRecordSequence.TailPinned
  type: Event
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Forekommer når sekvensnummeret bestemmer at slutten flyttes fremover."
  remarks: "Du kan starte denne hendelsen når sekvensen post har gått tom for plass. Når denne hendelsen starter, flyttes slutten på sekvensen (det vil si base sekvensnummeret) Videresend å frigjøre plass."
  syntax:
    content: public event EventHandler<System.IO.Log.TailPinnedEventArgs> TailPinned;
    return:
      type: System.EventHandler{System.IO.Log.TailPinnedEventArgs}
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  id: WriteRestartArea(System.ArraySegment{System.Byte})
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Vanlige Log File System (CLFS) opprettholder to Start områder for å garantere at minst én gyldig område er alltid tilgjengelig. Når en gjenoppretting er nødvendig, leser CLFS det Start området og alle data fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen.       En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Dataene i byte matrise segmenter skal settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref>."
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen. En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Dataene i byte matrise segmenter skal settes sammen til én bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref> og oppdatere base serienummeret"
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen. En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Når et omstartsområde er skrevet, satt dataene i byte matrise segmenter til en enkelt bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest.       Når denne metoden er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSequenceNumber);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref> og oppdatere base serienummeret."
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen. En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Når et omstartsområde er skrevet, satt dataene i byte matrise segmenter til en enkelt bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest.       Når denne metoden er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige."
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSequenceNumber);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref> bruker en reservasjon, og oppdatere base serienummeret"
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen. En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Når et omstartsområde er skrevet, satt dataene i byte matrise segmenter til en enkelt bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest.       Hvis en reservasjon er angitt, bruke området skriftlig omstart plassen som er tidligere reservert, ved hjelp av en reservasjon i samlingen. Hvis metoden lykkes, vil den bruke minste reservasjonen som kan inneholde dataene, og at reservasjon fjernes fra samlingen.       Når denne metoden er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige.       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);
    parameters:
    - id: data
      type: System.ArraySegment{System.Byte}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for dette området for omstart."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  langs:
  - csharp
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "Når overstyrt i en avledet klasse, skriver et omstartsområde til den <xref href=&quot;System.IO.Log.IRecordSequence&quot;> </xref> bruker en reservasjon, og oppdatere base serienummeret."
  remarks: "En omstart av området brukes til å lagre informasjon som inneholder en klient siste kontrollpunktoperasjon. Når en gjenoppretting er nødvendig, kan du analysere området omstart for å hente alle dataene fra forrige kontrollpunkt for operasjonen. Disse dataene initialiserer transaksjonstabell-, endret sider tabellen, og åpne filtabellen slik at de kan brukes i gjenopprettingsprosessen. En omstart av området kan leses ved hjelp av <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>metode.</xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A>       Når et omstartsområde er skrevet, satt dataene i byte matrise segmenter til en enkelt bytematrise for tilføying som oppføringen. Ingen bestemmelser gjøres for å dele data tilbake i matrisen segmenter når Start-området er lest.       Hvis en reservasjon er angitt, bruke området skriftlig omstart plassen som er tidligere reservert, ved hjelp av en reservasjon i samlingen. Hvis metoden lykkes, vil den bruke minste reservasjonen som kan inneholde dataene, og at reservasjon fjernes fra samlingen.       Når denne metoden er fullført, er base sekvensnummeret oppdatert. Alle loggposter med serienumre under ny base sekvensnummeret er utilgjengelige.       Hvis en sekvensnummeret har blitt fjernet av, eller hvis du sender et ugyldig argument, er unntak oppstod umiddelbart i denne operasjonen. Feil som oppstod under en asynkron append-forespørsel, for eksempel diskfeil under i/u-forespørselen fører unntak som når den <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>-metoden.</xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>"
  syntax:
    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);
    parameters:
    - id: data
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "En liste over byte matrise segmenter som skal settes sammen og legges som oppføringen."
    - id: newBaseSequenceNumber
      type: System.IO.Log.SequenceNumber
      description: "Ny base serienummeret. Det angitte sekvensnummeret må være større enn eller lik gjeldende base sekvensnummeret."
    - id: reservation
      type: System.IO.Log.ReservationCollection
      description: "En <xref href=&quot;System.IO.Log.ReservationCollection&quot;> </xref> som inneholder reservasjonen som skal brukes for dette området for omstart."
    return:
      type: System.IO.Log.SequenceNumber
      description: "Sekvensnummeret for den skriftlig starte området."
  overload: System.IO.Log.IRecordSequence.WriteRestartArea*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Én eller flere av argumentene er ugyldig."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Det oppstod en i/u-feil under skriving området omstart."
  - type: System.IO.Log.SequenceFullException
    commentId: T:System.IO.Log.SequenceFullException
    description: "Oppføringssekvensen kan ikke lage nok ledig plass til å inneholde det nye området for omstart."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Metoden ble kalt etter sekvensen har blitt fjernet av."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.Log.SequenceFullException
  parent: System.IO.Log
  isExternal: false
  name: SequenceFullException
  nameWithType: SequenceFullException
  fullName: System.IO.Log.SequenceFullException
- uid: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: AdvanceBaseSequenceNumber(SequenceNumber)
  nameWithType: IRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)
- uid: System.IO.Log.SequenceNumber
  parent: System.IO.Log
  isExternal: false
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: System.IO.Log.SequenceNumber
- uid: System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.RecordAppendOptions
  parent: System.IO.Log
  isExternal: false
  name: RecordAppendOptions
  nameWithType: RecordAppendOptions
  fullName: System.IO.Log.RecordAppendOptions
- uid: System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  nameWithType: IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
  fullName: System.IO.Log.IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions)
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.ArraySegment<System.Byte>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.Append(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
- uid: System.IO.Log.ReservationCollection
  parent: System.IO.Log
  isExternal: false
  name: ReservationCollection
  nameWithType: ReservationCollection
  fullName: System.IO.Log.ReservationCollection
- uid: System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  nameWithType: IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.Append(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection)
- uid: System.IO.Log.IRecordSequence.BaseSequenceNumber
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: IRecordSequence.BaseSequenceNumber
  fullName: System.IO.Log.IRecordSequence.BaseSequenceNumber
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginFlush(SequenceNumber,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginFlush(SequenceNumber,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
- uid: System.Int64[]
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[],AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  nameWithType: IRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
  fullName: System.IO.Log.IRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection,AsyncCallback,Object)
- uid: System.IO.Log.IRecordSequence.CreateReservationCollection
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: CreateReservationCollection()
  nameWithType: IRecordSequence.CreateReservationCollection()
  fullName: System.IO.Log.IRecordSequence.CreateReservationCollection()
- uid: System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndAppend(IAsyncResult)
  nameWithType: IRecordSequence.EndAppend(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndAppend(IAsyncResult)
- uid: System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndFlush(IAsyncResult)
  nameWithType: IRecordSequence.EndFlush(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndFlush(IAsyncResult)
- uid: System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndReserveAndAppend(IAsyncResult)
  nameWithType: IRecordSequence.EndReserveAndAppend(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndReserveAndAppend(IAsyncResult)
- uid: System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndWriteRestartArea(IAsyncResult)
  nameWithType: IRecordSequence.EndWriteRestartArea(IAsyncResult)
  fullName: System.IO.Log.IRecordSequence.EndWriteRestartArea(IAsyncResult)
- uid: System.IO.Log.IRecordSequence.Flush
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Flush()
  nameWithType: IRecordSequence.Flush()
  fullName: System.IO.Log.IRecordSequence.Flush()
- uid: System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Flush(SequenceNumber)
  nameWithType: IRecordSequence.Flush(SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.Flush(SequenceNumber)
- uid: System.IO.Log.IRecordSequence.LastSequenceNumber
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: LastSequenceNumber
  nameWithType: IRecordSequence.LastSequenceNumber
  fullName: System.IO.Log.IRecordSequence.LastSequenceNumber
- uid: System.IO.Log.IRecordSequence.MaximumRecordLength
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: MaximumRecordLength
  nameWithType: IRecordSequence.MaximumRecordLength
  fullName: System.IO.Log.IRecordSequence.MaximumRecordLength
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  nameWithType: IRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
  fullName: System.IO.Log.IRecordSequence.ReadLogRecords(SequenceNumber,LogRecordEnumeratorType)
- uid: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<LogRecord>
  nameWithType: IEnumerable<LogRecord>
  fullName: System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.Log.LogRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Log.LogRecord
    name: LogRecord
    nameWithType: LogRecord
    fullName: LogRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.LogRecordEnumeratorType
  parent: System.IO.Log
  isExternal: false
  name: LogRecordEnumeratorType
  nameWithType: LogRecordEnumeratorType
  fullName: System.IO.Log.LogRecordEnumeratorType
- uid: System.IO.Log.IRecordSequence.ReadRestartAreas
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReadRestartAreas()
  nameWithType: IRecordSequence.ReadRestartAreas()
  fullName: System.IO.Log.IRecordSequence.ReadRestartAreas()
- uid: System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: IRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.IRecordSequence.ReserveAndAppend(ArraySegment<Byte>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
- uid: System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  nameWithType: IRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
  fullName: System.IO.Log.IRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>,SequenceNumber,SequenceNumber,RecordAppendOptions,ReservationCollection,Int64[])
- uid: System.IO.Log.IRecordSequence.ReservedBytes
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReservedBytes
  nameWithType: IRecordSequence.ReservedBytes
  fullName: System.IO.Log.IRecordSequence.ReservedBytes
- uid: System.IO.Log.IRecordSequence.RestartSequenceNumber
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: RestartSequenceNumber
  nameWithType: IRecordSequence.RestartSequenceNumber
  fullName: System.IO.Log.IRecordSequence.RestartSequenceNumber
- uid: System.IO.Log.IRecordSequence.RetryAppend
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: RetryAppend
  nameWithType: IRecordSequence.RetryAppend
  fullName: System.IO.Log.IRecordSequence.RetryAppend
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Log.IRecordSequence.TailPinned
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: TailPinned
  nameWithType: IRecordSequence.TailPinned
  fullName: System.IO.Log.IRecordSequence.TailPinned
- uid: System.EventHandler{System.IO.Log.TailPinnedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TailPinnedEventArgs>
  nameWithType: EventHandler<TailPinnedEventArgs>
  fullName: System.EventHandler<System.IO.Log.TailPinnedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IO.Log.TailPinnedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Log.TailPinnedEventArgs
    name: TailPinnedEventArgs
    nameWithType: TailPinnedEventArgs
    fullName: TailPinnedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>)
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber)
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber)
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  nameWithType: IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(ArraySegment<Byte>,SequenceNumber,ReservationCollection)
- uid: System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  nameWithType: IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
  fullName: System.IO.Log.IRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>,SequenceNumber,ReservationCollection)
- uid: System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: AdvanceBaseSequenceNumber
  nameWithType: IRecordSequence.AdvanceBaseSequenceNumber
- uid: System.IO.Log.IRecordSequence.Append*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Append
  nameWithType: IRecordSequence.Append
- uid: System.IO.Log.IRecordSequence.BaseSequenceNumber*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BaseSequenceNumber
  nameWithType: IRecordSequence.BaseSequenceNumber
- uid: System.IO.Log.IRecordSequence.BeginAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginAppend
  nameWithType: IRecordSequence.BeginAppend
- uid: System.IO.Log.IRecordSequence.BeginFlush*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginFlush
  nameWithType: IRecordSequence.BeginFlush
- uid: System.IO.Log.IRecordSequence.BeginReserveAndAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginReserveAndAppend
  nameWithType: IRecordSequence.BeginReserveAndAppend
- uid: System.IO.Log.IRecordSequence.BeginWriteRestartArea*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: BeginWriteRestartArea
  nameWithType: IRecordSequence.BeginWriteRestartArea
- uid: System.IO.Log.IRecordSequence.CreateReservationCollection*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: CreateReservationCollection
  nameWithType: IRecordSequence.CreateReservationCollection
- uid: System.IO.Log.IRecordSequence.EndAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndAppend
  nameWithType: IRecordSequence.EndAppend
- uid: System.IO.Log.IRecordSequence.EndFlush*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndFlush
  nameWithType: IRecordSequence.EndFlush
- uid: System.IO.Log.IRecordSequence.EndReserveAndAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndReserveAndAppend
  nameWithType: IRecordSequence.EndReserveAndAppend
- uid: System.IO.Log.IRecordSequence.EndWriteRestartArea*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: EndWriteRestartArea
  nameWithType: IRecordSequence.EndWriteRestartArea
- uid: System.IO.Log.IRecordSequence.Flush*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: Flush
  nameWithType: IRecordSequence.Flush
- uid: System.IO.Log.IRecordSequence.LastSequenceNumber*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: LastSequenceNumber
  nameWithType: IRecordSequence.LastSequenceNumber
- uid: System.IO.Log.IRecordSequence.MaximumRecordLength*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: MaximumRecordLength
  nameWithType: IRecordSequence.MaximumRecordLength
- uid: System.IO.Log.IRecordSequence.ReadLogRecords*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReadLogRecords
  nameWithType: IRecordSequence.ReadLogRecords
- uid: System.IO.Log.IRecordSequence.ReadRestartAreas*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReadRestartAreas
  nameWithType: IRecordSequence.ReadRestartAreas
- uid: System.IO.Log.IRecordSequence.ReserveAndAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReserveAndAppend
  nameWithType: IRecordSequence.ReserveAndAppend
- uid: System.IO.Log.IRecordSequence.ReservedBytes*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: ReservedBytes
  nameWithType: IRecordSequence.ReservedBytes
- uid: System.IO.Log.IRecordSequence.RestartSequenceNumber*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: RestartSequenceNumber
  nameWithType: IRecordSequence.RestartSequenceNumber
- uid: System.IO.Log.IRecordSequence.RetryAppend*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: RetryAppend
  nameWithType: IRecordSequence.RetryAppend
- uid: System.IO.Log.IRecordSequence.WriteRestartArea*
  parent: System.IO.Log.IRecordSequence
  isExternal: false
  name: WriteRestartArea
  nameWithType: IRecordSequence.WriteRestartArea
