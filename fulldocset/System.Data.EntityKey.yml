### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "Gir en robust referanse til et objekt som er en forekomst av en enhetstype."
  remarks: "EntityKey-objekter er uforanderlige. Det vil si når de konstruert kan de ikke endres.       Hvis du vil ha mer informasjon, se [arbeide med Entity-nøkler](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasse."
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klassen med en enhet settnavn og en generell <xref:System.Collections.Generic.KeyValuePair>samlingen.</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som er angitt enhetsnavnet kvalifisert av beholderen enhetsnavnet.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "En generell <xref:System.Collections.Generic.KeyValuePair>samlingen.</xref:System.Collections.Generic.KeyValuePair>       Hver nøkkel/verdi-par har et egenskapsnavn som nøkkelen og verdien for egenskapen som verdi. Det må være ett par for hver egenskap som er en del av den <xref href=&quot;System.Data.EntityKey&quot;> </xref>. Nøkkel/verdi-parene rekkefølge er viktig, men hver nøkkelegenskapen som skal inkluderes. Egenskapsnavn som er enkle navn som ikke er kvalifisert med et entity-typenavn eller skjemanavnet."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klassen med et sett enhetsnavn og en &lt;xref:System.Collections.Generic.IEnumerable%601&gt; samling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objekter."
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som er angitt enhetsnavnet kvalifisert av beholderen enhetsnavnet.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "En &lt;xref:System.Collections.Generic.IEnumerable%601&gt; samling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objekter som ikke nøkkelen."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.EntityKey&quot;> </xref> klassen med en angitt enhetsnavn og nøkkelpar for bestemte enheten."
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "En <xref:System.String>som er angitt enhetsnavnet kvalifisert av beholderen enhetsnavnet.</xref:System.String>"
    - id: keyName
      type: System.String
      description: "En <xref:System.String>som er navnet på nøkkelen.</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "En <xref:System.Object>som nøkkelverdien.</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Henter eller angir navnet på enheten beholderen."
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "En <xref:System.String>verdi som er navnet på enheten beholderen for enheten som den <xref href=&quot;System.Data.EntityKey&quot;> </xref> hører.</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Henter eller angir nøkkelverdiene som er knyttet til dette <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Den <xref:System.Data.EntityKey>klassen inneholder en kopi av verdiene som utgjør logiske nøkkelen som er angitt for denne enhetstypen.</xref:System.Data.EntityKey>       Medlemmer av den <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>ha et navn og en verdi i en <xref:System.Collections.Generic.KeyValuePair%602>, der nøkkelen er egenskapsnavnet og verdien er den faktiske verdien for egenskapen på objektet.</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "En &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; av nøkkelverdier for dette <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Et enkelt <xref href=&quot;System.Data.EntityKey&quot;> </xref> identifisere en enhet som er resultatet av en mislykket [BEHANDLE](~/add/includes/ajax-current-ext-md.md) operasjonen."
  remarks: "Det er forskjellige måter å hente en ugyldig enhet. Vanligste scenariet er når en [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] spørring bruker den [BEHANDLE](../Topic/TREAT%20\\(Entity%20SQL\\).md) brukes til å tolke en forekomst av typen polymorfisk som en bestemt type og forekomsten aktuelle samsvarer ikke. ([BEHANDLE](../Topic/TREAT%20\\(Entity%20SQL\\).md) ligner C# `as` operator). I dette tilfellet spørringen returnerer en enhet som ikke er gyldig, og entity-nøkkel den resulterende enheten settes til EntityNotValidKey."
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Henter eller angir navnet på enheten settet."
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "En <xref:System.String>verdien som er navnet på enheten som er angitt for enheten som den <xref href=&quot;System.Data.EntityKey&quot;> </xref> hører.</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Returnerer en verdi som angir om denne forekomsten er lik en angitt <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Midlertidige nøkler har forskjellige sammenligningen semantikk enn permanent nøkler:-midlertidige nøkler Bruk referanse likhet. Det vil si to refererer til nøyaktig samme midlertidige <xref:System.Data.EntityKey>forekomsten er like, men noen andre <xref:System.Data.EntityKey>forekomster er like.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nøklene bestemmer likhet basert på verdiene i inneholder Nøkkelegenskapene og <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vil si du kan ha to atskilte <xref:System.Data.EntityKey>forekomster som er lik hvis deres enheten settene er den samme og key verdiene er like.</xref:System.Data.EntityKey>       I tillegg har midlertidige nøkler ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nøkkelverdier, men permanent nøkler gjøre</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> objektet skal sammenlignes med denne forekomsten."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis denne forekomsten og <code> other </code> har like verdier; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Returnerer en verdi som angir om denne forekomsten er likt det angitte objektet."
  remarks: "Midlertidige nøkler har forskjellige sammenligningen semantikk enn permanent nøkler:-midlertidige nøkler Bruk referanse likhet. Det vil si to refererer til nøyaktig samme midlertidige <xref:System.Data.EntityKey>forekomsten er like, men noen andre <xref:System.Data.EntityKey>forekomster er like.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nøklene bestemmer likhet basert på verdiene i inneholder Nøkkelegenskapene og <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vil si du kan ha to atskilte <xref:System.Data.EntityKey>forekomster som er lik hvis de <xref:System.Data.Metadata.Edm.EntitySet>objekter er like og key verdiene er like.</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       I tillegg har midlertidige nøkler ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nøkkelverdier, men permanent nøkler gjøre</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "En <xref:System.Object>skal sammenlignes med denne forekomsten.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis denne forekomsten og <code> obj </code> har like verdier; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Henter enhet som er angitt for denne entity-nøkkel fra arbeidsområdet angitte metadataene."
  remarks: "Settet med enheten brukes basert på beholder enhetsnavnet og enheten angi navnet på nøkkelen."
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "Arbeidsområdet metadata som inneholder enheten."
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "Den <xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref> for entity-nøkkel."
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Finner ikke enheten settet i arbeidsområdet angitte metadataene."
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Fungerer som en hash-funksjonen for gjeldende <xref href=&quot;System.Data.EntityKey&quot;> </xref> objektet. GetHashCode passer for nummer algoritmer og datastrukturer som en hash-tabell."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "En hash-kode for gjeldende <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Henter en verdi som angir om den <xref href=&quot;System.Data.EntityKey&quot;> </xref> er midlertidig."
  remarks: "Når det opprettes en ny enhet, den [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] definerer midlertidig nøkkel og IsTemporary settes til `true`. Når du kaller den <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>-metoden i [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] tilordner en permanent nøkkel og IsTemporary settes til `false`.</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      > [!NOTE] > Midlertidige nøkler konstruert automatisk rammeverket; de kan ikke konstruere direkte fra en bruker.       Midlertidige nøkler har forskjellige sammenligningen semantikk enn permanent nøkler:-midlertidige nøkler Bruk referanse likhet. Det vil si to refererer til nøyaktig samme midlertidige <xref:System.Data.EntityKey>forekomsten er like, men noen andre <xref:System.Data.EntityKey>forekomster er like.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nøklene bestemmer likhet basert på verdiene i inneholder Nøkkelegenskapene og <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vil si du kan ha to atskilte <xref:System.Data.EntityKey>forekomster som er lik hvis deres enheten settene er den samme og key verdiene er like.</xref:System.Data.EntityKey>       I tillegg har midlertidige nøkler ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nøkkelverdier, men permanent nøkler gjøre</xref:System.Data.Metadata.Edm.EntitySet>       Når den <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>-metoden på en enhet <xref:System.Data.Objects.ObjectStateEntry>og enheten overføringer fra den <xref:System.Data.EntityState>tilstand til <xref:System.Data.EntityState>tilstand, den [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] beregner en ny permanent nøkkel for enheten og synkroniserer alle referanser av midlertidig automatisk.</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Data.EntityKey&quot;> </xref> er midlertidig; ellers, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "En singleton <xref href=&quot;System.Data.EntityKey&quot;> </xref> av en skrivebeskyttet enhet identifiseres."
  remarks: "En skrivebeskyttet enhet identifiserer en enhet som er gyldig på hver måte at den ikke er knyttet til en faktisk enhet angitt. Dette kan skje som en del av resultatet av en [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] spørring som bygger og returnerer en entity-forekomst som er angitt i teksten for spørringen (i motsetning til en enhet som ble hentet fra en tabell). Gjøres kan ikke fast en enhet som ikke har en enhet som er angitt i databasen før den er knyttet til noen entity-sett. Derfor objektet materializer behandler denne typen enhet som om det <xref:System.Data.Objects.MergeOption>flettealternativ ble angitt, uavhengig av faktisk notracking som ble angitt.</xref:System.Data.Objects.MergeOption> Et enhetsobjekt vil bli opprettet, men dens identitet løses ikke, og den vil ikke bli lagt til tilstanden manager som en del av prosessen materialization."
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Helper metoden som brukes til å deserialisere en <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserialized brukes av objektet Services under deserialisering av et <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Hvis du vil ha mer informasjon, se [serialisering av objekter](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beskriver kilde og mål for en gitt serialisert dataflyt og gir et ekstra oppkaller brukerdefinert kontekst."
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Helper metoden som brukes til å deserialisere en <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserializing brukes av objektet Services under deserialisering av et <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Hvis du vil ha mer informasjon, se [serialisering av objekter](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beskriver kilde og mål for en gitt serialisert dataflyt, og gir et ekstra oppkaller brukerdefinert kontekst."
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Sammenligner to <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekter."
  remarks: "Midlertidige nøkler har forskjellige sammenligningen semantikk enn permanent nøkler:-midlertidige nøkler Bruk referanse likhet. Det vil si to refererer til nøyaktig samme midlertidige <xref:System.Data.EntityKey>forekomsten er like, men noen andre <xref:System.Data.EntityKey>forekomster er like.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nøklene bestemmer likhet basert på verdiene i inneholder Nøkkelegenskapene og <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vil si du kan ha to atskilte <xref:System.Data.EntityKey>forekomster som er lik hvis deres enheten settene er den samme og key verdiene er like.</xref:System.Data.EntityKey>       I tillegg har midlertidige nøkler ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nøkkelverdier, men permanent nøkler gjøre</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> skal sammenlignes."
    - id: key2
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> skal sammenlignes."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Sammenligner to <xref href=&quot;System.Data.EntityKey&quot;> </xref> objekter."
  remarks: "Midlertidige nøkler har forskjellige sammenligningen semantikk enn permanent nøkler:-midlertidige nøkler Bruk referanse likhet. Det vil si to refererer til nøyaktig samme midlertidige <xref:System.Data.EntityKey>forekomsten er like, men noen andre <xref:System.Data.EntityKey>forekomster er like.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanent nøklene bestemmer likhet basert på verdiene i inneholder Nøkkelegenskapene og <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> Det vil si du kan ha to atskilte <xref:System.Data.EntityKey>forekomster som er lik hvis deres enheten settene er den samme og key verdiene er like.</xref:System.Data.EntityKey>       I tillegg har midlertidige nøkler ingen <xref:System.Data.Metadata.Edm.EntitySet>eller nøkkelverdier, men vanlige nøkler gjøre</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> skal sammenlignes."
    - id: key2
      type: System.Data.EntityKey
      description: "En <xref href=&quot;System.Data.EntityKey&quot;> </xref> skal sammenlignes."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
