### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Collection
  id: Collection
  children:
  - Microsoft.VisualBasic.Collection.#ctor
  - Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  - Microsoft.VisualBasic.Collection.Clear
  - Microsoft.VisualBasic.Collection.Contains(System.String)
  - Microsoft.VisualBasic.Collection.Count
  - Microsoft.VisualBasic.Collection.GetEnumerator
  - Microsoft.VisualBasic.Collection.Item(System.Int32)
  - Microsoft.VisualBasic.Collection.Item(System.Object)
  - Microsoft.VisualBasic.Collection.Item(System.String)
  - Microsoft.VisualBasic.Collection.Remove(System.Int32)
  - Microsoft.VisualBasic.Collection.Remove(System.String)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  - Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: Collection
  nameWithType: Collection
  fullName: Microsoft.VisualBasic.Collection
  type: Class
  summary: "En Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> er et sortert sett med elementer som kan refereres til som en enhet."
  remarks: "> [!NOTE]> Når det er mulig, bør du bruke generisk samlinger i den <xref:System.Collections.Generic?displayProperty=fullName>navneområde eller <xref:System.Collections.Concurrent>navneområde i stedet for en Visual Basic `Collection`.</xref:System.Collections.Concurrent> </xref:System.Collections.Generic?displayProperty=fullName> Hvis du vil ha mer informasjon, se [samlinger](~/add/includes/ajax-current-ext-md.md).       Visual Basic `Collection` objekt er det enkelt å referere til en relaterte elementer som ett enkelt objekt. Elementer, eller *elementer*i en samling må bare være relatert ved at de finnes i samlingen. Elementene i en samling har ikke dele samme datatype.       Du kan opprette en samling på samme måte som du oppretter andre objekter som følgende eksempel illustrerer.      ```   Dim coll As New Microsoft.VisualBasic.Collection()   ```Når du har opprettet en samling, kan du gjøre følgende:-Legg til et element med den <xref:Microsoft.VisualBasic.Collection.Add%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Add%2A>      -Fjerne et element med den <xref:Microsoft.VisualBasic.Collection.Remove%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Remove%2A>      -Fjern alle elementer med den <xref:Microsoft.VisualBasic.Collection.Clear%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Clear%2A>      – Finn ut hvor mange elementer i samlingen inneholder med den <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count%2A>      -Kontroller om det finnes et spesifikt element med den <xref:Microsoft.VisualBasic.Collection.Contains%2A>metoden.</xref:Microsoft.VisualBasic.Collection.Contains%2A>      -Returnere et spesifikt element fra samlingen med den <xref:Microsoft.VisualBasic.Collection.Item%2A>egenskapen.</xref:Microsoft.VisualBasic.Collection.Item%2A>      – Gå gjennom hele samlingen med den [For hver... Neste setning](~/add/includes/ajax-current-ext-md.md).          > [!NOTE] > Selv om Visual Basic `Collection` objektet har funksjonalitet som er identisk med den `Collection` objekt i Visual Basic 6.0 to kan fungere sammen i en COM-miljøet.          > [!CAUTION] > Gjentakelse Visual Basic `Collection` er ikke en sikker-prosedyre. Selv om samlingen er synkronisert, kan fortsatt andre tråder endre samlingen, fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, låse samlingen eller opp unntak som er et resultat av endringer foretatt av andre tråder. Hvis du vil ha mer informasjon om låsing et programmeringselement, se [SyncLock setningen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection. It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.  \n  \n To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance. Leave the default name as `nameClass`. Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure. (This example works only with host applications that support classes.)  \n  \n [!code-vb[VbVbalrCollectionObject#1](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]

      public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Oppretter og returnerer en ny [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  remarks: "Den [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] samlingen ble returnert av denne konstruktøren, er tom og ikke har noen opprinnelige kapasitet tildelt.       [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]samlinger er ikke kompatibel med den [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] samlinger som er tilgjengelig i den <xref:System.Collections?displayProperty=fullName>, <xref:System.Collections.Generic?displayProperty=fullName>, og <xref:System.Collections.Specialized?displayProperty=fullName>navneområder.</xref:System.Collections.Specialized?displayProperty=fullName> </xref:System.Collections.Generic?displayProperty=fullName> </xref:System.Collections?displayProperty=fullName>"
  example:
  - "The following example creates a new [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:  \n  \n```  \nDim coll As New Microsoft.VisualBasic.Collection()  \n```  \n  \n This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property. [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collections hold elements of type <xref:System.Object>."
  syntax:
    content: public Collection ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  id: Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Legger til et element til en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet."
  remarks: "Den `Before` eller `After` argumentet må referere til en eksisterende element i samlingen; ellers oppstår en feil.       Hvis både den `Before` og `After` argumenter utelates, legges det nye objektet til slutten av samlingen.       En feil oppstår også hvis et angitt `Key` verdi som samsvarer med nøkkelen for det eksisterende elementet i samlingen."
  example:
  - "The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`. To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`. Add the `child` class definition and the `family` declaration to the form code. Modify the `_Click` event handlers for the **Add** and **List** buttons as shown. The **Add** button allows you to add children. The **List** button displays the names of all the children.  \n  \n [!code-vb[VbVbalrCollectionObject#2](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Form1.vb#2)]"
  syntax:
    content: public void Add (object Item, string Key = null, object Before = null, object After = null);
    parameters:
    - id: Item
      type: System.Object
      description: "Kreves. Et objekt av typen som angir at elementet skal legge til i samlingen."
    - id: Key
      type: System.String
      description: "Valgfritt. En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk som angir en nøkkel streng som kan brukes i stedet for en posisjonsindeksen for å få tilgang til denne nye element i samlingen."
    - id: Before
      type: System.Object
      description: "Valgfritt. Et uttrykk som angir en relativ plassering i samlingen. Elementet som skal legges til er plassert i samlingen før elementet som identifiseres av den `Before` argumentet. Hvis `Before` er et numerisk uttrykk den må være et tall mellom 1 og verdien samlingens <xref:Microsoft.VisualBasic.Collection.Count*>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count*> Hvis `Before` er en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk, må den tilsvare key strengen som er angitt når elementet som det refereres til ble lagt til i samlingen. Du kan ikke angi både `Before` og `After`."
    - id: After
      type: System.Object
      description: "Valgfritt. Et uttrykk som angir en relativ plassering i samlingen. Elementet som skal legges til er plassert i samlingen etter element ble identifisert av den `After` argumentet. Hvis `After` er et numerisk uttrykk den må være et tall mellom 1 og verdien samlingens <xref uid=&quot;langword_csharp_Count&quot; name=&quot;Count&quot; href=&quot;&quot;> </xref> egenskapen. Hvis `After` er en <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk, må den tilsvare key strengen som er angitt når elementet til ble lagt til i samlingen. Du kan ikke angi både `Before` og `After`."
  overload: Microsoft.VisualBasic.Collection.Add*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Clear
  id: Clear
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Sletter alle elementer i Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet."
  remarks: "Den `Clear` metoden tømmer samlingen og tilbakestiller den <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen settes til 0.</xref:Microsoft.VisualBasic.Collection.Count%2A>"
  example:
  - '[!code-vb[VbVbalrCollectionObject#3](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#3)]'
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  id: Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer en <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> verdi som angir om en Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet inneholder et element med en bestemt nøkkel."
  remarks: "`Contains`Returnerer `True` hvis samlingen inneholder et element med en nøkkel som samsvarer med nøyaktig `Key`. Ellers `Contains` returnerer `False`. Case ignoreres når samsvarer med nøkkelverdiene.       En Visual Basic `Collection` kan inneholde noen elementer som har nøkler og andre elementer uten nøkler. Dette er avhengig av om kallet til den <xref:Microsoft.VisualBasic.Collection.Add%2A>metoden leverer et argument for den valgfrie `Key` parameteren.</xref:Microsoft.VisualBasic.Collection.Add%2A>"
  example:
  - "[!code-vb[VbVbalrCollectionObject#4](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#4)]  \n  \n If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method."
  syntax:
    content: public bool Contains (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Kreves. En <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk som angir nøkkelen for det skal søkes etter av elementene i samlingen."
    return:
      type: System.Boolean
      description: "Returnerer en <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> verdi som angir om en Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet inneholder et element med en bestemt nøkkel."
  overload: Microsoft.VisualBasic.Collection.Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Count
  id: Count
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> som inneholder antallet elementer i en samling. Skrivebeskyttet."
  remarks: "Bruk av `Count` til å fastslå hvor mange elementer i en `Collection` objektet."
  example:
  - "This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#6](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#6)]  \n  \n The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Returnerer en <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> som inneholder antallet elementer i en samling. Skrivebeskyttet."
  overload: Microsoft.VisualBasic.Collection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer en referanse til et enumerator-objekt som brukes til å oppdatere en <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  remarks: "Den [For hver... Neste setning](~/add/includes/ajax-current-ext-md.md) kall `GetEnumerator` ikke hente et enumerator-objekt for å støtte gjentakelse over en samling elementene. Vanligvis bruker du en `For Each`... `Next` gjentas for å bla gjennom en samling eller en matrise, og du trenger ikke å kalle `GetEnumerator` eksplisitt.       Hvis du trenger nærmere kontroll over gjentakelse enn den `For Each`... `Next` setninger gir, kan du bruke den `GetEnumerator` metode til å utføre en tilpasset traversering. Nedenfor finner du noen tilfeller der må du kanskje gjøre dette.      -Bør du gå tilbake til starten av samlingen og starte gjentakelse på nytt før den er avsluttet.      -Du vil kanskje hoppe over ett eller flere elementer for en rekke årsaker.      -Du må kanskje endre av elementene i samlingen midt i en traversering. I dette tilfellet Skaff deg et nytt objekt enumeratoren fordi den forrige som er gjort ugyldig."
  example:
  - "The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.  \n  \n [!code-vb[VbVbalrCollectionObject#7](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#7)]  \n  \n `GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace. The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods. For more information, see [For Each...Next Statement](../Topic/For%20Each...Next%20Statement%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Returnerer en referanse til et enumerator-objekt som brukes til å oppdatere en <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  overload: Microsoft.VisualBasic.Collection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  remarks: "Hvis `Index` er av typen `Object`, `Item` egenskapen prøver å behandle den som en `String`, `Char`, `Char` matrise eller heltallsverdi. Hvis `Item` kan ikke konvertere `Index` til `String` eller `Integer`, det oppstår en <xref:System.ArgumentException>unntak.</xref:System.ArgumentException>       Den `Item` egenskapen er standardegenskap for en samling. Følgende linjer code er derfor like.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: "(A) et numerisk uttrykk som angir posisjonen til et element i samlingen. `Index`må være et tall mellom 1 og verdien av samlingens <xref:Microsoft.VisualBasic.Collection.Count*>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count*> Eller (B) en <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> uttrykk som angir posisjonen eller nøkkel strengen for et element i samlingen."
    return:
      type: System.Object
      description: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  id: Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  remarks: "Hvis `Index` er av typen `Object`, `Item` egenskapen prøver å behandle den som en `String`, `Char`, `Char` matrise eller heltallsverdi. Hvis `Item` kan ikke konvertere `Index` til `String` eller `Integer`, det oppstår en <xref:System.ArgumentException>unntak.</xref:System.ArgumentException>       Den `Item` egenskapen er standardegenskap for en samling. Følgende linjer code er derfor like.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[object Index] { get; }
    parameters:
    - id: Index
      type: System.Object
      description: "(A) et numerisk uttrykk som angir posisjonen til et element i samlingen. `Index`må være et tall mellom 1 og verdien av samlingens <xref:Microsoft.VisualBasic.Collection.Count*>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count*> Eller (B) en <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> uttrykk som angir posisjonen eller nøkkel strengen for et element i samlingen."
    return:
      type: System.Object
      description: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  remarks: "Hvis `Index` er av typen `Object`, `Item` egenskapen prøver å behandle den som en `String`, `Char`, `Char` matrise eller heltallsverdi. Hvis `Item` kan ikke konvertere `Index` til `String` eller `Integer`, det oppstår en <xref:System.ArgumentException>unntak.</xref:System.ArgumentException>       Den `Item` egenskapen er standardegenskap for en samling. Følgende linjer code er derfor like.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[string Key] { get; }
    parameters:
    - id: Key
      type: System.String
      description: "En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk som angir en nøkkel streng som kan brukes i stedet for en posisjonsindeksen til å få tilgang til et element i samlingen. `Key`må samsvare med det `Key` argumentet angis når elementet ble lagt til i samlingen."
    return:
      type: System.Object
      description: "Returnerer et bestemt element i en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet ved posisjonen eller nøkkel. Skrivebeskyttet."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Fjerner et element fra en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet."
  remarks: "Når `Remove` sletter et element fra en samling den reduseres samlingens <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen av en.</xref:Microsoft.VisualBasic.Collection.Count%2A> Det også reduseres den `Index` verdien for hvert element som tidligere etterfulgt av slettet element i samlingen.       Hvis et element ble lagt til samlingen uten en `Key`, må du bruke den `Index` skal fjernes."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (int Index);
    parameters:
    - id: Index
      type: System.Int32
      description: "Et numerisk uttrykk som angir posisjonen til et element i samlingen. `Index`må være et tall mellom 1 og verdien av samlingens <xref:Microsoft.VisualBasic.Collection.Count*>egenskapen.</xref:Microsoft.VisualBasic.Collection.Count*>"
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Fjerner et element fra en <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> objektet."
  remarks: "Når `Remove` sletter et element fra en samling den reduseres samlingens <xref:Microsoft.VisualBasic.Collection.Count%2A>egenskapen av en.</xref:Microsoft.VisualBasic.Collection.Count%2A> Det også reduseres den `Index` verdien for hvert element som tidligere etterfulgt av slettet element i samlingen.       Hvis et element ble lagt til samlingen uten en `Key`, må du bruke den `Index` skal fjernes."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "En unik <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> uttrykk som angir en nøkkel streng som kan brukes i stedet for en posisjonsindeksen til å få tilgang til et element i samlingen. `Key`må samsvare med det `Key` argumentet angis når elementet ble lagt til i samlingen."
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Overfører av elementene i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> til en <xref:System.Array>, med Start fra en bestemt <xref:System.Array>indeksen.</xref:System.Array> </xref:System.Array> Implementerer den <xref:System.Collections.ICollection>grensesnittet.</xref:System.Collections.ICollection>"
  remarks: "Elementene kopieres til den <xref:System.Array>i samme rekkefølge som enumeratoren går gjennom den <xref:Microsoft.VisualBasic.Collection>objektet.</xref:Microsoft.VisualBasic.Collection> </xref:System.Array>       Denne metoden er en O (`n`) operasjonen, der `n` er hentet fra <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>.</xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensjonal <xref:System.Array>som er målet for elementene kopieres fra <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Array> Den <xref:System.Array>må ha nullbasert indeksering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Den nullbaserte indeksen i `array` som kopiering begynner."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>er flerdimensjonal.       - eller - antallet elementer i kilden <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet som er større enn den tilgjengelige plassen fra <code>index</code> til slutten av målet <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Hva slags kilden <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet kan ikke endres automatisk til av målet <code> array </code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  id: System#Collections#ICollection#ICollectionCount
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: int System.Collections.ICollection.ICollectionCount { get; }
    return:
      type: System.Int32
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  id: System#Collections#ICollection#ICollectionIsSynchronized
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.ICollection.ICollectionIsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  id: System#Collections#ICollection#ICollectionSyncRoot
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.ICollection.ICollectionSyncRoot { get; }
    return:
      type: System.Object
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer en opplisting som går gjennom samlingen. Implementerer den <xref:System.Collections.ICollection>grensesnittet.</xref:System.Collections.ICollection>"
  remarks: "[Visual Basic C#]       Den `foreach` -setningen for språket C# (`for each` i Visual Basic) skjuler av hvor komplekse enumeratorene. Ved hjelp av derfor `foreach` anbefales, i stedet for direkte manipulering enumeratoren.       Enumeratorene kan brukes til å lese data i samlingen, men de kan ikke brukes til å endre den underliggende samlingen.       I utgangspunktet er enumeratoren plassert før det første elementet i samlingen. Den <xref:System.Collections.IEnumerator.Reset%2A>metoden henter også enumeratoren tilbake til denne plasseringen.</xref:System.Collections.IEnumerator.Reset%2A> På denne plasseringen av <xref:System.Collections.IEnumerator.Current%2A>egenskapen er ikke definert.</xref:System.Collections.IEnumerator.Current%2A> Du må derfor kalle <xref:System.Collections.IEnumerator.MoveNext%2A>metoden for å gå videre enumeratoren til det første elementet i samlingen før leser <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Returnerer det samme objektet før enten <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kalles.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>angir <xref:System.Collections.IEnumerator.Current%2A>til neste element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Hvis <xref:System.Collections.IEnumerator.MoveNext%2A>formidler slutten av samlingen enumeratoren er plassert etter det siste elementet i samlingen og <xref:System.Collections.IEnumerator.MoveNext%2A>returnerer `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Når enumeratoren er på denne plasseringen, etterfølgende kall til <xref:System.Collections.IEnumerator.MoveNext%2A>også returnere `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Hvis siste kall til <xref:System.Collections.IEnumerator.MoveNext%2A>returnerer `false`, <xref:System.Collections.IEnumerator.Current%2A>er udefinert.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Angi <xref:System.Collections.IEnumerator.Current%2A>til det første elementet i samlingen på nytt, kan du kalle <xref:System.Collections.IEnumerator.Reset%2A>etterfulgt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En opplisting forblir gyldig så lenge samlingen forblir uendret. Hvis du endrer til samlingen, for eksempel å legge til, endre eller slette elementer, enumeratoren ugyldiggjøres, og virkemåten er ikke definert.       Enumeratoren har ikke eksklusiv tilgang til samlingen. lister opp i en samling er derfor gjelder ikke en sikker-prosedyre. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen. Du må implementere din egen synkronisering for å tillate samlingen for å få tilgang til flere tråder for lesing og skriving."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "En <xref:System.Collections.IEnumerator>objekt som kan brukes til å gå gjennom samlingen.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Legger til et element for den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "Du kan også bruke den <xref:Microsoft.VisualBasic.Collection.Item%2A>til å legge til nye elementer ved å angi verdien for en nøkkel som ikke finnes i den <xref:Microsoft.VisualBasic.Collection>objektet.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection.Item%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>til å legge til den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Plasser det nye objektet ble satt inn."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet er skrivebeskyttet.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet har en fast størrelse."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Fjerner alle elementer fra de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "Denne metoden fjerner alle elementer fra de <xref:Microsoft.VisualBasic.Collection>objektet.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref:System.Collections.IList>er skrivebeskyttet.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Bestemmer om den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet inneholder en bestemt verdi. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "Denne metoden bestemmer om den <xref:Microsoft.VisualBasic.Collection>objektet inneholder en bestemt verdi.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>ikke i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "Returnerer <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> hvis den <xref:System.Object>finnes i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objekt; ellers <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  id: System#Collections#IList#IListIsFixedSize
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  id: System#Collections#IList#IListIsReadOnly
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  id: System#Collections#IList#IListItem(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.IList.IListItem[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Som skal legges til."
    return:
      type: System.Object
      description: "Som skal legges til."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Bestemmer indeksen for et bestemt element i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "Denne metoden bestemmer indeksen for et bestemt element i det <xref:Microsoft.VisualBasic.Collection>objektet.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>ikke i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Indeksen for <code> value </code> Hvis funnet i samlingen; ellers, -1."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Setter inn et element for den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet i den angitte indeksen. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "Hvis `index` er lik antallet elementer i den <xref:Microsoft.VisualBasic.Collection>objekt deretter `value` føyes til slutten.</xref:Microsoft.VisualBasic.Collection>       I samlinger sammenhengende elementer passer for eksempel lister, elementene som følger pekeren Flytt ned til det nye objektet. Hvis samlingen er indeksert, oppdateres også indeksene i elementer som er flyttet. Dette gjelder ikke for samlinger der elementer begrepsmessig er gruppert i samlinger, for eksempel en hash-tabell."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Den nullbaserte indeksen som `value` skal settes inn."
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>å sette inn den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er ikke en gyldig indeks i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet er skrivebeskyttet.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet har en fast størrelse."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>value</code>null referanse i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Fjerner den første forekomsten av et bestemt objekt fra den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "I samlinger med sammenhengende elementer, for eksempel lister, Flytt elementene som følger elementet fjernes opp skal ha vacated punktet. Hvis samlingen er indeksert, oppdateres også indeksene i elementer som er flyttet. Dette gjelder ikke for samlinger der elementer begrepsmessig er gruppert i samlinger, for eksempel en hash-tabell. Hvis `value` finnes ikke i den <xref:Microsoft.VisualBasic.Collection>objektet i <xref:Microsoft.VisualBasic.Collection>objektet forblir uendret, og ingen unntak.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Den <xref:System.Object>fjerne fra den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet er skrivebeskyttet.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet har en fast størrelse."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Fjerner det <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet elementet i den angitte indeksen. Implementerer den <xref:System.Collections.IList>grensesnittet.</xref:System.Collections.IList>"
  remarks: "I samlinger med sammenhengende elementer, for eksempel lister, Flytt elementene som følger elementet fjernes opp skal ha vacated punktet. Hvis samlingen er indeksert, oppdateres også indeksene i elementer som er flyttet. Dette gjelder ikke for samlinger der elementer begrepsmessig er gruppert i samlinger, for eksempel en hash-tabell."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Den nullbaserte indeksen for elementet som skal fjernes."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er ikke en gyldig indeks i den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet er skrivebeskyttet.       - eller - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet har en fast størrelse."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Kjører etter hele <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet diagrammet er deserialiseres. Implementerer den <xref href=&quot;System.Runtime.Serialization.IDeserializationCallback&quot;> </xref> grensesnitt."
  remarks: "Denne metoden kalles etter hele <xref:Microsoft.VisualBasic.Collection>objektet diagrammet er deserialiseres.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Objektet som startet tilbakeringing."
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Returnerer dataene som kreves for å serialisere den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet. Implementerer den <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> grensesnitt."
  remarks: "Denne metoden returnerer dataene som kreves for å serialisere den <xref:Microsoft.VisualBasic.Collection>objektet.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "En <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objektet som inneholder informasjonen som kreves for å serialisere den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "En <xref:System.Runtime.Serialization.StreamingContext>objektet som inneholder kilde og mål for serialisert dataflyt knyttet til den <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objektet.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Collection.#ctor
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Collection.Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Collection.Count
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.VisualBasic.Collection.#ctor*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection
  nameWithType: Collection.Collection
- uid: Microsoft.VisualBasic.Collection.Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add
  nameWithType: Collection.Add
- uid: Microsoft.VisualBasic.Collection.Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear
  nameWithType: Collection.Clear
- uid: Microsoft.VisualBasic.Collection.Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains
  nameWithType: Collection.Contains
- uid: Microsoft.VisualBasic.Collection.Count*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
- uid: Microsoft.VisualBasic.Collection.GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.Item*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item
  nameWithType: Collection.Item
- uid: Microsoft.VisualBasic.Collection.Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove
  nameWithType: Collection.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection.System.Collections.ICollection.CopyTo
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection.System.Collections.IList.Add
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Collection.System.Collections.IList.Clear
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection.System.Collections.IList.Contains
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem
  nameWithType: Collection.System.Collections.IList.IListItem
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection.System.Collections.IList.IndexOf
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection.System.Collections.IList.Insert
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection.System.Collections.IList.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Collection.System.Collections.IList.RemoveAt
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData
