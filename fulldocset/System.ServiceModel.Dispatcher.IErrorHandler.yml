### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Gjør en implementer til å kontrollere feilmelding returnert til oppkalleren og utføre eventuelt egendefinert feilbehandling for eksempel logging."
  remarks: "For å kontrollere eksplisitt virkemåten for applikasjonen når et unntak, implementere grensesnittet IErrorHandler og legge den til den <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>&quot;s <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskapen.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler kan du kontrollere SOAP-feil som er generert, bestemme om å sende den til klienten og utføre tilknyttede oppgaver, for eksempel logging eksplisitt. Feil behandlingsprogrammer kalles i rekkefølgen de ble lagt til i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskapen.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementer den <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>metode for å kontrollere feilmelding som returneres til klienten.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementer den <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metode for å kontrollere feil relatert virkemåter, inkludert feil logging, og det gjør feilfrie en mislykkes rask, avslutter programmet, og så videre.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Fordi den <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metoden kan bare kalles fra mange ulike steder det finnes ingen garantier gjort om hvilken tråd metoden kalles på.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Ikke avhengige <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metoden blir kalt i operasjonen-tråden.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Alle <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringer først kalles før sending av en svarmelding.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Når alle <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringer er kallet og returnere, og hvis `fault` er ikke -`null`, sendes til klienten i henhold til operasjonen kontrakten.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Hvis `fault` er `null` etter at alle implementeringer er kalt, svarmeldingen kontrolleres av de <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>egenskapsverdi.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Unntak kan oppstå når alle <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementeringer er kallet og en svarmelding leveres til kanalen.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Hvis det oppstår et unntak for kanalen (for eksempel problemer serialisering meldingen) IErrorHandler objekter blir varslet. I dette tilfellet kan du fortsatt Kontroller at utviklingsmiljøet fanger inn og viser slike unntak du bruker sporing til å finne problemet. Du finner mer informasjon om sporing [ved hjelp av sporing for å feilsøke ditt program](~/add/includes/ajax-current-ext-md.md).       Når svarmeldingen er sendt, alle <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementeringer kalles i samme rekkefølge.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Vanligvis implementering av IErrorHandler legges til i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>egenskapen på tjenesten (og klienten når det oppstår duplekskommunikasjon).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Du kan legge til IErrorHandler kjøretiden ved å implementere en virkemåte (enten en <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, eller <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>objektet) og bruke virkemåten programmatisk fra en konfigurasjonsfil eller med et egendefinert attributt til å koble til din IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Du finner mer informasjon om hvordan du bruker virkemåter for å endre kjøretiden [konfigurasjon og utvider kjøretiden med virkemåter](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Aktiverer behandling av feil relatert, og returnerer en verdi som angir om dispatcher avbryter økten og forekomst-kontekst i enkelte tilfeller."
  remarks: "Bruk metoden HandleError implementere feil relatert virkemåter for eksempel feil logging system varsler, avslutter programmet og så videre, og returnerer en verdi som angir om unntaket har blitt behandles på riktig måte.      > [!NOTE] > Fordi HandleError-metoden kan bare kalles fra mange ulike steder det finnes ingen garantier gjort om hvilken tråd metoden kalles i. Ikke avhengige HandleError-metoden blir kalt i operasjonen-tråden.       Alle <xref:System.ServiceModel.Dispatcher.IErrorHandler>implementeringer kalles.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Som standard (når er returverdien `false`), hvis det oppstår et unntak, dispatcher avbryter en økt og avbryter den <xref:System.ServiceModel.InstanceContext>Hvis det <xref:System.ServiceModel.InstanceContextMode>er noe annet enn <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  Unntaket anses deretter ubehandlet, og tilstand anses skadet.       Returner `true` fra HandleError å hindre denne standard virkemåte. Hvis noen feil behandlingsprogrammet returnerer `true` ber [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] at det er trygt å fortsette å bruke tilstand som er knyttet til den mislykkede forespørselen.       Hvis ingen feil behandling returnerer `true` fra HandleError metoden unntaket anses ubehandlet og standard svaret gjelder, noe som kan resultere i en avbrutt <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>og kanal ved kommunikasjon på en økt kanal eller <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>ikke settes til <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       Den `error` parameteren er aldri `null` og inneholder unntak-objektet som ble registrert."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "Unntak under behandling."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] bør Avbryt økten (Hvis det finnes et) og serverforekomsten konteksten hvis forekomsten konteksten ikke <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Aktiverer oppretting av en egendefinert &lt;xref:System.ServiceModel.FaultException%601&gt; som er returnert fra et unntak i løpet av en Tjenestemetoden."
  remarks: "Implementere metoden ProvideFault for å opprette en egendefinert feilmelding som returneres til klienten.  Metoden ProvideFault vil alltid kalles for unntak som lar operasjoner, bortsett fra når kjøretiden WCF gjenkjenner unntak som spesielt uopprettelig og rethrows unntaket seg selv. Når alle ProvideFault implementeringer har blitt kalt, feilmeldingen sendes til klienten (Hvis `fault` er ikke -`null`). Hvis den `fault` parameteren er `null` feilen som standard sendes til klienten.      > [!NOTE] > Innkommende meldingen som forårsaket feilen behandling er tilgjengelig i løpet av denne metoden fra den <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>egenskapen.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Fordi ProvideFault-metoden kan bare kalles fra mange ulike steder det finnes ingen garantier gjort om hvilken tråd metoden kalles i. Ikke avhengige ProvideFault-metoden blir kalt i operasjonen-tråden."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "Den <xref:System.Exception>objektet som er registrert i løpet av tjenesteoperasjonen.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "SOAP-versjonen av meldingen."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "Den &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; objektet som returneres til klient eller tjenesten i dobbeltsidig tilfeller."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
