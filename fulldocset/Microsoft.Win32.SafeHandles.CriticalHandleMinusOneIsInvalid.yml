### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  id: CriticalHandleMinusOneIsInvalid
  children:
  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  - Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  langs:
  - csharp
  name: CriticalHandleMinusOneIsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  type: Class
  summary: "Inneholder en basisklasse for Win32 Kritisk referanse implementeringer der verdien-1 angir en ugyldig referanse."
  remarks: "Denne klassen er avledet fra <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName>klassen.</xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> Den beskriver formatet til en ugyldig referanse som bruker verdien -1. Flere avledningene av denne klassen (for eksempel filen eller registret referanser) kan specialize dette videre.       Denne typen implementerer den <xref:System.IDisposable>grensesnittet.</xref:System.IDisposable> Når du er ferdig ved hjelp av typen, må du fjerne den direkte eller indirekte. Hvis du vil fjerne av typen direkte, kan du kalle den <xref:System.IDisposable.Dispose%2A>metoden i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Hvis du vil fjerne den indirekte, bruke et språk som `using` (i C#) eller `Using` (i Visual Basic). For mer informasjon, se &quot;Ved hjelp av et objekt som implementerer IDisposable&quot; i den <xref:System.IDisposable>grensesnittet emnet.</xref:System.IDisposable>      > [!NOTE] > Se den <xref:System.Runtime.InteropServices.CriticalHandle>klasse for viktig informasjon om kritisk referanse sikkerhet og tråd sikkerhetsnivået.</xref:System.Runtime.InteropServices.CriticalHandle>"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class CriticalHandleMinusOneIsInvalid : System.Runtime.InteropServices.CriticalHandle
  inheritance:
  - System.Runtime.InteropServices.CriticalHandle
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  id: '#ctor'
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  langs:
  - csharp
  name: CriticalHandleMinusOneIsInvalid()
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid&quot;> </xref> klasse."
  syntax:
    content: protected CriticalHandleMinusOneIsInvalid ();
    parameters: []
  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  langs:
  - csharp
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  type: Property
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Henter en verdi som angir om referansen er ugyldig."
  remarks: "Common language runtime bruker denne egenskapen til å fastslå om kritiske finalization er nødvendig."
  syntax:
    content: public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis referansen ikke er gyldig. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.CriticalHandle
  isExternal: false
  name: System.Runtime.InteropServices.CriticalHandle
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: CriticalHandleMinusOneIsInvalid()
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid()
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
  fullName: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor*
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: CriticalHandleMinusOneIsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.CriticalHandleMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid*
  parent: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid
  isExternal: false
  name: IsInvalid
  nameWithType: CriticalHandleMinusOneIsInvalid.IsInvalid
