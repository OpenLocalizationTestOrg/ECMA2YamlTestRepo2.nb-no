### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.MutexAccessRule
  id: MutexAccessRule
  children:
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.MutexRights
  langs:
  - csharp
  name: MutexAccessRule
  nameWithType: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
  type: Class
  summary: "Representerer et sett med tilgangsrettigheter gitt eller nektet for en bruker eller gruppe. Denne klassen kan ikke arves."
  remarks: "Klassen MutexAccessRule er blant et sett med klasser som .NET Framework gir for å administrere Windows access control sikkerhet på navngitte system Mutexer. Hvis du vil se en oversikt over disse klassene og deres forhold til den underliggende Windows access control-strukturen kan <xref:System.Security.AccessControl.MutexSecurity>.</xref:System.Security.AccessControl.MutexSecurity>      > [!NOTE] > Windows access control sikkerhet er betydning bare for navnet system Mutexer. Hvis en <xref:System.Threading.Mutex>objektet representerer en lokal mutex, tilgangskontroll er relevant.</xref:System.Threading.Mutex>       For å hente en liste over regler som er aktivert for en navngitt mutex, kan du bruke den <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>metode for å få en <xref:System.Security.AccessControl.MutexSecurity>objekt, og deretter bruke den <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>metode for å hente en samling MutexAccessRule objekter.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.MutexSecurity> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>       MutexAccessRule objekter tilordner ikke en med tilgangskontrolloppføringer i den underliggende detaljert tilgangskontrollisten (DACL). Når du får settet med alle tilgangsregler for en mutex, inneholder settet det minste antallet regler for øyeblikket må express alle tilgangskontrolloppføringer.      > [!NOTE] > Underliggende tilgangskontrolloppføringer endre som du bruker, og Fjern regler. Informasjonen i regler slås sammen hvis mulig hvis du vil beholde det minste antallet tilgangskontrolloppføringer. Derfor når du leser gjeldende liste over regler, kan den ikke se nøyaktig som listen over alle regler som du har lagt til.       Bruk MutexAccessRule objekter til å angi tilgangsrettigheter til å tillate eller avslå for en bruker eller gruppe. En MutexAccessRule objektet alltid representerer tilgang eller nektet tilgang aldri begge.       Du kan bruke en regel til en navngitt system mutex ved bruk av <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>metode for å få den <xref:System.Security.AccessControl.MutexSecurity>objektet.</xref:System.Security.AccessControl.MutexSecurity> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> Endre den <xref:System.Security.AccessControl.MutexSecurity>objektet ved hjelp av metodene å legge til regelen, og deretter bruke den <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>metode for å knytte security-objektet.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Du endrer en <xref:System.Security.AccessControl.MutexSecurity>objektet påvirker ikke rettigheter til en navngitt mutex før du kaller den <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>metode for å tilordne det endrede sikkerhetsobjektet til navngitt mutex.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.MutexSecurity>       MutexAccessRule objekter er uforanderlig. Sikkerhet for en mutex er endret ved hjelp av metodene for den <xref:System.Security.AccessControl.MutexSecurity>klassen for å legge til eller Fjern regler; som du gjør dette, underliggende tilgangskontrolloppføringer er endret.</xref:System.Security.AccessControl.MutexSecurity>      > [!NOTE] > Sikkerhet på synkroniseringsobjektene støttes ikke for Windows 98 eller installasjonen."
  example:
  - "The following code example demonstrates the creation and use of MutexAccessRule objects. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_5_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_5_1.cs)]"
  syntax:
    content: 'public sealed class MutexAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> klasse, angi brukeren eller gruppen som regelen gjelder for tilgangsrettigheter, og om de angitte tilgangsrettighetene er gitt eller nektet."
  remarks: "Vente en <xref:System.Threading.Mutex>(ved å kalle den <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>eller <xref:System.Threading.WaitHandle.WaitAll%2A>metoden), må du ha <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>tilgang.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Mutex> Å frigjøre mutex, ved å kalle den <xref:System.Threading.Mutex.ReleaseMutex%2A>metoden, må brukeren ha <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>tilgang.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.Mutex.ReleaseMutex%2A>"
  syntax:
    content: public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Brukeren eller gruppen som regelen gjelder for. Må være av typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller en type som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteres til typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> verdier som angir rettighetene gitt eller nektet."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Én av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> verdier som angir om rettighetene som er gitt eller nektet."
  overload: System.Security.AccessControl.MutexAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>angir en ugyldig verdi.       - eller - <code>type</code> angir en ugyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>eventRights</code> er null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>verken typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> eller en type som <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> som kan konverteres til typen <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexAccessRule(String,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> klasse, angir navnet på brukeren eller gruppen som regelen gjelder for tilgangsrettigheter, og om de angitte tilgangsrettighetene er gitt eller nektet."
  remarks: "Vente en <xref:System.Threading.Mutex>(ved å kalle den <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>eller <xref:System.Threading.WaitHandle.WaitAll%2A>metoden), må du ha <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>tilgang.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Mutex> Å frigjøre mutex, ved å ringe det <xref:System.Threading.Mutex.ReleaseMutex%2A>metoder, må brukeren ha <xref:System.Security.AccessControl.MutexRights?displayProperty=fullName>tilgang.</xref:System.Security.AccessControl.MutexRights?displayProperty=fullName> </xref:System.Threading.Mutex.ReleaseMutex%2A>       Denne konstruktøren, tilsvarer oppretting av en <xref:System.Security.Principal.NTAccount>objektet ved å sende `identity` til den <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>konstruktøren og sende den nyopprettede <xref:System.Security.Principal.NTAccount>objekt i <xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29>konstruktør.</xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.MutexAccessRule> objects. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/04cf3af8-ee81-48a6-806b-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/04cf3af8-ee81-48a6-806b-_1.cs)]"
  syntax:
    content: public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Navnet på brukeren eller gruppen regelen gjelder for."
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> verdier som angir rettighetene gitt eller nektet."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Én av de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> verdier som angir om rettighetene som er gitt eller nektet."
  overload: System.Security.AccessControl.MutexAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>angir en ugyldig verdi.       - eller - <code>type</code> angir en ugyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>er null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - <code>identity</code> er en tom streng.       - eller - <code>identity</code> inneholder over 512 tegn."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights
  id: MutexRights
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
  fullName: System.Security.AccessControl.MutexAccessRule.MutexRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Henter rettighetene gitt eller nektet ved tilgangsregelen."
  remarks: "<xref:System.Security.AccessControl.MutexAccessRule>objektene er uforanderlig.</xref:System.Security.AccessControl.MutexAccessRule> Du kan opprette en ny tilgangsregel som representerer en annen bruker annen rettigheter eller en annen <xref:System.Security.AccessControl.AccessControlType>, men du kan ikke endre en eksisterende tilgangsregel.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the MutexRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.MutexSecurity> object. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_0_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_0_1.cs)]"
  syntax:
    content: public System.Security.AccessControl.MutexRights MutexRights { get; }
    return:
      type: System.Security.AccessControl.MutexRights
      description: "En bitvis kombinasjon av <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> verdier som angir rettighetene gitt eller nektet ved tilgangsregelen."
  overload: System.Security.AccessControl.MutexAccessRule.MutexRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(IdentityReference,MutexRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  nameWithType: MutexRights
  fullName: System.Security.AccessControl.MutexRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule(String,MutexRights,AccessControlType)
  nameWithType: MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(String,MutexRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
  fullName: System.Security.AccessControl.MutexAccessRule.MutexRights
- uid: System.Security.AccessControl.MutexAccessRule.#ctor*
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexAccessRule
  nameWithType: MutexAccessRule.MutexAccessRule
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights*
  parent: System.Security.AccessControl.MutexAccessRule
  isExternal: false
  name: MutexRights
  nameWithType: MutexAccessRule.MutexRights
