### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementerer en datastruktur for å angi en egenskap som en bane under en annen egenskap eller under en eier type. Egenskapsbaner brukes i databinding til objekter, og dreiebøker og tidsplaner for animasjoner."
  remarks: "Denne klassen inneholder en streng <xref:System.Windows.PropertyPath.Path%2A>, og liste over avhengighetsegenskaper som er i <xref:System.Windows.PropertyPath.PathParameters%2A>i strengen<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath støtter to modi av: **kildemodus** beskriver en bane til en egenskap som brukes som kilde til en annen operasjon. Denne modusen brukes av den <xref:System.Windows.Data.Binding>klassen for å støtte databinding.</xref:System.Windows.Data.Binding>       **Target-modus** beskriver en bane til en egenskap som angis som et target-egenskap. Denne modusen brukes av animasjonen støtte dreieboken og tidslinjen setters.       For eksempel `Background.Opacity` er en totrinns-bane. Denne banen antyder: først finner den `Background` egenskapen for et objekt, hente verdiobjektet i `Background` egenskapen er satt til og hente verdien for den `Opacity` egenskapen på dette objektet.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## XAML Attributtbruk ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## XAML verdier *propertyPath* en streng som evalueres for å være enten en enkel eller kompleks egenskap-bane.       Syntaksen for å angi en PropertyPath [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] fleksible, men komplekse, og er beskrevet i emnet separate [PropertyPath XAML syntaksen](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klasse."
  remarks: "Denne konstruktøren har to helt forskjellige bruksområder avhengig av om den brukes for kilden modus egenskapsbanen for en binding eller et mål-modus for ett enkelt trinn egenskapsbanen for dreieboken mål.       Hvis du bruker dette <xref:System.Windows.PropertyPath>i kildemodus for en binding `parameter` er en streng som representerer et egenskapsnavn, eller kan være en streng som beskriver en &quot;trinnvise&quot; bane til egenskapen i den [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] objektmodellen for objektet som brukes som kilde for en binding.</xref:System.Windows.PropertyPath> Tegnet som identifiserer et &quot;trinn&quot; er et punktum (.) for en binding egenskapen-bane. Indeksering referanser (inkludert flere Indekserere og typen differensiering) støttes også. For mer informasjon om syntaksen strengen som brukes som spesielt av <xref:System.Windows.Data.Binding>objekt, kan du se <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> En egenskap som brukes som kilde binding må ikke være en avhengighetsegenskapen. Hvis bindingen oppdaterer toveis, må egenskapen det refereres til være skrivebeskyttet. Merk at bindingen målet har ikke en avhengighetsegenskapen. For mer informasjon, kan du se [Data Binding oversikt over](~/add/includes/ajax-current-ext-md.md).       Hvis du bruker dette <xref:System.Windows.PropertyPath>i modus for målet for en ett enkelt trinn bane for et mål for dreieboken `parameter` vanligvis er angitt som type <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Du kan også angi en streng som er <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> En av disse evalueres til du samme resultat fordi den er lagret internt som en streng. En angitt <xref:System.Windows.DependencyProperty>konverteres til en streng i <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>Støtter en kvalifisert navneformat for avhengighetsegenskaper, slik at du kan angi en *typeName*.* propertyName* kvalifisert avhengighet egenskapen name streng til PropertyPath konstruktøren i koden.</xref:System.Windows.Markup.DependencyPropertyConverter> Banen til avhengigheten egenskapsidentifikator er et annet begrep enn en kompleks bane. Sammensatte-path <xref:System.Windows.PropertyPath>i stedet må opprettes sammen med den <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>konstruktør.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Egenskapsbanen som enten beskriver en bane til en [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] egenskap eller et enkelt avhengighetsegenskapen."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klassen med de angitte kundene token streng og parameterne."
  remarks: "Denne signaturen brukes vanligvis bare i mål-modus <xref:System.Windows.PropertyPath>bruksområder med sammensatte baner.</xref:System.Windows.PropertyPath>       Denne konstruktøren støtter `params` for den `pathParameters` konstruktøren argumentet. Derfor kan du angi innholdet i `pathParameters` som en rekke kommadelt konstruktørargumenter som fylle matrisen, i stedet for å måtte dimensjonen tabelldata og fylle den med den `pathParameters` elementer. Hvert element som du angir må være én av følgende typer: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Hvis du vil ha mer informasjon om kravene til parameterne, se <xref:System.Windows.PropertyPath.Path%2A>og <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "En streng som angir den <xref:System.Windows.PropertyPath.Path*>, i et format som tokenized.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "En matrise av objekter som angir <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Henter eller angir strengen som beskriver banen."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Strengen som beskriver banen."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Henter listen over parametere som brukes under banen refererer til indekserte parametere."
  remarks: "Egenskaper for en <xref:System.Windows.PropertyPath>vanligvis som opprettes ved konstruktørene.</xref:System.Windows.PropertyPath> For å angi PathParameters, den <xref:System.Windows.PropertyPath.%23ctor%2A>konstruktør er spesielt nyttig fordi den `pathParameters` konstruktøren argumentet er angitt som `params`, betyr at du ikke trenger å opprette eller en matrise for konstruksjon-dimensjonen.</xref:System.Windows.PropertyPath.%23ctor%2A> Du ganske enkelt å angi hvert medlem i matrisen som en ekstra parameter.       Hvis egenskapen Endelig som er målet er en <xref:System.Windows.Freezable>typen verdien kan klones.</xref:System.Windows.Freezable> Hvis du vil ha mer informasjon, se [dreiebøker oversikt over](~/add/includes/ajax-current-ext-md.md).       Faktiske evalueringen av egenskapen kjeden utføres av dreieboken animasjonen mekanismer. På den <xref:System.Windows.PropertyPath>tilgangsnivå, Ingen validering er utført for å kontrollere at trinnene i banen koble i det hele tatt.</xref:System.Windows.PropertyPath> For eksempel kan du lage en egenskapsbanen som har <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>som det første trinnet og <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>som det andre trinnet.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Men slik egenskapsbanen vil mislykkes hvis brukt som mål, fordi velgeren typen som bruker all <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>har ikke en <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>egenskapen.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Ugyldig egenskapsbaner mislykkes stille. Hvis du vil ha mer informasjon, se [dreiebøker oversikt over](../Topic/Storyboards%20Overview.md).       **XAML:** når du bruker en <xref:System.Windows.PropertyPath>som beskriver en egenskapsreferanse i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], som en attributtverdi, strengen som du angir først håndtert av en type konverteringsprogram (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Denne typen konverteringsprogram deretter behandler strengen og basert på syntaksen ringe en av de <xref:System.Windows.PropertyPath>konstruktøren signaturer.</xref:System.Windows.PropertyPath> Denne omadressering via type-konverteringsprogram behandler en attributtverdi er vanligvis hvordan du bruker <xref:System.Windows.PropertyPath>i [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], i stedet for deklarerer en <xref:System.Windows.PropertyPath>objekt-element og deretter bruker bestemte verdier attributter som <xref:System.Windows.PropertyPath.Path%2A>og PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Hvis du vil ha mer informasjon, se [PropertyPath XAML syntaksen](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## XAML teksten Bruk medlemmer av den <xref:System.Windows.PropertyPath>typen vanligvis ikke er angitt i en direkte [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntaks.</xref:System.Windows.PropertyPath> Se kommentarer."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "Parameterlisten."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
