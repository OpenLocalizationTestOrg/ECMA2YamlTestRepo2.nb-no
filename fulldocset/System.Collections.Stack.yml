### YamlMime:ManagedReference
items:
- uid: System.Collections.Stack
  id: Stack
  children:
  - System.Collections.Stack.#ctor
  - System.Collections.Stack.#ctor(System.Collections.ICollection)
  - System.Collections.Stack.#ctor(System.Int32)
  - System.Collections.Stack.Clear
  - System.Collections.Stack.Clone
  - System.Collections.Stack.Contains(System.Object)
  - System.Collections.Stack.CopyTo(System.Array,System.Int32)
  - System.Collections.Stack.Count
  - System.Collections.Stack.GetEnumerator
  - System.Collections.Stack.IsSynchronized
  - System.Collections.Stack.Peek
  - System.Collections.Stack.Pop
  - System.Collections.Stack.Push(System.Object)
  - System.Collections.Stack.Synchronized(System.Collections.Stack)
  - System.Collections.Stack.SyncRoot
  - System.Collections.Stack.ToArray
  langs:
  - csharp
  name: Stack
  nameWithType: Stack
  fullName: System.Collections.Stack
  type: Class
  summary: "Representerer en enkel last inn første ut (LIFO)-generisk samling objekter."
  remarks: "Hvis du vil ha generell versjon i denne samlingen, kan du se <xref:System.Collections.Generic.Stack%601?displayProperty=fullName>.</xref:System.Collections.Generic.Stack%601?displayProperty=fullName>       Kapasiteten i en bunke er antallet elementer stakken kan inneholde. Som elementer er lagt til i en bunke, kapasiteten økes automatisk etter behov via ny tildeling.       Hvis <xref:System.Collections.Stack.Count%2A>er mindre enn kapasiteten i bunken, <xref:System.Collections.Stack.Push%2A>er en O(1)-operasjon.</xref:System.Collections.Stack.Push%2A> </xref:System.Collections.Stack.Count%2A> Hvis kapasiteten krever en økning for å gi plass til nye elementet <xref:System.Collections.Stack.Push%2A>blir en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A> </xref:System.Collections.Stack.Push%2A> <xref:System.Collections.Stack.Pop%2A>er en O(1)-operasjon.</xref:System.Collections.Stack.Pop%2A>       Stakk godtar `null` som en gyldig verdi og tillater dupliserte elementer."
  example:
  - "The following example shows how to create and add values to a Stack and how to display its values.  \n  \n [!code-cs[Classic Stack Example#1](~/add/codesnippet/csharp/t-system.collections.stack_1.cs)]\n [!code-vb[Classic Stack Example#1](~/add/codesnippet/visualbasic/t-system.collections.stack_1.vb)]\n [!code-cpp[Classic Stack Example#1](~/add/codesnippet/cpp/t-system.collections.stack_1.cpp)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Stack/StackDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Stack : ICloneable, System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Stack.#ctor
  id: '#ctor'
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Stack()
  nameWithType: Stack.Stack()
  fullName: System.Collections.Stack.Stack()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Stack&quot;> </xref> klasse som er tom og har standard første kapasitet."
  remarks: "Kapasiteten for en <xref:System.Collections.Stack>er antall elementer som i <xref:System.Collections.Stack>kan inneholde.</xref:System.Collections.Stack> </xref:System.Collections.Stack> Som elementer er lagt til i en <xref:System.Collections.Stack>, kapasiteten økes automatisk etter behov ved å tildele den interne matrisen på nytt.</xref:System.Collections.Stack>       Hvis størrelsen på samlingen kan beregnede, trenger ved å angi første kapasiteten utføre flere endring operasjoner ved å legge til elementer i <xref:System.Collections.Stack>.</xref:System.Collections.Stack>       Denne konstruktøren, er en O(1)-operasjon."
  syntax:
    content: public Stack ();
    parameters: []
  overload: System.Collections.Stack.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Stack(ICollection)
  nameWithType: Stack.Stack(ICollection)
  fullName: System.Collections.Stack.Stack(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Stack&quot;> </xref> klassen som inneholder elementer fra den angitte samlingen og har samme første kapasitet som antall elementer som er overført."
  remarks: "Kapasiteten for en <xref:System.Collections.Stack>er antall elementer som i <xref:System.Collections.Stack>kan inneholde.</xref:System.Collections.Stack> </xref:System.Collections.Stack> Som elementer er lagt til i en <xref:System.Collections.Stack>, kapasiteten økes automatisk etter behov ved å tildele den interne matrisen på nytt.</xref:System.Collections.Stack>       Hvis størrelsen på samlingen kan beregnede, trenger ved å angi første kapasiteten utføre flere endring operasjoner ved å legge til elementer i <xref:System.Collections.Stack>.</xref:System.Collections.Stack>       Elementene kopieres til den <xref:System.Collections.Stack>i samme rekkefølge som leses av den <xref:System.Collections.IEnumerator>for <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.Stack>       Denne konstruktøren, er en O (`n`) operasjonen, der `n` er antallet elementer i `col`."
  syntax:
    content: public Stack (System.Collections.ICollection col);
    parameters:
    - id: col
      type: System.Collections.ICollection
      description: "Den <xref:System.Collections.ICollection>å kopiere elementer fra.</xref:System.Collections.ICollection>"
  overload: System.Collections.Stack.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>col</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Stack.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Stack(Int32)
  nameWithType: Stack.Stack(Int32)
  fullName: System.Collections.Stack.Stack(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Collections.Stack&quot;> </xref> klassen som er tom og har den angitte opprinnelige kapasiteten eller standard første kapasiteten, avhengig av hva som er større."
  remarks: "Kapasiteten for en <xref:System.Collections.Stack>er antall elementer som i <xref:System.Collections.Stack>kan inneholde.</xref:System.Collections.Stack> </xref:System.Collections.Stack> Som elementer er lagt til i en <xref:System.Collections.Stack>, kapasiteten økes automatisk etter behov ved å tildele den interne matrisen på nytt.</xref:System.Collections.Stack>       Hvis størrelsen på samlingen kan beregnede, trenger ved å angi første kapasiteten utføre flere endring operasjoner ved å legge til elementer i <xref:System.Collections.Stack>.</xref:System.Collections.Stack>       Denne konstruktøren, er en O (`n`) operasjonen, der `n` er `initialCapacity`."
  syntax:
    content: public Stack (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "Startantallet med elementer som i <xref href=&quot;System.Collections.Stack&quot;> </xref> kan inneholde."
  overload: System.Collections.Stack.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>er mindre enn null."
  platform:
  - net462
- uid: System.Collections.Stack.Clear
  id: Clear
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Clear()
  nameWithType: Stack.Clear()
  fullName: System.Collections.Stack.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Fjerner alle objekter fra den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "<xref:System.Collections.Stack.Count%2A>er satt til null, og frigis også referanser til andre objekter fra elementene i samlingen.</xref:System.Collections.Stack.Count%2A>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Stack>.  \n  \n [!code-cpp[Classic Stack.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sta_5_1.cpp)]\n [!code-vb[Classic Stack.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_5_1.vb)]\n [!code-cs[Classic Stack.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sta_5_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Stack.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.Clone
  id: Clone
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Clone()
  nameWithType: Stack.Clone()
  fullName: System.Collections.Stack.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Oppretter en lite kopi av det <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "En lite kopi av en samling overfører bare elementer i samlingen, om de er referansetyper eller verdityper, men den ikke kopiere objektene som referansene refererer til. Referansene i den nye samlingen peke til de samme objektene referansene i den opprinnelige samlingen henviser til.       I motsetning overfører en dyp kopi av en samling elementene, og alt direkte eller indirekte referert til av elementene.       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En lite kopi av det <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  overload: System.Collections.Stack.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Stack.Contains(Object)
  fullName: System.Collections.Stack.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Bestemmer om et element i den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Denne metoden bestemmer likhet ved å kalle den <xref:System.Object.Equals%2A?displayProperty=fullName>metoden.</xref:System.Object.Equals%2A?displayProperty=fullName>       Denne metoden utfører en lineær søket. Denne metoden er derfor en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>       Starter med .NET Framework 2.0, denne metoden tester likhet ved å sende den `obj` argumentet til den <xref:System.Object.Equals%2A>metode for individuelle objekter i samlingen.</xref:System.Object.Equals%2A> I tidligere versjoner av .NET Framework forsøket ble opprettet ved hjelp av Kast individuelle elementer i samlingen av <xref:System.Object.Equals%2A>-metoden for den `obj` argument.</xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Objektet i den <xref href=&quot;System.Collections.Stack&quot;> </xref>. Verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, if <code>obj</code> is found in the <xref href=&quot;System.Collections.Stack&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Stack.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Stack
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Stack.CopyTo(Array,Int32)
  fullName: System.Collections.Stack.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopier de <xref href=&quot;System.Collections.Stack&quot;> </xref> på et eksisterende endimensjonal <xref:System.Array>, med Start fra angitte matriseindeksen.</xref:System.Array>"
  remarks: "Elementene kopieres til matrisen i siste i første feil (LIFO) rekkefølge, som er lik rekkefølgen for elementer som er returnert av en rekkefølge for kall til <xref:System.Collections.Stack.Pop%2A>.</xref:System.Collections.Stack.Pop%2A>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>"
  example:
  - "The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \n  \n [!code-cpp[Classic Stack.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sta_6_1.cpp)]\n [!code-vb[Classic Stack.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_6_1.vb)]\n [!code-cs[Classic Stack.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sta_6_1.cs)]"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Den endimensjonal <xref:System.Array>som er målet for elementene kopieres fra <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Array> Den <xref:System.Array>må ha nullbasert indeksering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Den nullbaserte indeksen i `array` som kopiering begynner."
  overload: System.Collections.Stack.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>er flerdimensjonal.       - eller - antallet elementer i kilden <xref href=&quot;System.Collections.Stack&quot;> </xref> er større enn den tilgjengelige plassen fra <code>index</code> til slutten av målet <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Hva slags kilden <xref href=&quot;System.Collections.Stack&quot;> </xref> kan ikke endres automatisk til av målet <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Stack.Count
  id: Count
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Count
  nameWithType: Stack.Count
  fullName: System.Collections.Stack.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter antallet elementer i den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Kapasitet er antall elementer som i <xref:System.Collections.Stack>kan lagre.</xref:System.Collections.Stack> Antallet er antall elementer som er egentlig i <xref:System.Collections.Stack>.</xref:System.Collections.Stack>       Kapasitet er alltid større enn eller lik antallet. Hvis antallet er større enn kapasiteten ved å legge til elementer, økes kapasiteten automatisk ved å tildele den interne matrisen på nytt før du kopierer de gamle elementene og legge til nye elementer.       Henting av verdien for denne egenskapen er en O(1)-operasjon."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Antallet elementer i den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  overload: System.Collections.Stack.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Stack
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Stack.GetEnumerator()
  fullName: System.Collections.Stack.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer en <xref:System.Collections.IEnumerator>for den <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic C#]       Den `foreach` -setningen for språket C# (`for each` i Visual Basic) skjuler av hvor komplekse enumeratorene.  Ved hjelp av derfor `foreach` anbefales, i stedet for direkte manipulering enumeratoren.       Enumeratorene kan brukes til å lese data i samlingen, men de kan ikke brukes til å endre den underliggende samlingen.       I utgangspunktet er enumeratoren plassert før det første elementet i samlingen. <xref:System.Collections.IEnumerator.Reset%2A>henter også enumeratoren tilbake til denne plasseringen.</xref:System.Collections.IEnumerator.Reset%2A>  På denne plasseringen <xref:System.Collections.IEnumerator.Current%2A>er udefinert.</xref:System.Collections.IEnumerator.Current%2A> Du må derfor kalle <xref:System.Collections.IEnumerator.MoveNext%2A>å flytte enumeratoren til det første elementet i samlingen før leser <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Returnerer det samme objektet før enten <xref:System.Collections.IEnumerator.MoveNext%2A>eller <xref:System.Collections.IEnumerator.Reset%2A>kalles.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>angir <xref:System.Collections.IEnumerator.Current%2A>til neste element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Hvis <xref:System.Collections.IEnumerator.MoveNext%2A>formidler slutten av samlingen enumeratoren er plassert etter det siste elementet i samlingen og <xref:System.Collections.IEnumerator.MoveNext%2A>returnerer `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Når enumeratoren er på denne plasseringen, etterfølgende kall til <xref:System.Collections.IEnumerator.MoveNext%2A>også returnere `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Hvis siste kall til <xref:System.Collections.IEnumerator.MoveNext%2A>returnerte `false`, <xref:System.Collections.IEnumerator.Current%2A>er udefinert.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Angi <xref:System.Collections.IEnumerator.Current%2A>til det første elementet i samlingen på nytt, kan du kalle <xref:System.Collections.IEnumerator.Reset%2A>etterfulgt av <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       En opplisting forblir gyldig så lenge samlingen forblir uendret. Hvis du endrer til samlingen, for eksempel å legge til, endre eller slette elementer, enumeratoren ugyldiggjøres, og virkemåten er ikke definert.       Enumeratoren har ikke eksklusiv tilgang til samlingen. lister opp i en samling er derfor gjelder ikke en sikker-prosedyre.  For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen.  Du må implementere din egen synkronisering for å tillate samlingen for å få tilgang til flere tråder for lesing og skriving.       Denne metoden er en O(1)-operasjon."
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Stack&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Stack.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Stack
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Stack.IsSynchronized
  fullName: System.Collections.Stack.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter en verdi som angir om tilgang til den <xref href=&quot;System.Collections.Stack&quot;> </xref> er synkronisert (tråden trygt)."
  remarks: "Du kan garantere at tråden av <xref:System.Collections.Stack>, alle operasjoner må utføres via wrapperen som er returnert av den <xref:System.Collections.Stack.Synchronized%2A>metoden.</xref:System.Collections.Stack.Synchronized%2A> </xref:System.Collections.Stack>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder.       Følgende kodeeksempel viser hvordan du låser i samlingen ved hjelp av den <xref:System.Collections.Stack.SyncRoot%2A>under hele opplistingen.</xref:System.Collections.Stack.SyncRoot%2A>       [!code-cpp[Klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/cpp/p-system.collections.sta_0_1.cpp)][!code-cs[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/csharp/p-system.collections.sta_0_1.cs)][!code-vb[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/visualbasic/p-system.collections.sta_0_1.vb) ] henting av verdien for denne egenskapen er en O(1)-operasjon.    "
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \n  \n [!code-vb[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sta_0_2.vb)]\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sta_0_2.cpp)]\n [!code-cs[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sta_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, hvis tilgang til den <xref href=&quot;System.Collections.Stack&quot;> </xref> er synkronisert (tråden trygt); ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Stack.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.Peek
  id: Peek
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Peek()
  nameWithType: Stack.Peek()
  fullName: System.Collections.Stack.Peek()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer objektet på toppen av den <xref href=&quot;System.Collections.Stack&quot;> </xref> uten å fjerne den."
  remarks: "Denne metoden er lik <xref:System.Collections.Stack.Pop%2A>metoden, men kikking endrer ikke <xref:System.Collections.Stack>.</xref:System.Collections.Stack> </xref:System.Collections.Stack.Pop%2A>       `null`kan flyttes til den <xref:System.Collections.Stack>som plassholder, hvis nødvendig.</xref:System.Collections.Stack> For å skille mellom en null-verdi og slutten av bunken, kan du se den <xref:System.Collections.Stack.Count%2A>egenskaps- eller catch den <xref:System.InvalidOperationException>, som er et når den <xref:System.Collections.Stack>er tom.</xref:System.Collections.Stack> </xref:System.InvalidOperationException> </xref:System.Collections.Stack.Count%2A>       Denne metoden er en O(1)-operasjon."
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \n  \n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_4_1.vb)]\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_4_1.cs)]\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_4_1.cpp)]"
  syntax:
    content: public virtual object Peek ();
    parameters: []
    return:
      type: System.Object
      description: "Den <xref:System.Object>på toppen av den <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.Stack.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Collections.Stack&quot;> </xref> er tom."
  platform:
  - net462
- uid: System.Collections.Stack.Pop
  id: Pop
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Pop()
  nameWithType: Stack.Pop()
  fullName: System.Collections.Stack.Pop()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Fjerner og returnerer objektet på toppen av den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Denne metoden er lik den <xref:System.Collections.Stack.Peek%2A>metoden, men <xref:System.Collections.Stack.Peek%2A>ikke endre <xref:System.Collections.Stack>.</xref:System.Collections.Stack> </xref:System.Collections.Stack.Peek%2A> </xref:System.Collections.Stack.Peek%2A>       `null`kan flyttes til den <xref:System.Collections.Stack>som plassholder, hvis nødvendig.</xref:System.Collections.Stack> For å skille mellom en null-verdi og slutten av bunken, kan du se den <xref:System.Collections.Stack.Count%2A>egenskaps- eller catch den <xref:System.InvalidOperationException>, som er et når den <xref:System.Collections.Stack>er tom.</xref:System.Collections.Stack> </xref:System.InvalidOperationException> </xref:System.Collections.Stack.Count%2A>       Denne metoden er en O(1)-operasjon."
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \n  \n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_2_1.vb)]\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_2_1.cs)]\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_2_1.cpp)]"
  syntax:
    content: public virtual object Pop ();
    parameters: []
    return:
      type: System.Object
      description: "Den <xref:System.Object>fjernet fra toppen av den <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.Stack.Pop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Den <xref href=&quot;System.Collections.Stack&quot;> </xref> er tom."
  platform:
  - net462
- uid: System.Collections.Stack.Push(System.Object)
  id: Push(System.Object)
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Push(Object)
  nameWithType: Stack.Push(Object)
  fullName: System.Collections.Stack.Push(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Setter inn et objekt på toppen av den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Hvis <xref:System.Collections.Stack.Count%2A>allerede er lik kapasitet, kapasiteten for den <xref:System.Collections.Stack>økes med automatisk tildele den interne matrisen på nytt og eksisterende elementene kopieres til den nye matrisen før det nye elementet er lagt til.</xref:System.Collections.Stack> </xref:System.Collections.Stack.Count%2A>       `null`kan flyttes til den <xref:System.Collections.Stack>som plassholder, hvis nødvendig.</xref:System.Collections.Stack> Det tar et spor i stakken og behandles som et objekt.       Hvis <xref:System.Collections.Stack.Count%2A>er mindre enn kapasitet i bunken Push operasjonen en O(1).</xref:System.Collections.Stack.Count%2A> Hvis kapasiteten krever en økning for å gi plass til nye elementet, Push blir en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Stack>, remove elements from the <xref:System.Collections.Stack>, or view the element at the top of the <xref:System.Collections.Stack>.  \n  \n [!code-vb[Classic Stack.Peek Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_1_1.vb)]\n [!code-cs[Classic Stack.Peek Example#1](~/add/codesnippet/csharp/m-system.collections.sta_1_1.cs)]\n [!code-cpp[Classic Stack.Peek Example#1](~/add/codesnippet/cpp/m-system.collections.sta_1_1.cpp)]"
  syntax:
    content: public virtual void Push (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Den <xref:System.Object>skyve på den <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Object> Verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Stack.Push*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)
  id: Synchronized(System.Collections.Stack)
  parent: System.Collections.Stack
  langs:
  - csharp
  name: Synchronized(Stack)
  nameWithType: Stack.Synchronized(Stack)
  fullName: System.Collections.Stack.Synchronized(Stack)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Returnerer et synkronisert (tråden trygt) wrapper for den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Du kan garantere at tråden av <xref:System.Collections.Stack>, alle operasjoner må utføres via denne wrapper.</xref:System.Collections.Stack>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder.       Følgende kodeeksempel viser hvordan du låser i samlingen ved hjelp av den <xref:System.Collections.Stack.SyncRoot%2A>under hele opplistingen.</xref:System.Collections.Stack.SyncRoot%2A>       [!code-cpp[Klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/cpp/m-system.collections.sta_3_1.cpp)][!code-cs[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/csharp/m-system.collections.sta_3_1.cs)][!code-vb[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/visualbasic/m-system.collections.sta_3_1.vb) ] denne metoden er en O(1)-operasjon.    "
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Stack>, determine if a <xref:System.Collections.Stack> is synchronized, and use a synchronized <xref:System.Collections.Stack>.  \n  \n [!code-vb[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_3_2.vb)]\n [!code-cpp[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sta_3_2.cpp)]\n [!code-cs[Classic Stack.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sta_3_2.cs)]"
  syntax:
    content: public static System.Collections.Stack Synchronized (System.Collections.Stack stack);
    parameters:
    - id: stack
      type: System.Collections.Stack
      description: "Den <xref href=&quot;System.Collections.Stack&quot;> </xref> skal synkroniseres."
    return:
      type: System.Collections.Stack
      description: "En synkroniserte tekstbryting rundt den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  overload: System.Collections.Stack.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stack</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Stack.SyncRoot
  id: SyncRoot
  parent: System.Collections.Stack
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Stack.SyncRoot
  fullName: System.Collections.Stack.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Henter et objekt som kan brukes til å synkronisere tilgang til den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  remarks: "Opprette en synkronisert versjon av den <xref:System.Collections.Stack>, bruker den <xref:System.Collections.Stack.Synchronized%2A>metoden.</xref:System.Collections.Stack.Synchronized%2A> </xref:System.Collections.Stack> Avledede klasser kan imidlertid gi sin egen synkroniserte versjon av den <xref:System.Collections.Stack>ved hjelp av SyncRoot-egenskapen.</xref:System.Collections.Stack> Synkronisering koden må utføre operasjoner på SyncRoot av den <xref:System.Collections.Stack>, ikke direkte på <xref:System.Collections.Stack>.</xref:System.Collections.Stack> </xref:System.Collections.Stack> Dette sikrer ordentlig med samlinger som er avledet fra andre objekter. Nærmere bestemt den opprettholder riktig synkronisering med andre tråder som kan være samtidig endring av <xref:System.Collections.Stack>objektet.</xref:System.Collections.Stack>       Lister opp i en samling vil si gjelder ikke sikker. Selv når en samling synkroniseres, kan andre tråder fortsatt endre samlingen, som fører til at enumeratoren til Iverksett et unntak. For å garantere tråd sikkerhetsnivået under opplisting, kan du låse samlingen under hele opplistingen eller opp unntak som er et resultat av endringer foretatt av andre tråder.       Følgende kodeeksempel viser hvordan du låse samlingen ved hjelp av SyncRoot under hele opplistingen.       [!code-cpp[Klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/cpp/p-system.collections.sta_1_1.cpp)][!code-cs[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/csharp/p-system.collections.sta_1_1.cs)][!code-vb[klassisk Stack.IsSynchronized eksempel&2;](~/add/codesnippet/visualbasic/p-system.collections.sta_1_1.vb) ] henting av verdien for denne egenskapen er en O(1)-operasjon.    "
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "En <xref:System.Object>som kan brukes til å synkronisere tilgang til den <xref href=&quot;System.Collections.Stack&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.Stack.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Stack.ToArray
  id: ToArray
  parent: System.Collections.Stack
  langs:
  - csharp
  name: ToArray()
  nameWithType: Stack.ToArray()
  fullName: System.Collections.Stack.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopier de <xref href=&quot;System.Collections.Stack&quot;> </xref> til en ny matrise."
  remarks: "Elementene kopieres til matrisen i siste i første feil (LIFO) rekkefølge, som er lik rekkefølgen for elementer som er returnert av en rekkefølge for kall til <xref:System.Collections.Stack.Pop%2A>.</xref:System.Collections.Stack.Pop%2A>       Denne metoden er en O (`n`) operasjonen, der `n` er <xref:System.Collections.Stack.Count%2A>.</xref:System.Collections.Stack.Count%2A>"
  example:
  - "The following example shows how to copy a <xref:System.Collections.Stack> into a one-dimensional array.  \n  \n [!code-cpp[Classic Stack.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sta_0_1.cpp)]\n [!code-vb[Classic Stack.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sta_0_1.vb)]\n [!code-cs[Classic Stack.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sta_0_1.cs)]"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "En ny matrise som inneholder kopier av elementene i den <xref href=&quot;System.Collections.Stack&quot;> </xref>."
  overload: System.Collections.Stack.ToArray*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.Stack.#ctor
  parent: System.Collections.Stack
  isExternal: false
  name: Stack()
  nameWithType: Stack.Stack()
  fullName: System.Collections.Stack.Stack()
- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)
  parent: System.Collections.Stack
  isExternal: false
  name: Stack(ICollection)
  nameWithType: Stack.Stack(ICollection)
  fullName: System.Collections.Stack.Stack(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Stack.#ctor(System.Int32)
  parent: System.Collections.Stack
  isExternal: false
  name: Stack(Int32)
  nameWithType: Stack.Stack(Int32)
  fullName: System.Collections.Stack.Stack(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Stack.Clear
  parent: System.Collections.Stack
  isExternal: false
  name: Clear()
  nameWithType: Stack.Clear()
  fullName: System.Collections.Stack.Clear()
- uid: System.Collections.Stack.Clone
  parent: System.Collections.Stack
  isExternal: false
  name: Clone()
  nameWithType: Stack.Clone()
  fullName: System.Collections.Stack.Clone()
- uid: System.Collections.Stack.Contains(System.Object)
  parent: System.Collections.Stack
  isExternal: false
  name: Contains(Object)
  nameWithType: Stack.Contains(Object)
  fullName: System.Collections.Stack.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Stack
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Stack.CopyTo(Array,Int32)
  fullName: System.Collections.Stack.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Stack.Count
  parent: System.Collections.Stack
  isExternal: false
  name: Count
  nameWithType: Stack.Count
  fullName: System.Collections.Stack.Count
- uid: System.Collections.Stack.GetEnumerator
  parent: System.Collections.Stack
  isExternal: false
  name: GetEnumerator()
  nameWithType: Stack.GetEnumerator()
  fullName: System.Collections.Stack.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Stack.IsSynchronized
  parent: System.Collections.Stack
  isExternal: false
  name: IsSynchronized
  nameWithType: Stack.IsSynchronized
  fullName: System.Collections.Stack.IsSynchronized
- uid: System.Collections.Stack.Peek
  parent: System.Collections.Stack
  isExternal: false
  name: Peek()
  nameWithType: Stack.Peek()
  fullName: System.Collections.Stack.Peek()
- uid: System.Collections.Stack.Pop
  parent: System.Collections.Stack
  isExternal: false
  name: Pop()
  nameWithType: Stack.Pop()
  fullName: System.Collections.Stack.Pop()
- uid: System.Collections.Stack.Push(System.Object)
  parent: System.Collections.Stack
  isExternal: false
  name: Push(Object)
  nameWithType: Stack.Push(Object)
  fullName: System.Collections.Stack.Push(Object)
- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)
  parent: System.Collections.Stack
  isExternal: false
  name: Synchronized(Stack)
  nameWithType: Stack.Synchronized(Stack)
  fullName: System.Collections.Stack.Synchronized(Stack)
- uid: System.Collections.Stack
  parent: System.Collections
  isExternal: false
  name: Stack
  nameWithType: Stack
  fullName: System.Collections.Stack
- uid: System.Collections.Stack.SyncRoot
  parent: System.Collections.Stack
  isExternal: false
  name: SyncRoot
  nameWithType: Stack.SyncRoot
  fullName: System.Collections.Stack.SyncRoot
- uid: System.Collections.Stack.ToArray
  parent: System.Collections.Stack
  isExternal: false
  name: ToArray()
  nameWithType: Stack.ToArray()
  fullName: System.Collections.Stack.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Stack.#ctor*
  parent: System.Collections.Stack
  isExternal: false
  name: Stack
  nameWithType: Stack.Stack
- uid: System.Collections.Stack.Clear*
  parent: System.Collections.Stack
  isExternal: false
  name: Clear
  nameWithType: Stack.Clear
- uid: System.Collections.Stack.Clone*
  parent: System.Collections.Stack
  isExternal: false
  name: Clone
  nameWithType: Stack.Clone
- uid: System.Collections.Stack.Contains*
  parent: System.Collections.Stack
  isExternal: false
  name: Contains
  nameWithType: Stack.Contains
- uid: System.Collections.Stack.CopyTo*
  parent: System.Collections.Stack
  isExternal: false
  name: CopyTo
  nameWithType: Stack.CopyTo
- uid: System.Collections.Stack.Count*
  parent: System.Collections.Stack
  isExternal: false
  name: Count
  nameWithType: Stack.Count
- uid: System.Collections.Stack.GetEnumerator*
  parent: System.Collections.Stack
  isExternal: false
  name: GetEnumerator
  nameWithType: Stack.GetEnumerator
- uid: System.Collections.Stack.IsSynchronized*
  parent: System.Collections.Stack
  isExternal: false
  name: IsSynchronized
  nameWithType: Stack.IsSynchronized
- uid: System.Collections.Stack.Peek*
  parent: System.Collections.Stack
  isExternal: false
  name: Peek
  nameWithType: Stack.Peek
- uid: System.Collections.Stack.Pop*
  parent: System.Collections.Stack
  isExternal: false
  name: Pop
  nameWithType: Stack.Pop
- uid: System.Collections.Stack.Push*
  parent: System.Collections.Stack
  isExternal: false
  name: Push
  nameWithType: Stack.Push
- uid: System.Collections.Stack.Synchronized*
  parent: System.Collections.Stack
  isExternal: false
  name: Synchronized
  nameWithType: Stack.Synchronized
- uid: System.Collections.Stack.SyncRoot*
  parent: System.Collections.Stack
  isExternal: false
  name: SyncRoot
  nameWithType: Stack.SyncRoot
- uid: System.Collections.Stack.ToArray*
  parent: System.Collections.Stack
  isExternal: false
  name: ToArray
  nameWithType: Stack.ToArray
