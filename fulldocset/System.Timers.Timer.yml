### YamlMime:ManagedReference
items:
- uid: System.Timers.Timer
  id: Timer
  children:
  - System.Timers.Timer.#ctor
  - System.Timers.Timer.#ctor(System.Double)
  - System.Timers.Timer.AutoReset
  - System.Timers.Timer.BeginInit
  - System.Timers.Timer.Close
  - System.Timers.Timer.Dispose(System.Boolean)
  - System.Timers.Timer.Elapsed
  - System.Timers.Timer.Enabled
  - System.Timers.Timer.EndInit
  - System.Timers.Timer.Interval
  - System.Timers.Timer.Site
  - System.Timers.Timer.Start
  - System.Timers.Timer.Stop
  - System.Timers.Timer.SynchronizingObject
  langs:
  - csharp
  name: Timer
  nameWithType: Timer
  fullName: System.Timers.Timer
  type: Class
  summary: "Genererer en hendelse etter et angitt intervall, med mulighet for å generere regelmessige hendelser.       For å bla gjennom .NET Framework-kildekode for denne typen, kan du se den [Referansekilde](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)."
  remarks: "> [!NOTE]> For å vise .NET Framework-kildekode for denne typen, kan du se den [Referansekilde](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). Du kan bla gjennom kildekode online Last ned referansen i frakoblet modus og gå gjennom datakilder (inkludert oppdateringer) under feilsøking; Se [instruksjonene](http://referencesource.microsoft.com/).       Tidtaker-komponenten er en serverbasert tidtaker som forårsaker en <xref:System.Timers.Timer.Elapsed>hendelse i programmets etter antall millisekunder i den <xref:System.Timers.Timer.Interval%2A>egenskapen er utløpt.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Du kan konfigurere tidtaker-objekt for å heve hendelsen bare én eller flere ganger ved hjelp av den <xref:System.Timers.Timer.AutoReset%2A>egenskapen.</xref:System.Timers.Timer.AutoReset%2A> En tidtaker-objektet er vanligvis deklarert på klassen nivå slik at det fortsatt være i området så lenge det er nødvendig. Deretter kan du behandle den <xref:System.Timers.Timer.Elapsed>-hendelsen for å gi vanlige behandling.</xref:System.Timers.Timer.Elapsed> For eksempel anta at du har en kritisk server må holdes kjører 24 timer døgnet, 7 dager i uken. Du kan opprette en tjeneste som bruker en tidtaker-objektet til å regelmessig Kontroller serveren, og kontroller at systemet er aktivt. Hvis systemet ikke svarer, kan tjenesten forsøke å starte serveren eller varsle administrator.      > [!IMPORTANT] > For tidtakeren klassen er tilgjengelig i .NET Framework bare. Det er ikke inkludert i .NET bibliotek og er ikke tilgjengelig på andre plattformer, for eksempel .NET kjerner eller Universal Windows Platform. På disse plattformene samt like mobil på tvers av alle .NET-plattformer, bør du bruke den <xref:System.Threading.Timer?displayProperty=fullName>klasse i stedet.</xref:System.Threading.Timer?displayProperty=fullName>       Denne typen implementerer den <xref:System.IDisposable>grensesnittet.</xref:System.IDisposable> Når du er ferdig ved hjelp av typen, må du fjerne den direkte eller indirekte. Hvis du vil fjerne av typen direkte, kan du kalle den <xref:System.IDisposable.Dispose%2A>metoden i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Hvis du vil fjerne den indirekte, bruke et språk som `using` (i C#) eller `Using` (i Visual Basic). For mer informasjon, se &quot;Ved hjelp av et objekt som implementerer IDisposable&quot; i den <xref:System.IDisposable>grensesnittet emnet.</xref:System.IDisposable>       Klassen serverbasert tidtakerjobben er utviklet for bruk med arbeidstråder i et flertrådsmiljø. Server-tidtakerne kan flytte blant tråder til å håndtere den hevet <xref:System.Timers.Timer.Elapsed>hendelse, noe som førte til flere nøyaktigheten enn Windows-tidtakerne i å heve hendelsen i tide.</xref:System.Timers.Timer.Elapsed>       Komponenten tidtakeren opphøyer den <xref:System.Timers.Timer.Elapsed>hendelse, basert på verdien (i millisekunder) for den <xref:System.Timers.Timer.Interval%2A>egenskapen.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Du kan håndtere denne hendelsen til å utføre behandling må. For eksempel anta at du har en online-salgsdata programmet som legger kontinuerlig salgsdata rekkefølger til en database. Tjenesten som kompilerer instruksjonene for levering brukes på en bunke med rekkefølger i stedet for behandling hver ordre enkeltvis. Du kan bruke en tidtaker for å starte gruppebehandling 30 minutter.      > [!IMPORTANT] > For System.Timers.Timer klassen har samme oppløsning som systemklokken. Dette betyr at den <xref:System.Timers.Timer.Elapsed>hendelsen vil gjelde med en intervallet som er definert av løsing av systemklokken hvis den <xref:System.Timers.Timer.Interval%2A>egenskapen er mindre enn løsing av systemklokken.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> Hvis du vil ha mer informasjon, se den <xref:System.Timers.Timer.Interval%2A>egenskapen.</xref:System.Timers.Timer.Interval%2A>       Når <xref:System.Timers.Timer.AutoReset%2A>er satt til `false`, en tidtaker objektet opphøyer den <xref:System.Timers.Timer.Elapsed>hendelsen bare én gang, første <xref:System.Timers.Timer.Interval%2A>er utløpt.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.AutoReset%2A> For å fortsette å heve den <xref:System.Timers.Timer.Elapsed>hendelsen regelmessig med intervallet som er definert av den <xref:System.Timers.Timer.Interval%2A>, angitt <xref:System.Timers.Timer.AutoReset%2A>til `true`, som er standardverdien.</xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed>       Komponenten tidtakeren fanger inn og skjuler alle unntak fra hendelsesbehandling for den <xref:System.Timers.Timer.Elapsed>hendelsen.</xref:System.Timers.Timer.Elapsed> Dette er underlagt endring i fremtidige versjoner av .NET Framework. Vær oppmerksom på at dette ikke er true hendelsesbehandling som kjøre asynkront og inkluderer den `await` operator (i C#) eller `Await` operator (i Visual Basic). Unntak i disse hendelsesbehandling er overført til kall tråden som følgende eksempel illustrerer. Hvis du vil ha mer informasjon om unntak i asynkron metoder, se [unntak behandler](~/add/includes/ajax-current-ext-md.md).       [!code-cs[System.Timers.Timer#3](~/add/codesnippet/csharp/t-system.timers.timer_1.cs)][!code-vb[System.Timers.Timer#3](~/add/codesnippet/visualbasic/t-system.timers.timer_1.vb) ] hvis den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskapen `null`, <xref:System.Timers.Timer.Elapsed>denne hendelsen oppstår ved en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.SynchronizingObject%2A>   Hvis behandling av den <xref:System.Timers.Timer.Elapsed>hendelsen varer mer enn <xref:System.Timers.Timer.Interval%2A>, hendelsen kan oppstå på nytt på en annen <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Elapsed> I dette tilfellet skal hendelsesbehandlingen innkommende.      > [!NOTE] > Hendelseshåndtering metoden kan kjøre på en tråd samtidig som en annen tråd kaller den <xref:System.Timers.Timer.Stop%2A>metoden eller angir den <xref:System.Timers.Timer.Enabled%2A>egenskapen `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> Dette kan føre til den <xref:System.Timers.Timer.Elapsed>hendelse som starter etter tidtakeren er stoppet.</xref:System.Timers.Timer.Elapsed> Eksempelkode for den <xref:System.Timers.Timer.Stop%2A>metoden viser en måte å unngå problemet løp.</xref:System.Timers.Timer.Stop%2A>       Selv om <xref:System.Timers.Timer.SynchronizingObject%2A>er ikke `null`, <xref:System.Timers.Timer.Elapsed>hendelser kan skje etter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>har blitt kalt eller etter den <xref:System.Timers.Timer.Enabled%2A>egenskapen er satt til `false`fordi signalet opphøye den <xref:System.Timers.Timer.Elapsed>hendelsen alltid i kø for kjøring på en tråd applikasjonsutvalget tråd.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.SynchronizingObject%2A> Én måte å løse problemet løp som angir et flagg som forteller hendelsesbehandlingen for den <xref:System.Timers.Timer.Elapsed>-hendelsen for å ignorere etterfølgende hendelser.</xref:System.Timers.Timer.Elapsed>       Hvis du bruker tidtakeren klassen med et element i brukergrensesnittet, for eksempel et skjema eller kontroll, uten å plassere tidtakeren for at element i brukergrensesnittet, tilordne skjemaet eller kontrollen som inneholder tidtakeren til den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskapen slik at hendelsen er formidles til brukeren grensesnittet tråden.</xref:System.Timers.Timer.SynchronizingObject%2A>       En liste over standard egenskapsverdier for en forekomst av Timer, kan du se den <xref:System.Timers.Timer.%23ctor%2A>konstruktør.</xref:System.Timers.Timer.%23ctor%2A>      > [!TIP] > Vær oppmerksom på at .NET Framework klassen biblioteket inneholder fire klasser med navnet `Timer`, hver av som tilbyr forskjellige funksjoner: >>-tidtaker (dette emnet): starter en hendelse med regelmessige intervaller. Klassen er ment for bruk som en serverbasert eller komponenten i et flertrådsmiljø; Det har ingen brukergrensesnitt og ikke vises under kjøring.   >- <xref:System.Threading.Timer?displayProperty=fullName>: utfører en enkelt tilbakeringing-metode på en tråd applikasjonsutvalget tråd med regelmessige intervaller.</xref:System.Threading.Timer?displayProperty=fullName> Metoden tilbakeringing er definert når tidtakeren startes og kan ikke endres. Som klassen tidtakeren er denne klassen ment for bruk som en serverbasert eller komponenten i et flertrådsmiljø; Det har ingen brukergrensesnitt og ikke vises under kjøring.   >- <xref:System.Windows.Forms.Timer?displayProperty=fullName>: en Windows Forms-komponent som starter en hendelse med regelmessige intervaller.</xref:System.Windows.Forms.Timer?displayProperty=fullName> Komponenten har ingen brukergrensesnittet og er utviklet for bruk i et miljø med enkelttrådet.   >- <xref:System.Web.UI.Timer?displayProperty=fullName>: en ASP.NET-komponenten som utfører asynkron eller synkron websiden tilbakesendinger på en vanlig intervall.</xref:System.Web.UI.Timer?displayProperty=fullName>"
  example:
  - "The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cs[System.Timers.Timer#2](~/add/codesnippet/csharp/t-system.timers.timer_2.cs)]\n [!code-vb[System.Timers.Timer#2](~/add/codesnippet/visualbasic/t-system.timers.timer_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Elapsed")]

      [System.ComponentModel.DefaultProperty("Interval")]

      public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Timers.Timer.#ctor
  id: '#ctor'
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Timers.Timer.Timer()
  type: Constructor
  assemblies:
  - System
  namespace: System.Timers
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Timers.Timer&quot;> </xref> klasse, og angir alle egenskapene til de opprinnelige verdiene."
  remarks: "Tabellen nedenfor viser første egenskapsverdier for en forekomst av <xref:System.Timers.Timer>.</xref:System.Timers.Timer>      | Egenskapen | Standardverdi |   |--------------|-------------------|   | <xref:System.Timers.Timer.AutoReset%2A>| `true`|   | <xref:System.Timers.Timer.Enabled%2A>| `false`|   | <xref:System.Timers.Timer.Interval%2A>|&100; millisekunder |   | <xref:System.Timers.Timer.SynchronizingObject%2A>| En nullreferanse (`Nothing` i Visual Basic). |</xref:System.Timers.Timer.SynchronizingObject%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.AutoReset%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/m-system.timers.timer.sh_1_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/m-system.timers.timer.sh_1_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/m-system.timers.timer.sh_1_1.vb)]"
  syntax:
    content: public Timer ();
    parameters: []
  overload: System.Timers.Timer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Timer(Double)
  nameWithType: Timer.Timer(Double)
  fullName: System.Timers.Timer.Timer(Double)
  type: Constructor
  assemblies:
  - System
  namespace: System.Timers
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Timers.Timer&quot;> </xref> klassen og angir de <xref:System.Timers.Timer.Interval*>egenskapen til det angitte antallet millisekunder.</xref:System.Timers.Timer.Interval*>"
  remarks: "Denne konstruktøren angir den <xref:System.Timers.Timer.Interval%2A>for den nye tidtaker-forekomsten, men aktiveres ikke tidtakeren.</xref:System.Timers.Timer.Interval%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cs[System.Timers.Timer#3](~/add/codesnippet/csharp/m-system.timers.timer.sh_0_1.cs)]\n [!code-vb[System.Timers.Timer#3](~/add/codesnippet/visualbasic/m-system.timers.timer.sh_0_1.vb)]"
  syntax:
    content: public Timer (double interval);
    parameters:
    - id: interval
      type: System.Double
      description: "Tid i millisekunder mellom hendelser. Verdien må være større enn null og mindre enn eller lik &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  overload: System.Timers.Timer.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Verdien for den <code> interval </code> parameteren er mindre enn eller lik null, eller større enn &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Timers.Timer.AutoReset
  id: AutoReset
  parent: System.Timers.Timer
  langs:
  - csharp
  name: AutoReset
  nameWithType: Timer.AutoReset
  fullName: System.Timers.Timer.AutoReset
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Henter eller angir en boolsk som angir om den <xref href=&quot;System.Timers.Timer&quot;> </xref> kan øke den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen bare én gang (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>) eller flere ganger (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>)."
  remarks: "Hvis den <xref:System.Timers.Timer>er allerede aktivert når den <xref:System.Timers.Timer.Start%2A>-metoden, intervallet tilbakestilles.</xref:System.Timers.Timer.Start%2A> </xref:System.Timers.Timer> Hvis AutoReset `false`, <xref:System.Timers.Timer.Start%2A>metoden må kalles for å starte antallet på nytt.</xref:System.Timers.Timer.Start%2A>       Tilbakestille intervallet påvirker når den <xref:System.Timers.Timer.Elapsed>denne hendelsen oppstår.</xref:System.Timers.Timer.Elapsed> Hvis du angir intervallet for 5 sekunder, og deretter angir du for eksempel den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`, antallet starter da <xref:System.Timers.Timer.Enabled%2A>er angitt.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Hvis du tilbakestiller intervallet til 10 sekunder når antallet er 3 sekunder det <xref:System.Timers.Timer.Elapsed>hendelsen starter for første gang 13 sekunder etter den <xref:System.Timers.Timer.Enabled%2A>-egenskap er satt til `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed>"
  example:
  - "The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds. Its event handler then displays \"Hello World!\" on the console.  \n  \n [!code-vb[Classic Timer.Timer1 Example#1](~/add/codesnippet/visualbasic/p-system.timers.timer.au_1.vb)]\n [!code-cs[Classic Timer.Timer1 Example#1](~/add/codesnippet/csharp/p-system.timers.timer.au_1.cs)]\n [!code-cpp[Classic Timer.Timer1 Example#1](~/add/codesnippet/cpp/p-system.timers.timer.au_1.cpp)]"
  syntax:
    content: public bool AutoReset { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Timers.Timer&quot;> </xref> kan øke den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen hver gang intervallet går; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> hvis den skal opphøyes i <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen bare én gang, intervallet utløper etter første gang. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.AutoReset*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.BeginInit
  id: BeginInit
  parent: System.Timers.Timer
  langs:
  - csharp
  name: BeginInit()
  nameWithType: Timer.BeginInit()
  fullName: System.Timers.Timer.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Starter kjøretid initialisering av en <xref href=&quot;System.Timers.Timer&quot;> </xref> som brukes i et skjema eller av en annen komponent."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] utformingen miljøet bruker denne metoden for å starte initialisering av en komponent som brukes i et skjema eller av en annen komponent. Den <xref:System.Timers.Timer.EndInit%2A>metoden slutter initialiseringen.</xref:System.Timers.Timer.EndInit%2A> Ved hjelp av BeginInit og <xref:System.Timers.Timer.EndInit%2A>metoder hindrer at kontrollen brukes før den er fullstendig initialisert.</xref:System.Timers.Timer.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Timers.Timer.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Close
  id: Close
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Close()
  nameWithType: Timer.Close()
  fullName: System.Timers.Timer.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Frigir ressursene som brukes av den <xref href=&quot;System.Timers.Timer&quot;> </xref>."
  remarks: "Metoden Close kaller den `Dispose` metoden."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Timers.Timer.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Timers.Timer.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Frigir alle ressursene som brukes av gjeldende <xref href=&quot;System.Timers.Timer&quot;> </xref>."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Timers.Timer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Elapsed
  id: Elapsed
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: System.Timers.Timer.Elapsed
  type: Event
  assemblies:
  - System
  namespace: System.Timers
  summary: "Forekommer når intervallet utløper."
  remarks: "Brukt denne hendelsen oppstår hvis den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true` og tidsintervallet (i millisekunder) som er definert av den <xref:System.Timers.Timer.Interval%2A>egenskapen går.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Enabled%2A> Hvis den <xref:System.Timers.Timer.AutoReset%2A>egenskapen `true`, hendelsen oppstår flere ganger i intervaller som er definert av den <xref:System.Timers.Timer.Interval%2A>egenskap; ellers hendelsen oppstår bare én gang ved første gang de <xref:System.Timers.Timer.Interval%2A>verdi går.</xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.Interval%2A> </xref:System.Timers.Timer.AutoReset%2A>       Hvis <xref:System.Timers.Timer.Interval%2A>er angitt etter den <xref:System.Timers.Timer>har startet, tilbakestilles antallet.</xref:System.Timers.Timer> </xref:System.Timers.Timer.Interval%2A> Hvis du angir intervallet for 5 sekunder, og deretter angir du for eksempel <xref:System.Timers.Timer.Enabled%2A>til `true`, antallet starter da <xref:System.Timers.Timer.Enabled%2A>er angitt.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Hvis du tilbakestiller intervallet til 10 sekunder når antall er 3 sekunder, brukt hendelsen starter for første gang 13 sekunder etter <xref:System.Timers.Timer.Enabled%2A>skulle `true`.</xref:System.Timers.Timer.Enabled%2A>       Hvis den <xref:System.Timers.Timer.SynchronizingObject%2A>egenskapen `null`, brukt denne hendelsen oppstår ved en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.SynchronizingObject%2A> Hvis behandling av hendelsen brukt varer lenger enn <xref:System.Timers.Timer.Interval%2A>, hendelsen kan oppstå på nytt på en annen <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Interval%2A> I dette tilfellet skal hendelsesbehandlingen innkommende.      > [!NOTE] > Hendelseshåndtering metoden kan kjøre på en tråd samtidig som en annen tråd kaller den <xref:System.Timers.Timer.Stop%2A>metoden eller angir den <xref:System.Timers.Timer.Enabled%2A>egenskapen `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> Dette kan føre til at hendelsen brukt som starter etter tidtakeren er stoppet. Eksempelkode for den <xref:System.Timers.Timer.Stop%2A>metoden viser en måte å unngå problemet løp.</xref:System.Timers.Timer.Stop%2A>       Selv om <xref:System.Timers.Timer.SynchronizingObject%2A>er ikke `null`, brukt hendelser kan skje etter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>har blitt kalt eller etter den <xref:System.Timers.Timer.Enabled%2A>egenskapen er satt til `false`fordi signalet opphøye hendelsen brukt alltid i kø for kjøring på en tråd applikasjonsutvalget tråd.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.SynchronizingObject%2A> Én måte å løse problemet løp er å angi et flagg som forteller hendelsesbehandlingen for hendelsen brukt til å ignorere etterfølgende hendelser.       Den <xref:System.Timers.Timer>komponent fanger inn og skjuler alle unntak fra hendelsesbehandling for hendelsen brukt.</xref:System.Timers.Timer> Dette er underlagt endring i fremtidige versjoner av .NET Framework."
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its Elapsed event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/e-system.timers.timer.el_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/e-system.timers.timer.el_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/e-system.timers.timer.el_1.vb)]"
  syntax:
    content: public event System.Timers.ElapsedEventHandler Elapsed;
    return:
      type: System.Timers.ElapsedEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Enabled
  id: Enabled
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Timers.Timer.Enabled
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Henter eller angir en verdi som angir om den <xref href=&quot;System.Timers.Timer&quot;> </xref> kan øke den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen."
  remarks: "Sette Enabled til `true` er den samme som kaller <xref:System.Timers.Timer.Start%2A>under innstillingen aktivert til `false` er den samme som kaller <xref:System.Timers.Timer.Stop%2A>.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Start%2A>      > [!NOTE] > Signalet opphøye den <xref:System.Timers.Timer.Elapsed>hendelsen er alltid i kø for kjøring i en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> Dette kan føre til den <xref:System.Timers.Timer.Elapsed>hendelsen som som opprettes når egenskapen Enabled er satt til `false`.</xref:System.Timers.Timer.Elapsed> Kodeeksempel for den <xref:System.Timers.Timer.Stop%2A>metoden viser én måte å omgå problemet løp.</xref:System.Timers.Timer.Stop%2A>       Hvis aktivert er satt til `true` og <xref:System.Timers.Timer.AutoReset%2A>er satt til `false`, <xref:System.Timers.Timer>opphøyer den <xref:System.Timers.Timer.Elapsed>hendelsen bare én gang, første gang intervallet utløper.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A>       Hvis intervallet som er angitt etter den <xref:System.Timers.Timer>har startet, tilbakestilles antallet.</xref:System.Timers.Timer> Hvis du setter intervallet til 5 sekunder, og angi egenskapen Enabled for eksempel `true`, antallet starter da aktivert er angitt. Hvis du tilbakestiller intervallet til 10 sekunder når antall er 3 sekunder det <xref:System.Timers.Timer.Elapsed>hendelsen starter for første gang 13 sekunder etter at aktivert skulle `true`.</xref:System.Timers.Timer.Elapsed>      > [!NOTE] > Noen visuelle verktøy, for eksempel de som finnes i Microsoft Visual Studio, angi egenskapen Enabled `true` når du setter inn en ny <xref:System.Timers.Timer>.</xref:System.Timers.Timer>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.timer.en_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.timer.en_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.timer.en_1.vb)]"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den <xref href=&quot;System.Timers.Timer&quot;> </xref> kan øke den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.Enabled*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne egenskapen kan ikke angis fordi tidtakeren har blitt fjernet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <xref:System.Timers.Timer.Interval*>-egenskap er satt til en verdi større enn &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; før tidtakeren ble aktivert.</xref:System.Timers.Timer.Interval*>"
  platform:
  - net462
- uid: System.Timers.Timer.EndInit
  id: EndInit
  parent: System.Timers.Timer
  langs:
  - csharp
  name: EndInit()
  nameWithType: Timer.EndInit()
  fullName: System.Timers.Timer.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Slutter kjøretid initialisering av en <xref href=&quot;System.Timers.Timer&quot;> </xref> som brukes i et skjema eller av en annen komponent."
  remarks: "Den [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] utformingen miljøet bruker denne metoden avsluttes initialisering av en komponent som brukes i et skjema eller av en annen komponent. Den <xref:System.Timers.Timer.BeginInit%2A>metoden starter initialiseringen.</xref:System.Timers.Timer.BeginInit%2A> Ved hjelp av den <xref:System.Timers.Timer.BeginInit%2A>og EndInit metoder hindrer at kontrollen brukes før den er fullstendig initialisert.</xref:System.Timers.Timer.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Timers.Timer.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Interval
  id: Interval
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Timers.Timer.Interval
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Henter eller angir intervallet, angitt i millisekunder som opphøye den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen."
  remarks: "Du bruke egenskapen intervall for å finne hyppigheten som den <xref:System.Timers.Timer.Elapsed>hendelsen startes.</xref:System.Timers.Timer.Elapsed> Fordi den <xref:System.Timers.Timer>klassen som er avhengig av systemklokke, den har samme oppløsning som systemklokken.</xref:System.Timers.Timer> Dette betyr at den <xref:System.Timers.Timer.Elapsed>hendelsen vil gjelde med en intervallet som er definert av løsing av systemklokken Hvis egenskapen intervall er under løsing av systemklokken.</xref:System.Timers.Timer.Elapsed> Følgende eksempel angir intervallet-egenskapen til 5 millisekunder. Når du kjører en [!INCLUDE[win7](~/add/includes/win7-md.md)] systemet der systemklokke har en oppløsning på omtrent 15 millisekunder hendelsen starter ca. hver 15 millisekunder i stedet for hver 5 millisekunder.       [!code-cs[System.Timers.Timer.Interval#1](~/add/codesnippet/csharp/p-system.timers.timer.in_1.cs)][!code-vb[System.Timers.Timer.Interval#1](~/add/codesnippet/visualbasic/p-system.timers.timer.in_1.vb) ] du kan bruke følgende kode til å fastsette løsing av systemklokke i gjeldende system: [!code-cs [System.Timers.Timer.Interval#2](~/add/codesnippet/csharp/p-system.timers.timer.in_2.cs)][!code-vb[System.Timers.Timer.Interval#2](~/add/codesnippet/visualbasic/p-system.timers.timer.in_2.vb) ] Hvis appen krever større oppløsning enn som tilbys av den <xref:System.Timers.Timer>klasse eller systemklokke bruk med høy oppløsning multimedia tidtakerne, se [slik: Bruk med høy oppløsning tidtakeren](http://msdn.microsoft.com/library/aa964692.aspx).</xref:System.Timers.Timer>           Hvis intervallet som er angitt etter den <xref:System.Timers.Timer>har startet, tilbakestilles antallet.</xref:System.Timers.Timer> Hvis du angir intervallet for 5 sekunder, og deretter angir du for eksempel den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`, antallet starter da <xref:System.Timers.Timer.Enabled%2A>er angitt.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A> Hvis du tilbakestiller intervallet til 10 sekunder når antall er 3 sekunder det <xref:System.Timers.Timer.Elapsed>hendelsen starter for første gang 13 sekunder etter <xref:System.Timers.Timer.Enabled%2A>skulle `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed>       Hvis <xref:System.Timers.Timer.Enabled%2A>er satt til `true` og <xref:System.Timers.Timer.AutoReset%2A>er satt til `false`, <xref:System.Timers.Timer>opphøyer den <xref:System.Timers.Timer.Elapsed>hendelsen bare én gang, første gang intervallet utløper.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Enabled%2A> <xref:System.Timers.Timer.Enabled%2A>deretter er satt til `false`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Hvis <xref:System.Timers.Timer.Enabled%2A>og <xref:System.Timers.Timer.AutoReset%2A>er satt til `false`, og tidtakeren tidligere er aktivert, innstillingen intervall egenskapen årsaker i <xref:System.Timers.Timer.Elapsed>-hendelse når, som om det <xref:System.Timers.Timer.Enabled%2A>egenskapen var angitt `true`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.AutoReset%2A> </xref:System.Timers.Timer.Enabled%2A> Du kan angi intervallet uten å heve hendelsen, kan du midlertidig sette den <xref:System.Timers.Timer.Enabled%2A>egenskapen `true`egenskapen intervall til ønsket tidsintervall og deretter umiddelbart klargjøre den <xref:System.Timers.Timer.Enabled%2A>tilbake til `false`.</xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Enabled%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.timer.in_3.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.timer.in_3.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.timer.in_3.vb)]"
  syntax:
    content: public double Interval { get; set; }
    return:
      type: System.Double
      description: "Ønsket tid i millisekunder mellom <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelser. Verdien må være større enn null og mindre enn eller lik &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;. Standarden er 100 millisekunder."
  overload: System.Timers.Timer.Interval*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Intervallet som er mindre enn eller lik null.       - eller - intervallet som er større enn &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;, og tidtakeren er aktivert. (Hvis tidtakeren ikke er aktivert, noen unntak før den blir aktivert.)"
  platform:
  - net462
- uid: System.Timers.Timer.Site
  id: Site
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Site
  nameWithType: Timer.Site
  fullName: System.Timers.Timer.Site
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Henter eller angir området som binder den <xref href=&quot;System.Timers.Timer&quot;> </xref> til beholderen i utformingsmodus."
  remarks: "Områder binde en <xref:System.ComponentModel.Component>til en <xref:System.ComponentModel.Container>og aktivere kommunikasjon mellom dem, i tillegg gir en metode for beholderen til å administrere komponentene.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "En <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> grensesnitt som representerer området som binder den <xref href=&quot;System.Timers.Timer&quot;> </xref> -objekt til beholderen."
  overload: System.Timers.Timer.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.Start
  id: Start
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Timers.Timer.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Starter opprettet av <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen ved å angi <xref:System.Timers.Timer.Enabled*>til <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Timers.Timer.Enabled*>"
  remarks: "Hvis Start kalles og <xref:System.Timers.Timer.AutoReset%2A>er satt til `false`, <xref:System.Timers.Timer>opphøyer den <xref:System.Timers.Timer.Elapsed>hendelsen bare én gang, første gang intervallet utløper.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A> Hvis Start kalles og <xref:System.Timers.Timer.AutoReset%2A>er `true`, <xref:System.Timers.Timer>opphøyer den <xref:System.Timers.Timer.Elapsed>hendelsen første gang intervallet går og fortsetter å heve hendelsen på det angitte intervallet.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer> </xref:System.Timers.Timer.AutoReset%2A>       Du kan også starte tidsberegning ved å angi <xref:System.Timers.Timer.Enabled%2A>til `true`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Hvis <xref:System.Timers.Timer.AutoReset%2A>er `false`, Start-metoden må kalles for å starte antallet på nytt.</xref:System.Timers.Timer.AutoReset%2A>       Et kall til metoden Start når tidtakeren er aktivert, har ingen virkning."
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Timers.Timer.Start*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den <xref href=&quot;System.Timers.Timer&quot;> </xref> er opprettet med et intervall større enn eller lik &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt; + 1 eller satt til en intervallet som er mindre enn null."
  platform:
  - net462
- uid: System.Timers.Timer.Stop
  id: Stop
  parent: System.Timers.Timer
  langs:
  - csharp
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Timers.Timer.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Timers
  summary: "Stopper å heve den <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> hendelsen ved å angi <xref:System.Timers.Timer.Enabled*>til <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Timers.Timer.Enabled*>"
  remarks: "Du kan også stoppe tidsberegning ved å angi <xref:System.Timers.Timer.Enabled%2A>til `false`.</xref:System.Timers.Timer.Enabled%2A>      > [!NOTE] > Signalet opphøye den <xref:System.Timers.Timer.Elapsed>hendelsen er alltid i kø for kjøring i en <xref:System.Threading.ThreadPool>tråd slik hendelseshåndtering metoden kan kjøre på en tråd samtidig som et kall til Stop-metoden kjører på en annen tråd.</xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed> Dette kan føre til den <xref:System.Timers.Timer.Elapsed>hendelse som starter etter Stop-metoden blir kalt.</xref:System.Timers.Timer.Elapsed> Kodeeksempel i delen nedenfor viser én måte å omgå problemet løp."
  example:
  - "The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised. When the user presses the Enter key, the application calls the  Stop method before terminating the application.  \n  \n [!code-cs[System.Timers.Timer#2](~/add/codesnippet/csharp/m-system.timers.timer.stop_1.cs)]\n [!code-vb[System.Timers.Timer#2](~/add/codesnippet/visualbasic/m-system.timers.timer.stop_1.vb)]  \n  \n The following code example shows one way to prevent the thread that calls the Stop method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).  \n  \n The example executes 100 test runs. Each time the test is run, the timer is started with an interval of 150 milliseconds. The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to simulate a task that randomly varies in length from 50 to 200 milliseconds. The test method also starts a control thread that waits for a second and then stops the timer. If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.  \n  \n The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends. The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero. This is an atomic operation. If the return value is zero, the control variable has been set to 1 and the event handler proceeds. If the return value is non-zero, the event is simply discarded to avoid reentrancy. (If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero. The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the Stop method was called.  \n  \n The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero. If the atomic operation returns non-zero, an event is currently executing. The control thread waits and tries again. The example records the number of times the control thread had to wait for an event to finish.  \n  \n [!code-cs[Timer.Stop#1](~/add/codesnippet/csharp/m-system.timers.timer.stop_2.cs)]\n [!code-vb[Timer.Stop#1](~/add/codesnippet/visualbasic/m-system.timers.timer.stop_2.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Timers.Timer.Stop*
  exceptions: []
  platform:
  - net462
- uid: System.Timers.Timer.SynchronizingObject
  id: SynchronizingObject
  parent: System.Timers.Timer
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
  fullName: System.Timers.Timer.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Henter eller angir objektet som ble brukt til å formidle hendelsesbehandlingen anrop som er utstedt når et intervall er utløpt."
  remarks: "Når SynchronizingObject er `null`, metoden som behandler den <xref:System.Timers.Timer.Elapsed>hendelsen kalles på en tråd fra systemet thread pool.</xref:System.Timers.Timer.Elapsed> Hvis du vil ha mer informasjon om system-tråd applikasjonsutvalg, kan du se <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Når den <xref:System.Timers.Timer.Elapsed>hendelsen behandles av en visual Windows Forms-komponent, for eksempel en knapp tilgang til komponenten via system-trådutvalget kan resultatet i et unntak eller bare vil kanskje ikke fungere.</xref:System.Timers.Timer.Elapsed> Unngå denne effekten ved å angi SynchronizingObject til en Windows Forms-komponent som fører til at metoden som behandler den <xref:System.Timers.Timer.Elapsed>hendelsen skal kalles på den samme tråden komponenten ble opprettet på.</xref:System.Timers.Timer.Elapsed>      > [!NOTE] > Selv om egenskapen SynchronizingObject ikke `null`, <xref:System.Timers.Timer.Elapsed>hendelser kan skje etter den <xref:System.Timers.Timer.Dispose%2A>eller <xref:System.Timers.Timer.Stop%2A>har blitt kalt eller etter den <xref:System.Timers.Timer.Enabled%2A>egenskapen er satt til `false`fordi signalet opphøye den <xref:System.Timers.Timer.Elapsed>hendelsen alltid i kø for kjøring på en tråd applikasjonsutvalget tråd.</xref:System.Timers.Timer.Elapsed> </xref:System.Timers.Timer.Enabled%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Dispose%2A> </xref:System.Timers.Timer.Elapsed> Én måte å løse problemet løp som angir et flagg som forteller hendelsesbehandlingen for den <xref:System.Timers.Timer.Elapsed>-hendelsen for å ignorere etterfølgende hendelser.</xref:System.Timers.Timer.Elapsed>       Hvis den <xref:System.Timers.Timer>er brukt i Visual Studio i Windows Forms-utforming, SynchronizingObject automatisk settes til kontrollen som inneholder <xref:System.Timers.Timer>.</xref:System.Timers.Timer> </xref:System.Timers.Timer> Hvis du setter for eksempel en <xref:System.Timers.Timer>på en utformer for `Form1` (som arver fra <xref:System.Windows.Forms.Form>), SynchronizingObject-egenskapen for <xref:System.Timers.Timer>er satt til forekomsten av `Form1`.</xref:System.Timers.Timer> </xref:System.Windows.Forms.Form> </xref:System.Timers.Timer>"
  example:
  - "The following example is a Windows Forms app that serves as a very simple text file editor. When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.  To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the SynchronizingObject property is set to the <xref:System.Windows.Forms.Form> object.  \n  \n [!code-cs[System.Timers.Timer.SynchronizingObject#1](~/add/codesnippet/csharp/SynchronizingObjectCS1/Form1.cs#1)]\n [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/add/codesnippet/visualbasic/SynchronizingObjectVB1/Form1.vb#1)]  \n  \n The example requires that you add the following controls to the form:  \n  \n-   A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).  \n  \n-   A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).  \n  \n-   A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) ."
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "Den <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> som representerer objektet som ble brukt til å formidle hendelsesbehandlingen kall som er utstedt når et intervall er utløpt. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Timers.Timer.SynchronizingObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Timers.Timer.#ctor
  parent: System.Timers.Timer
  isExternal: false
  name: Timer()
  nameWithType: Timer.Timer()
  fullName: System.Timers.Timer.Timer()
- uid: System.Timers.Timer.#ctor(System.Double)
  parent: System.Timers.Timer
  isExternal: false
  name: Timer(Double)
  nameWithType: Timer.Timer(Double)
  fullName: System.Timers.Timer.Timer(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Timers.Timer.AutoReset
  parent: System.Timers.Timer
  isExternal: false
  name: AutoReset
  nameWithType: Timer.AutoReset
  fullName: System.Timers.Timer.AutoReset
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Timers.Timer.BeginInit
  parent: System.Timers.Timer
  isExternal: false
  name: BeginInit()
  nameWithType: Timer.BeginInit()
  fullName: System.Timers.Timer.BeginInit()
- uid: System.Timers.Timer.Close
  parent: System.Timers.Timer
  isExternal: false
  name: Close()
  nameWithType: Timer.Close()
  fullName: System.Timers.Timer.Close()
- uid: System.Timers.Timer.Dispose(System.Boolean)
  parent: System.Timers.Timer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Timer.Dispose(Boolean)
  fullName: System.Timers.Timer.Dispose(Boolean)
- uid: System.Timers.Timer.Elapsed
  parent: System.Timers.Timer
  isExternal: false
  name: Elapsed
  nameWithType: Timer.Elapsed
  fullName: System.Timers.Timer.Elapsed
- uid: System.Timers.ElapsedEventHandler
  parent: System.Timers
  isExternal: false
  name: ElapsedEventHandler
  nameWithType: ElapsedEventHandler
  fullName: System.Timers.ElapsedEventHandler
- uid: System.Timers.Timer.Enabled
  parent: System.Timers.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
  fullName: System.Timers.Timer.Enabled
- uid: System.Timers.Timer.EndInit
  parent: System.Timers.Timer
  isExternal: false
  name: EndInit()
  nameWithType: Timer.EndInit()
  fullName: System.Timers.Timer.EndInit()
- uid: System.Timers.Timer.Interval
  parent: System.Timers.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
  fullName: System.Timers.Timer.Interval
- uid: System.Timers.Timer.Site
  parent: System.Timers.Timer
  isExternal: false
  name: Site
  nameWithType: Timer.Site
  fullName: System.Timers.Timer.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Timers.Timer.Start
  parent: System.Timers.Timer
  isExternal: false
  name: Start()
  nameWithType: Timer.Start()
  fullName: System.Timers.Timer.Start()
- uid: System.Timers.Timer.Stop
  parent: System.Timers.Timer
  isExternal: false
  name: Stop()
  nameWithType: Timer.Stop()
  fullName: System.Timers.Timer.Stop()
- uid: System.Timers.Timer.SynchronizingObject
  parent: System.Timers.Timer
  isExternal: false
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
  fullName: System.Timers.Timer.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Timers.Timer.#ctor*
  parent: System.Timers.Timer
  isExternal: false
  name: Timer
  nameWithType: Timer.Timer
- uid: System.Timers.Timer.AutoReset*
  parent: System.Timers.Timer
  isExternal: false
  name: AutoReset
  nameWithType: Timer.AutoReset
- uid: System.Timers.Timer.BeginInit*
  parent: System.Timers.Timer
  isExternal: false
  name: BeginInit
  nameWithType: Timer.BeginInit
- uid: System.Timers.Timer.Close*
  parent: System.Timers.Timer
  isExternal: false
  name: Close
  nameWithType: Timer.Close
- uid: System.Timers.Timer.Dispose*
  parent: System.Timers.Timer
  isExternal: false
  name: Dispose
  nameWithType: Timer.Dispose
- uid: System.Timers.Timer.Enabled*
  parent: System.Timers.Timer
  isExternal: false
  name: Enabled
  nameWithType: Timer.Enabled
- uid: System.Timers.Timer.EndInit*
  parent: System.Timers.Timer
  isExternal: false
  name: EndInit
  nameWithType: Timer.EndInit
- uid: System.Timers.Timer.Interval*
  parent: System.Timers.Timer
  isExternal: false
  name: Interval
  nameWithType: Timer.Interval
- uid: System.Timers.Timer.Site*
  parent: System.Timers.Timer
  isExternal: false
  name: Site
  nameWithType: Timer.Site
- uid: System.Timers.Timer.Start*
  parent: System.Timers.Timer
  isExternal: false
  name: Start
  nameWithType: Timer.Start
- uid: System.Timers.Timer.Stop*
  parent: System.Timers.Timer
  isExternal: false
  name: Stop
  nameWithType: Timer.Stop
- uid: System.Timers.Timer.SynchronizingObject*
  parent: System.Timers.Timer
  isExternal: false
  name: SynchronizingObject
  nameWithType: Timer.SynchronizingObject
