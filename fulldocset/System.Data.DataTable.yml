### YamlMime:ManagedReference
items:
- uid: System.Data.DataTable
  id: DataTable
  children:
  - System.Data.DataTable.#ctor
  - System.Data.DataTable.#ctor(System.String)
  - System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.#ctor(System.String,System.String)
  - System.Data.DataTable.AcceptChanges
  - System.Data.DataTable.BeginInit
  - System.Data.DataTable.BeginLoadData
  - System.Data.DataTable.CaseSensitive
  - System.Data.DataTable.ChildRelations
  - System.Data.DataTable.Clear
  - System.Data.DataTable.Clone
  - System.Data.DataTable.ColumnChanged
  - System.Data.DataTable.ColumnChanging
  - System.Data.DataTable.Columns
  - System.Data.DataTable.Compute(System.String,System.String)
  - System.Data.DataTable.Constraints
  - System.Data.DataTable.Copy
  - System.Data.DataTable.CreateDataReader
  - System.Data.DataTable.CreateInstance
  - System.Data.DataTable.DataSet
  - System.Data.DataTable.DefaultView
  - System.Data.DataTable.DisplayExpression
  - System.Data.DataTable.EndInit
  - System.Data.DataTable.EndLoadData
  - System.Data.DataTable.ExtendedProperties
  - System.Data.DataTable.fInitInProgress
  - System.Data.DataTable.GetChanges
  - System.Data.DataTable.GetChanges(System.Data.DataRowState)
  - System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataTable.GetErrors
  - System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.GetRowType
  - System.Data.DataTable.GetSchema
  - System.Data.DataTable.HasErrors
  - System.Data.DataTable.ImportRow(System.Data.DataRow)
  - System.Data.DataTable.Initialized
  - System.Data.DataTable.IsInitialized
  - System.Data.DataTable.Load(System.Data.IDataReader)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  - System.Data.DataTable.Locale
  - System.Data.DataTable.Merge(System.Data.DataTable)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataTable.MinimumCapacity
  - System.Data.DataTable.Namespace
  - System.Data.DataTable.NewRow
  - System.Data.DataTable.NewRowArray(System.Int32)
  - System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  - System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  - System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  - System.Data.DataTable.ParentRelations
  - System.Data.DataTable.Prefix
  - System.Data.DataTable.PrimaryKey
  - System.Data.DataTable.ReadXml(System.IO.Stream)
  - System.Data.DataTable.ReadXml(System.IO.TextReader)
  - System.Data.DataTable.ReadXml(System.String)
  - System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataTable.ReadXmlSchema(System.String)
  - System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataTable.RejectChanges
  - System.Data.DataTable.RemotingFormat
  - System.Data.DataTable.Reset
  - System.Data.DataTable.RowChanged
  - System.Data.DataTable.RowChanging
  - System.Data.DataTable.RowDeleted
  - System.Data.DataTable.RowDeleting
  - System.Data.DataTable.Rows
  - System.Data.DataTable.Select
  - System.Data.DataTable.Select(System.String)
  - System.Data.DataTable.Select(System.String,System.String)
  - System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  - System.Data.DataTable.Site
  - System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataTable.System#ComponentModel#IListSource#GetList
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.TableCleared
  - System.Data.DataTable.TableClearing
  - System.Data.DataTable.TableName
  - System.Data.DataTable.TableNewRow
  - System.Data.DataTable.ToString
  - System.Data.DataTable.WriteXml(System.IO.Stream)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter)
  - System.Data.DataTable.WriteXml(System.String)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.String,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataTable.WriteXmlSchema(System.String)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  langs:
  - csharp
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
  type: Class
  summary: "Representerer en tabell med data i minnet."
  remarks: "DataTable er en sentral objekt i ADO.NET-biblioteket. Andre objekter som bruker DataTable inkluderer <xref:System.Data.DataSet>og <xref:System.Data.DataView>.</xref:System.Data.DataView> </xref:System.Data.DataSet>       Legg merke til at de er betinget bokstaver under tilgang til DataTable objekter. For eksempel hvis én DataTable kalles &quot;mydatatable&quot; og en annen er &quot;Mydatatable&quot;, en streng som brukes til å søke etter én av tabellene, anses som bokstaver. Men hvis finnes &quot;mydatatable&quot; og &quot;Mydatatable&quot; ikke anses søkestrengen som bokstaver. En <xref:System.Data.DataSet>kan inneholde to DataTable-objekter som har samme <xref:System.Data.DataTable.TableName%2A>egenskapsverdien men forskjellige <xref:System.Data.DataTable.Namespace%2A>egenskapsverdier.</xref:System.Data.DataTable.Namespace%2A> </xref:System.Data.DataTable.TableName%2A> </xref:System.Data.DataSet> Hvis du vil ha mer informasjon om hvordan du arbeider med DataTable-objekter, se [oppretter en DataTable](~/add/includes/ajax-current-ext-md.md).       Hvis du oppretter en DataTable programmatisk, må du først definere tilhørende skjema ved å legge til <xref:System.Data.DataColumn>objekter til den <xref:System.Data.DataColumnCollection>(tilgjengelig via den <xref:System.Data.DataTable.Columns%2A>egenskapen).</xref:System.Data.DataTable.Columns%2A> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn> For mer informasjon om å legge til <xref:System.Data.DataColumn>objekter, se [å legge til kolonner til en DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn>       Hvis du vil legge til rader i DataTable, må du først bruke den <xref:System.Data.DataTable.NewRow%2A>metode til å returnere en ny <xref:System.Data.DataRow>objektet.</xref:System.Data.DataRow> </xref:System.Data.DataTable.NewRow%2A> <xref:System.Data.DataTable.NewRow%2A>Metoden returnerer en rad med skjemaet til DataTable, slik den er definert av tabellens <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> </xref:System.Data.DataTable.NewRow%2A> Maksimalt antall rader som DataTable kan lagre er 16,777,216. Hvis du vil ha mer informasjon, se [tillegging av Data til en DataTable](~/add/includes/ajax-current-ext-md.md).       DataTable også inneholder en samling av <xref:System.Data.Constraint>objekter som kan brukes til å sikre integriteten til dataene.</xref:System.Data.Constraint> Hvis du vil ha mer informasjon, se [DataTable begrensninger](~/add/includes/ajax-current-ext-md.md).       Det finnes mange DataTable hendelser som kan brukes til å bestemme når det gjøres endringer i en tabell. Disse omfatter <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>, og <xref:System.Data.DataTable.RowDeleted>.</xref:System.Data.DataTable.RowDeleted> </xref:System.Data.DataTable.RowDeleting> </xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.RowChanged> Du finner mer informasjon om hendelser som kan brukes med en DataTable [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md).       Når det opprettes en forekomst av DataTable, settes enkelte egenskaper som lese-og skrivetilgang til opprinnelige verdier. En liste over disse verdiene i den <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>konstruktøren emnet.</xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>      > [!NOTE] > I <xref:System.Data.DataSet>og DataTable objekter arver fra <xref:System.ComponentModel.MarshalByValueComponent>, og støtte av <xref:System.Runtime.Serialization.ISerializable>grensesnitt for .NET Framework ekstern kommunikasjon.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataSet> Dette er de bare ADO.NET-objektene som du kan bruke for .NET Framework ekstern kommunikasjon."
  example:
  - "The following example creates two DataTable objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>. The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable Example#1](~/add/codesnippet/visualbasic/t-system.data.datatable_1.vb)]\n [!code-cs[Classic WebData DataTable Example#1](~/add/codesnippet/csharp/t-system.data.datatable_1.cs)]  \n  \n This sample demonstrates how to create a DataTable manually with specific schema definitions:  \n  \n-   Create multiple DataTables and define the initial columns.  \n  \n-   Create the table constraints.  \n  \n-   Insert the values and display the tables.  \n  \n-   Create the expression columns and display the tables.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).  \n  \n [!code-cs[Classic WebData DataTable Example2#1](~/add/codesnippet/csharp/t-system.data.datatable_2.cs)]\n [!code-vb[Classic WebData DataTable Example2#1](~/add/codesnippet/visualbasic/t-system.data.datatable_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowChanging")]

      [System.ComponentModel.DefaultProperty("TableName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")]

      public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  platform:
  - net462
- uid: System.Data.DataTable.#ctor
  id: '#ctor'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.DataTable&quot;> </xref> klasse uten noen argumenter."
  remarks: "Konstruktøren angir opprinnelige verdier for alle egenskaper for det <xref:System.Data.DataTable>objektet.</xref:System.Data.DataTable> Tabellen nedenfor viser egenskapene og standardverdiene. Når en forekomst av <xref:System.Data.DataTable>er opprettet, følgende lese-og skrivetilgang er angitt til opprinnelige verdier.</xref:System.Data.DataTable>      | Egenskapen | Standardverdien |   |--------------|-------------------|   | **Små/store bokstaver**| Samme som overordnet <xref:System.Data.DataSet>, hvis den tilhører en.</xref:System.Data.DataSet> Ellers `false`. |   | **DisplayExpression**| Tom streng (&quot;&quot;) |   | **Locale**| Samme som overordnet <xref:System.Data.DataSet>objektets <xref:System.Globalization.CultureInfo>(returneres av egenskapen <xref:System.Data.DataSet.Locale%2A>); Hvis det finnes en overordnet, standard er det gjeldende systemet <xref:System.Globalization.CultureInfo>. |   | **MinimumCapacity**|&50; rader. |       Du kan endre verdien for disse egenskapene via en egen kall til egenskapen.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale%2A> </xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._0_1.vb)]\n [!code-cs[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/csharp/m-system.data.datatable._0_1.cs)]"
  syntax:
    content: public DataTable ();
    parameters: []
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.DataTable&quot;> </xref> klassen med det angitte tabellnavnet."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-cs[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._21_1.cs)]\n [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._21_1.vb)]"
  syntax:
    content: public DataTable (string tableName);
    parameters:
    - id: tableName
      type: System.String
      description: "Navnet som skal gi tabellen. Hvis `tableName` er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom streng standardnavnet er angitt når legges til i <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.DataTable&quot;> </xref> klasse med den <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> og <xref:System.Runtime.Serialization.StreamingContext>.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Denne implementeringen av <xref:System.Data.DataTable>konstruktøren kreves for <xref:System.Runtime.Serialization.ISerializable>.</xref:System.Runtime.Serialization.ISerializable> </xref:System.Data.DataTable>"
  syntax:
    content: protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Data som kreves for å serialisere eller deserialisering av et objekt."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Kilde og mål for en gitt serialisert dataflyt."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Data.DataTable&quot;> </xref> klasse ved hjelp av den angitte tabellnavn og navneområde."
  syntax:
    content: public DataTable (string tableName, string tableNamespace);
    parameters:
    - id: tableName
      type: System.String
      description: "Navnet som skal gi tabellen. Hvis `tableName` er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom streng standardnavnet er angitt når legges til i <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
    - id: tableNamespace
      type: System.String
      description: "Navneområdet for XML-representasjon av data som er lagret i den <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver alle endringene i denne tabellen siden forrige gang AcceptChanges ble kalt."
  remarks: "Når AcceptChanges kalles, noen <xref:System.Data.DataRow>objektet fremdeles i redigeringsmodus slutter ble redigeringene.</xref:System.Data.DataRow> Den <xref:System.Data.DataRowState>endres også: alle `Added` og `Modified` radene blir `Unchanged`, og `Deleted` rader er fjernet.</xref:System.Data.DataRowState>       Metoden AcceptChanges kalles vanligvis på en <xref:System.Data.DataTable>Når du prøver å oppdatere den <xref:System.Data.DataSet>ved hjelp av den <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName>metoden.</xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example tests each table for errors. If the table's errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.  \n  \n [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._22_1.vb)]\n [!code-cs[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._22_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataTable.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginInit
  id: BeginInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Starter initialisering av en <xref href=&quot;System.Data.DataTable&quot;> </xref> som er brukt i et skjema eller brukes av en annen komponent. Initialiseringen oppstår under kjøring."
  remarks: "Utformingsmiljøet i Visual Studio .NET bruker denne metoden til å starte initialisering av en komponent som er brukt i et skjema eller brukes av en annen komponent. Den <xref:System.Data.DataTable.EndInit%2A>metoden slutter initialiseringen.</xref:System.Data.DataTable.EndInit%2A> Ved hjelp av BeginInit og <xref:System.Data.DataTable.EndInit%2A>metoder hindrer at kontrollen brukes før den er fullstendig initialisert.</xref:System.Data.DataTable.EndInit%2A>"
  syntax:
    content: public virtual void BeginInit ();
    parameters: []
  overload: System.Data.DataTable.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginLoadData
  id: BeginLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deaktiverer varslinger, indeksen Vedlikehold og begrensningene under innlasting av data."
  remarks: "Bruk BeginLoadData sammen med <xref:System.Data.DataTable.LoadDataRow%2A>og <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void BeginLoadData ();
    parameters: []
  overload: System.Data.DataTable.BeginLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Angir om det skilles strengsammenligninger i tabellen."
  remarks: "Egenskapen små/store bokstaver påvirker strengsammenligninger i sortering, søking og filtrering."
  example:
  - "The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>. The first time, the CaseSensitive property is set to `false`, the second, to `true`.  \n  \n [!code-cs[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/csharp/p-system.data.datatable._0_1.cs)]\n [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._0_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis sammenligningen er resultater. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard er satt til overordnet <xref href=&quot;System.Data.DataSet&quot;> </xref> objektets <xref:System.Data.DataSet.CaseSensitive*>egenskapen eller <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> hvis den <xref href=&quot;System.Data.DataTable&quot;> </xref> ble opprettet uavhengig av en <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.CaseSensitive*>"
  overload: System.Data.DataTable.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ChildRelations
  id: ChildRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av underordnede relasjoner for dette <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: 'En <xref:System.Data.DataRelation>definerer relasjonen mellom to tabeller.</xref:System.Data.DataRelation> Vanligvis er to tabellene koblet til et enkelt felt som inneholder de samme dataene. En tabell som inneholder data for postadressen kan for eksempel ha ett enkelt felt som inneholder koder som representerer land. En annen tabell som inneholder data som land/region har ett felt som inneholder koden som identifiserer land/område, og den er denne koden som settes inn i det tilsvarende feltet i den første tabellen. En <xref:System.Data.DataRelation>, står minst fire informasjonselementer: (1) navnet på den første tabellen, (2) kolonnenavn i den første tabellen, (3) navnet på den andre tabellen og (4) kolonnenavnet i den andre tabellen.</xref:System.Data.DataRelation>'
  example:
  - "The following example uses the ChildRelations property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._13_1.vb)]\n [!code-cs[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._13_1.cs)]"
  syntax:
    content: public System.Data.DataRelationCollection ChildRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "En <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> som inneholder underordnede relasjoner for tabellen. En tom samling returneres hvis ingen <xref href=&quot;System.Data.DataRelation&quot;> </xref> objektene finnes."
  overload: System.Data.DataTable.ChildRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clear
  id: Clear
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tømmer den <xref href=&quot;System.Data.DataTable&quot;> </xref> alle data."
  remarks: "Alle rader i alle tabeller er fjernet. Hvis tabellen inneholder noen tvungne underordnede relasjoner som vil føre til at underordnede rader som skal være løsreven, genereres det et unntak.       Hvis den <xref:System.Data.DataSet>er bundet til en <xref:System.Xml.XmlDataDocument>kaller <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName>eller fjern opphøyer <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Du kan unngå denne situasjonen ved går over hver tabell, fjerner hver rad én om gangen. Når du bruker <xref:System.Data.DataTable.NewRow%2A>for å opprette nye rader, radene, må behandles før du kaller Fjern.</xref:System.Data.DataTable.NewRow%2A>"
  example:
  - "The following example clears the table of all data.  \n  \n [!code-cs[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datatable._20_1.cs)]\n [!code-vb[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._20_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataTable.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clone
  id: Clone
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kloner strukturen i den <xref href=&quot;System.Data.DataTable&quot;> </xref>, inkludert alle <xref href=&quot;System.Data.DataTable&quot;> </xref> skjemaer og -begrensninger."
  remarks: "Hvis disse klassene er avledet, blir også klone i de samme avledede klassene.       Klone oppretter en ny <xref:System.Data.DataTable>med samme struktur som opprinnelig <xref:System.Data.DataTable>, men ikke kopiere data (den nye <xref:System.Data.DataTable>inneholder ingen `DataRows`).</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Kopiere strukturen og data til en ny <xref:System.Data.DataTable>ved å bruke <xref:System.Data.DataTable.Copy%2A>.</xref:System.Data.DataTable.Copy%2A> </xref:System.Data.DataTable>"
  example:
  - "The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  \n  \n-   Update the changes of the columns in source table.  \n  \n-   Update the changes of the UniqueConstraint in source table.  \n  \n-   Update the changes of the ForeignKeyConstraint in source table.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).  \n  \n```  \nusing System;  \nusing System.Linq;  \nusing System.Data;  \nusing System.ComponentModel;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      DataTable courses = NewCourseDataTable();  \n      Console.WriteLine(\"This is the source table:\");  \n      WriteDataTable(courses);  \n  \n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \n      DataTable clonedCourses = clonedResult.DestinationTable;  \n      Console.WriteLine(\"This is the destination table:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the events of updating column collection into the source table.  \n      clonedResult.UpdateAddedColumn();  \n      clonedResult.UpdateDeletedColumn();  \n      // Add a DataColumn in source table.  \n      DataColumn columnCreidts = new DataColumn(\"Credits\", typeof(Int32));  \n      courses.Columns.Add(columnCreidts);  \n      Console.WriteLine(\"After add a column in source table, it's the result in the destination:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the event of updating UniqueConstraint into the source table.  \n      clonedResult.UpdateUniqueConstraint();  \n  \n      // Add the unique constraint in source table.  \n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[\"CourseId\"]);  \n      courses.Constraints.Add(uniqueConstraint);  \n  \n      Console.WriteLine(@\"If we add the unique constraint in source table and then insert the duplicate   \nrows into the destination table, we will get the following error:\");  \n      InsertDuplicateData(clonedCourses);  \n      Console.WriteLine();  \n  \n      // Add the event of updating ForeignKeyConstraint into the source table.  \n      clonedResult.UpdateForeignKeyConstraint();  \n  \n      // Add the ForeignKeyConstraint into the source table.  \n      DataTable deparments = NewDeparmentDataTable();  \n      DataSet dataset = new DataSet();  \n  \n      dataset.Tables.Add(courses);  \n      dataset.Tables.Add(clonedCourses);  \n      dataset.Tables.Add(deparments);  \n  \n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[\"DepartmentId\"], courses.Columns[\"DepartmentId\"]);  \n      courses.Constraints.Add(foreignKey);  \n  \n      Console.WriteLine(@\"If we add the foreign key constraint in source table and then insert a row   \nwithout the parent  into the destination table, we will get the following error:\");  \n      InsertNoParentRow(clonedCourses);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static private DataTable NewCourseDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"CourseId\", typeof(String)),  \n                                      new DataColumn(\"CourseName\",typeof(String)),                                        \n                                      new DataColumn(\"DepartmentId\", typeof(Int32))  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      newTable.Rows.Add(\"C1061\", \"Physics\", 1);  \n      newTable.Rows.Add(\"C2021\", \"Composition\", 2);  \n      newTable.Rows.Add(\"C2042\", \"Literature\", 2);  \n  \n      return newTable;  \n   }  \n  \n   static private DataTable NewDeparmentDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"DepartmentId\", typeof(Int32)),  \n                                      new DataColumn(\"Name\",typeof(String)),  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(1, \"Engineering\");  \n      newTable.Rows.Add(2, \"English\");  \n      newTable.Rows.Add(4, \"Economics\");  \n      newTable.Rows.Add(7, \"Mathematics\");  \n  \n      return newTable;  \n   }  \n  \n   static private void WriteDataTable(DataTable table) {  \n      if (table == null)  \n         return;  \n  \n      foreach (DataColumn column in table.Columns) {  \n         Console.Write(\"{0,-15}\", column.ColumnName);  \n      }  \n      Console.WriteLine();  \n  \n      foreach (DataRow row in table.Rows) {  \n         for (int i = 0; i < table.Columns.Count; i++)  \n            Console.Write(\"{0,-15}\", row[i].ToString());  \n         Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n   }  \n  \n   static private void InsertDuplicateData(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n  \n   private static void InsertNoParentRow(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1061\", \"Physics\", 11);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n}  \n  \npublic class ClonedDataTable {  \n   private DataTable sourceTable;  \n   private DataTable destinationTable;  \n  \n   public ClonedDataTable(DataTable source) {  \n      sourceTable = source;  \n      // set the cloned result  \n      destinationTable = sourceTable.Clone();  \n   }  \n  \n   public void UpdateAddedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \n   }  \n  \n   public void UpdateDeletedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \n   }  \n  \n   public void UpdateUniqueConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \n   }  \n  \n   public void UpdateForeignKeyConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \n   }  \n  \n   // After the source table adds a column, the method will add the same column in the destination table.  \n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null) {  \n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \n  \n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \n               destinationTable.Columns.Add(newColumn);  \n         }  \n      }  \n   }  \n  \n   // After the source table deletes a column, the method will delete the same column in the destination table.  \n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Remove) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null)  \n            if (destinationTable.Columns.Contains(column.ColumnName))  \n               destinationTable.Columns.Remove(column.ColumnName);  \n      }  \n   }  \n  \n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \n  \n         // Get the columns used in new constraint from the destiantion table.  \n         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // After the source table changes the ForeignKeyConstraint, this method changes    \n   // the same ForeignKeyConstraint in the destination table.  \n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  \n      if (sourceTable.DataSet != destinationTable.DataSet)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         DataColumn[] parentColumns = constraint.RelatedColumns;  \n  \n         // Get the columns used in new constraint from the destination table.  \n         for (int i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \n         newConstraint.DeleteRule = constraint.DeleteRule;  \n         newConstraint.UpdateRule = constraint.UpdateRule;  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // return the destination table.  \n   public DataTable DestinationTable {  \n      get { return destinationTable; }  \n   }  \n}  \n```  \n  \n This sample shows how to modify data in a DataTable and update the data source.  \n  \n First, create a database:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]   \n  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \n  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n```  \n  \n You can now compile and run the sample. [How to modify data in DataTable and update to the data source](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n  \n   string MySchoolConnectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True\";  \n  \n      // Get Data  \n      String selectString =  \n       @\"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] \";  \n  \n      DataSet dataSet = new DataSet();  \n      DataTable course = dataSet.Tables.Add(\"Course\");  \n      DataTable department = dataSet.Tables.Add(\"Department\");  \n  \n      Console.WriteLine(\"Get data from database:\");  \n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \n      Console.WriteLine();  \n  \n      // Use DataTable Edits to edit the data  \n      String updateString =  \n              @\"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;\";  \n  \n      course.ColumnChanged += OnColumnChanged;  \n  \n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \n      ChangeCredits(course, course.Rows[0], -1);  \n      ChangeCredits(course, course.Rows[1], 11);  \n  \n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"),  \n          new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\"));  \n      Console.WriteLine(\"Only the Credits of second row is changed.\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      // Delete and Remove from DataTable  \n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      String deleteString = @\"Delete From [dbo].[Course] Where [CourseID]=@CourseID;\";  \n  \n      department.Rows[0].Delete();  \n      Console.WriteLine(\"If One row in Department table is deleted, the related rows in Course table will also be deleted.\");  \n      Console.WriteLine(\"Department DataTable:\");  \n      ShowDataTable(department);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n      // Update the delete operation  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n      Console.WriteLine(\"After delete operation:\");  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      course.Rows.RemoveAt(0);  \n      Console.WriteLine(\"Now we remove one row from Course:\");  \n      ShowDataTable(course);  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n   }  \n  \n   // Use SqlDataAdapter to get data.  \n   private static void GetDataTables(String connectionString, String selectString,  \n       DataSet dataSet, params DataTable[] tables) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.SelectCommand = new SqlCommand(selectString);  \n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Fill(0, 0, tables);  \n  \n         foreach (DataTable table in dataSet.Tables) {  \n            Console.WriteLine(\"Data in {0}:\", table.TableName);  \n            ShowDataTable(table);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update the updata operation.  \n   private static void UpdateDataTables(String connectionString, String updateString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.UpdateCommand = new SqlCommand(updateString);  \n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update delete operation.  \n   private static void DeleteDataTables(String connectionString, String deleteString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.DeleteCommand = new SqlCommand(deleteString);  \n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use DataTable Edits to modify the data.  \n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \n      row.BeginEdit();  \n      Console.WriteLine(\"We change row {0}\", table.Rows.IndexOf(row));  \n      row[\"Credits\"] = credits;  \n      row.EndEdit();  \n   }  \n  \n   // The method will be invoked when the value in DataTable is changed.  \n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \n      Int32 credits = 0;  \n      // If Credits is changed and the value is negative, we'll cancel the edit.  \n      if ((args.Column.ColumnName == \"Credits\") &&  \n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  \n         Console.WriteLine(\"The value of Credits is invalid. Edit canceled.\");  \n         args.Row.CancelEdit();  \n      }  \n   }  \n  \n   // Display the column and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"RowState\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col]);  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", row.RowState);  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public virtual System.Data.DataTable Clone ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "En ny <xref href=&quot;System.Data.DataTable&quot;> </xref> med samme XML-skjemaet som gjeldende <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanged
  id: ColumnChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en verdi er endret for den angitte <xref href=&quot;System.Data.DataColumn&quot;> </xref> i en <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._4_1.vb)]
     [!code-cs[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._4_1.cs)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanged;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanging
  id: ColumnChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en verdi endres for den angitte <xref href=&quot;System.Data.DataColumn&quot;> </xref> i en <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._5_1.cs)]
     [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._5_1.vb)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanging;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Columns
  id: Columns
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av kolonner som tilhører denne tabellen."
  remarks: "Den <xref:System.Data.DataColumnCollection>bestemmer skjemaet for en tabell ved å definere datatypen for hver kolonne.</xref:System.Data.DataColumnCollection>"
  example:
  - "The following example prints each value of each row in a table using the Columns property.  \n  \n [!code-vb[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._12_1.vb)]\n [!code-cs[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/csharp/p-system.data.datatable._12_1.cs)]"
  syntax:
    content: public System.Data.DataColumnCollection Columns { get; }
    return:
      type: System.Data.DataColumnCollection
      description: "En <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> som inneholder samlingen av <xref href=&quot;System.Data.DataColumn&quot;> </xref> objekter for tabellen. En tom samling returneres hvis ingen <xref href=&quot;System.Data.DataColumn&quot;> </xref> objektene finnes."
  overload: System.Data.DataTable.Columns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Compute(System.String,System.String)
  id: Compute(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Beregner det angitte uttrykket for de gjeldende radene som sendes av filtervilkår."
  remarks: "Den `expression` parameteren krever en aggregatfunksjon. Følgende er et gyldig uttrykk for eksempel: `Count(Quantity)` , men dette uttrykket er ikke: `Sum (Quantity * UnitPrice)` Hvis du må utføre en operasjon på to eller flere kolonner, må du opprette en <xref:System.Data.DataColumn>, settes den <xref:System.Data.DataColumn.Expression%2A>egenskapen til en passende uttrykk og bruke et aggregatuttrykk på den resulterende kolonnen.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> I dette tilfellet gitt en <xref:System.Data.DataColumn>med navnet &quot;Sum&quot;, og <xref:System.Data.DataColumn.Expression%2A>egenskapen satt til dette: `&quot;Quantity * UnitPrice&quot;` expression-argumentet for metoden Compute vil være dette: `Sum(total)` den andre parameteren `filter`, bestemmer hvilke rader som skal brukes i uttrykket.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Hvis tabellen inneholder en datokolonne med navnet &quot;colDate&quot;, kan du for eksempel begrense radene med dette uttrykket: `colDate > 1/1/99 AND colDate < 17/1/99` regler for å opprette uttrykk for begge parameterne, kan du se den <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>egenskapen.</xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>"
  example:
  - "The following example sums the values of a column named \"Total\", for the salesperson whose identification number is five.  \n  \n [!code-cs[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/csharp/m-system.data.datatable._24_1.cs)]\n [!code-vb[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._24_1.vb)]"
  syntax:
    content: public object Compute (string expression, string filter);
    parameters:
    - id: expression
      type: System.String
      description: "Uttrykket som brukes til å beregne."
    - id: filter
      type: System.String
      description: "Filter for å begrense radene som evaluerer i uttrykket."
    return:
      type: System.Object
      description: "En <xref:System.Object>, angitt som et resultat av også verdier.</xref:System.Object> Hvis uttrykket evalueres til null, blir returverdien <xref href=&quot;System.DBNull.Value&quot;> </xref>."
  overload: System.Data.DataTable.Compute*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Constraints
  id: Constraints
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av begrensninger vedlikeholdes av denne tabellen."
  remarks: "En <xref:System.Data.ForeignKeyConstraint>begrenser handlingen utføres når en verdi i en kolonne (eller kolonner) er slettet, eller oppdateres.</xref:System.Data.ForeignKeyConstraint> Denne betingelsen skal brukes med primærnøkkelkolonnene. I en overordnet/underordnet-relasjon mellom to tabeller påvirke Hvis du sletter en verdi fra den overordnede tabellen underordnede rader i ett av følgende måter.      -Underordnede rader kan også være slettet (gjennomgripende handling).      -Verdiene i de underordnede kolonnen (eller kolonnene) kan settes til null-verdier.      -Verdiene i de underordnede kolonnen (eller kolonnene) kan angis til standardverdiene.      -Kan generere et unntak.       En <xref:System.Data.UniqueConstraint>blir aktiv under forsøk på å angi en verdi i en primærnøkkel til en ikke-unik verdi.</xref:System.Data.UniqueConstraint>"
  example:
  - "The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.  \n  \n [!code-vb[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._3_1.vb)]\n [!code-cs[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/csharp/p-system.data.datatable._3_1.cs)]"
  syntax:
    content: public System.Data.ConstraintCollection Constraints { get; }
    return:
      type: System.Data.ConstraintCollection
      description: "En <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> som inneholder samlingen av <xref href=&quot;System.Data.Constraint&quot;> </xref> objekter for tabellen. En tom samling returneres hvis ingen <xref href=&quot;System.Data.Constraint&quot;> </xref> objektene finnes."
  overload: System.Data.DataTable.Constraints*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Copy
  id: Copy
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Overfører strukturen og dataene for denne <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataTable>. The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/csharp/m-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Data.DataTable Copy ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "En ny <xref href=&quot;System.Data.DataTable&quot;> </xref> med samme (tabellskjemaer og begrensninger) og data som dette <xref href=&quot;System.Data.DataTable&quot;> </xref>.       Hvis disse klassene er avledet, blir også kopien av samme avledede klasser.       Kopier oppretter en ny <xref href=&quot;System.Data.DataTable&quot;> </xref> med samme struktur og data som opprinnelig <xref href=&quot;System.Data.DataTable&quot;> </xref>. Kopiere strukturen til en ny <xref href=&quot;System.Data.DataTable&quot;> </xref>, men ikke data, bruker <xref:System.Data.DataTable.Clone*>.</xref:System.Data.DataTable.Clone*>"
  overload: System.Data.DataTable.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerer en <xref href=&quot;System.Data.DataTableReader&quot;> </xref> samsvarer med dataene i dette <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following console application creates a <xref:System.Data.DataTable> instance. The example then passes the filled <xref:System.Data.DataTable>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.  \n  \n [!code-vb[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._9_1.vb)]\n [!code-cs[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._9_1.cs)]  \n  \n The example displays the following output in the console window:  \n  \n `1 Mary`  \n  \n `2 Andy`  \n  \n `3 Peter`  \n  \n `4 Russ`"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "En <xref href=&quot;System.Data.DataTableReader&quot;> </xref> som inneholder ett resultatsett, tilsvarer kilden <xref href=&quot;System.Data.DataTable&quot;> </xref> forekomsten."
  overload: System.Data.DataTable.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateInstance
  id: CreateInstance
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Oppretter en ny forekomst av <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: protected virtual System.Data.DataTable CreateInstance ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Det nye uttrykket."
  overload: System.Data.DataTable.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DataSet
  id: DataSet
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter den <xref href=&quot;System.Data.DataSet&quot;> </xref> som denne tabellen tilhører."
  remarks: "Hvis en kontroll data bundet til en <xref:System.Data.DataTable>, og tabellen tilhører en <xref:System.Data.DataSet>, får du tilgang til den <xref:System.Data.DataSet>gjennom denne egenskapen.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example returns the parent <xref:System.Data.DataSet> of a given table through the DataSet property.  \n  \n [!code-vb[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._10_1.vb)]\n [!code-cs[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/csharp/p-system.data.datatable._10_1.cs)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "Den <xref href=&quot;System.Data.DataSet&quot;> </xref> som denne tabellen tilhører."
  overload: System.Data.DataTable.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DefaultView
  id: DefaultView
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en tilpasset visning av tabellen som kan inneholde en filtervisning eller en markørposisjon."
  remarks: "Egenskapen DefaultView returnerer en <xref:System.Data.DataView>du kan bruke til å sortere, filtrere, og søk <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the DefaultView property. The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named \"Suppliers\" that includes a column named \"CompanyName.\"  \n  \n [!code-cs[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/csharp/p-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataView DefaultView { get; }
    return:
      type: System.Data.DataView
      description: "Den <xref href=&quot;System.Data.DataView&quot;> </xref> knyttet til den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.DefaultView*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DisplayExpression
  id: DisplayExpression
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir uttrykk som returnerer en verdi som brukes til å representere denne tabellen i brukergrensesnittet. Den <xref uid=&quot;langword_csharp_DisplayExpression&quot; name=&quot;DisplayExpression&quot; href=&quot;&quot;> </xref> egenskapen lar deg vise navnet på tabellen i et brukergrensesnitt."
  syntax:
    content: public string DisplayExpression { get; set; }
    return:
      type: System.String
      description: "Visningsstreng."
  overload: System.Data.DataTable.DisplayExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndInit
  id: EndInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Slutter initialisering av en <xref href=&quot;System.Data.DataTable&quot;> </xref> som er brukt i et skjema eller brukes av en annen komponent. Initialiseringen oppstår under kjøring."
  remarks: "Utformingsmiljøet i Visual Studio .NET bruker denne metoden avsluttes initialisering av en komponent som er brukt i et skjema eller brukes av en annen komponent. Den <xref:System.Data.DataTable.BeginInit%2A>metoden starter initialiseringen.</xref:System.Data.DataTable.BeginInit%2A> Ved hjelp av den <xref:System.Data.DataTable.BeginInit%2A>og EndInit metoder hindrer at kontrollen brukes før den er fullstendig initialisert.</xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public virtual void EndInit ();
    parameters: []
  overload: System.Data.DataTable.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndLoadData
  id: EndLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aktiverer varsler, indeksen Vedlikehold og begrensninger etter innlasting av data."
  remarks: "Bruk EndLoadData sammen med <xref:System.Data.DataTable.LoadDataRow%2A>og <xref:System.Data.DataTable.BeginLoadData%2A>.</xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void EndLoadData ();
    parameters: []
  overload: System.Data.DataTable.EndLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av egendefinerte brukerinformasjon."
  remarks: "Bruk ExtendedProperties til for <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Legg til informasjonen med den `Add` metoden. Henter informasjon med den `Item` metoden.       Utvidede egenskaper må være av typen <xref:System.String>.</xref:System.String> Egenskaper som ikke er av typen streng er ikke faste når den <xref:System.Data.DataTable>skrives som XML.</xref:System.Data.DataTable>"
  example:
  - "The following example adds a timestamp value to the <xref:System.Data.DataTable> through the ExtendedProperties property.  \n  \n [!code-cs[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "En <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> som inneholder egendefinert brukerinformasjon."
  overload: System.Data.DataTable.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.fInitInProgress
  id: fInitInProgress
  parent: System.Data.DataTable
  langs:
  - csharp
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kontrollerer om initialisering pågår. Initialiseringen oppstår under kjøring."
  syntax:
    content: protected bool fInitInProgress;
    return:
      type: System.Boolean
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges
  id: GetChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en kopi av det <xref href=&quot;System.Data.DataTable&quot;> </xref> som inneholder alle endringer til den siden det ble lastet inn eller <xref:System.Data.DataTable.AcceptChanges*>sist ble kalt.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Oppretter en ny <xref:System.Data.DataSet>som inneholder en kopi av alle rader i opprinnelige <xref:System.Data.DataSet>som har ventende endringer.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Relasjonen begrensninger kan føre til at flere uendret rader som skal legges til den nye <xref:System.Data.DataSet>Hvis uendret radene inneholde primærnøkler tilsvarer sekundærnøkler i endrede rader.</xref:System.Data.DataSet> Metoden returnerer `null` (`Nothing` i Visual Basic) Hvis det finnes ingen rader i opprinnelige <xref:System.Data.DataSet>med ventende endringer.</xref:System.Data.DataSet>"
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._25_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._25_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "En kopi av endringer fra dette <xref href=&quot;System.Data.DataTable&quot;> </xref>, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Hvis det finnes ingen endringer."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en kopi av det <xref href=&quot;System.Data.DataTable&quot;> </xref> som inneholder alle endringer til den siden den sist ble lastet inn, eller siden <xref:System.Data.DataTable.AcceptChanges*>ble kalt, filtrert etter <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Den <xref:System.Data.DataTable.GetChanges%2A>metoden brukes til å generere en annen <xref:System.Data.DataTable>objekt som inneholder bare endringer som innføres i opprinnelige.</xref:System.Data.DataTable> </xref:System.Data.DataTable.GetChanges%2A> Bruk av `rowStates` argumentet til å angi typen endringer som skal ta med det nye objektet.       Begrensninger for relasjonen, kan det føre til at uendret overordnede rader som skal inkluderes."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._15_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._15_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Én av de <xref href=&quot;System.Data.DataRowState&quot;> </xref> verdier."
    return:
      type: System.Data.DataTable
      description: "En filtrert kopi av det <xref href=&quot;System.Data.DataTable&quot;> </xref> som kan ha handlingene som utføres i den og nyere flettes tilbake i den <xref href=&quot;System.Data.DataTable&quot;> </xref> i <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Hvis ingen rader i den ønskede <xref href=&quot;System.Data.DataRowState&quot;> </xref> blir funnet, returneres <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Denne metoden returnerer en <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> forekomsten som inneholder den Web Services (WSDL = Description Language) som beskriver det <xref href=&quot;System.Data.DataTable&quot;> </xref> for Web Services."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "En <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> forekomsten."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "Den <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> forekomsten."
  overload: System.Data.DataTable.GetDataTableSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetErrors
  id: GetErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter som inneholder feil."
  remarks: "Returnerer den <xref:System.Data.DataRow>objekter som har <xref:System.Data.DataRow.RowError%2A>angitt.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> For eksempel feil kan oppstå når du kaller <xref:System.Data.Common.DataAdapter.Update%2A>med <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>satt til **true**.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Ikke aktivere <xref:System.Data.DataTable.AcceptChanges%2A>på den <xref:System.Data.DataTable>før du løse alle feil, og Send det <xref:System.Data.DataSet>for oppdatering.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following example uses the GetErrors method to return an array of <xref:System.Data.DataRow> objects that have errors.  \n  \n [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._18_1.vb)]\n [!code-cs[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/csharp/m-system.data.datatable._18_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetErrors ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter med feil."
  overload: System.Data.DataTable.GetErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller ut et objekt for serialisering informasjon med dataene som kreves for å serialisere den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "En <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> objekt som har de serialiserte dataene som er knyttet til den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "En <xref:System.Runtime.Serialization.StreamingContext>objekt som inneholder kilde og mål for serialisert dataflyt knyttet til den <xref href=&quot;System.Data.DataTable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataTable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Den <code> info </code> parameteren er en nullreferanse (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> i Visual Basic)."
  platform:
  - net462
- uid: System.Data.DataTable.GetRowType
  id: GetRowType
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter radtypen."
  syntax:
    content: protected virtual Type GetRowType ();
    parameters: []
    return:
      type: System.Type
      description: "Returnerer typen for den <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DataTable.GetRowType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetSchema
  id: GetSchema
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "En <xref:System.Xml.Schema.XmlSchema>som beskriver XML-representasjon av objektet som er generert av den <> </> *> metoden og forbrukes av den <> </> *> metode.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.HasErrors
  id: HasErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en verdi som angir om det er feil i noen av radene i noen av tabeller med den <xref href=&quot;System.Data.DataSet&quot;> </xref> som tabellen tilhører."
  remarks: "Når brukerne arbeider på et sett med data i en <xref:System.Data.DataTable>, kan du merke hver endring av en feil hvis endringen fører til at noen valideringsfeil.</xref:System.Data.DataTable> Du kan merke hele <xref:System.Data.DataRow>med en feil meldingen ved hjelp av den <xref:System.Data.DataRow.RowError%2A>egenskapen.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> Du kan også angi feil på hver kolonne i raden med den <xref:System.Data.DataRow.SetColumnError%2A>metoden.</xref:System.Data.DataRow.SetColumnError%2A>       Før du oppdaterer en datakilde med en <xref:System.Data.DataSet>anbefales det at du først aktivere <xref:System.Data.DataSet.GetChanges%2A>metoden for målet <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet> Metoden resulterer i en <xref:System.Data.DataSet>som inneholder bare endringer i opprinnelige.</xref:System.Data.DataSet> Før du sender den <xref:System.Data.DataSet>til datakilden for oppdatering, kan du se egenskapen HasErrors for hver tabell for å se om eventuelle feil som er knyttet til rader eller kolonner i radene.</xref:System.Data.DataSet>       Etter avstemmer hver feil, fjerner du feil med den <xref:System.Data.DataRow.ClearErrors%2A>metoden for den `DataRow`.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example uses the HasErrors property to check if a table contains errors.  \n  \n [!code-cs[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datatable._8_1.cs)]\n [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._8_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis feil; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  id: ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Kopier en <xref href=&quot;System.Data.DataRow&quot;> </xref> til en <xref href=&quot;System.Data.DataTable&quot;> </xref>, beholdes alle egenskapsinnstillingene, i tillegg til opprinnelige og gjeldende verdier."
  remarks: "Kaller <xref:System.Data.DataTable.NewRow%2A>legger til en rad i tabellen ved hjelp av eksisterende tabellskjemaet, men med standardverdier for raden, og angir de <xref:System.Data.DataRowState>til `Detached`.</xref:System.Data.DataRowState> </xref:System.Data.DataTable.NewRow%2A> Kaller ImportRow beholder den eksisterende <xref:System.Data.DataRowState>sammen med andre verdier i raden.</xref:System.Data.DataRowState> Hvis den `DataRow` som blir sendt som en parameter som er i frakoblet tilstand, ignoreres, og ingen unntak.       Den nye raden legges til slutten av tabellen.       Hvis ny rad overholder ikke en begrensning den ikke legges til tabellen.       Du kan få ny rad med DataTable.Rows.Find og DataTable.Rows.IndexOf indeksen. Se <xref:System.Data.DataRowCollection>og <xref:System.Data.DataTable.Rows%2A>for mer informasjon.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataRowCollection>"
  syntax:
    content: public void ImportRow (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "Den <xref href=&quot;System.Data.DataRow&quot;> </xref> som skal importeres."
  overload: System.Data.DataTable.ImportRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Initialized
  id: Initialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inntreffer etter den <xref href=&quot;System.Data.DataTable&quot;> </xref> er initialisert."
  remarks: "Hvis du vil ha mer informasjon, kan du se <xref:System.Data.DataTable.IsInitialized%2A>.</xref:System.Data.DataTable.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.IsInitialized
  id: IsInitialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en verdi som angir om den <xref href=&quot;System.Data.DataTable&quot;> </xref> er initialisert."
  remarks: "Returnerer statusen for den <xref:System.Data.DataTable>mens den blir opprettet for forekomsten av Visual Studio.</xref:System.Data.DataTable> Den <xref:System.Data.DataTable.BeginInit%2A>metoden settes til `false` og <xref:System.Data.DataTable.EndInit%2A>metoden settes til `true`.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>for å angi komponenten er fullført initialisering; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  id: Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataTable&quot;> </xref> med verdier fra en datakilde ved hjelp av den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Hvis den <xref href=&quot;System.Data.DataTable&quot;> </xref> inneholder allerede rader, innkommende data fra datakilden slås sammen med de eksisterende radene."
  remarks: "The Loadmethod consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The Load method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The Load method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.|The Load method adds the extra columns to `DataTable`'s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the Load method allows the rows to be added, substituting the default or `null` value for the missing column. If no default value or `null` can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.  For more information, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \n  \n This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=fullName>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the `Load` method. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed. In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.  \n  \n|Existing DataRowState|Values after `Load` method, and event action|  \n|---------------------------|--------------------------------------------------|  \n|Added|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Deleted|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n|(Not present)|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists. Otherwise, the `Load` method uses the current version of the primary key field."
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the `Load` method, displaying the data both before and after the load operation.  \n  \n [!code-cs[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._13_1.cs)]\n [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._13_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som gir et resultatsett."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  id: Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataTable&quot;> </xref> med verdier fra en datakilde ved hjelp av den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Hvis den <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> inneholder allerede rader, innkommende data fra datakilden slås sammen med de eksisterende radene i henhold til verdien for den <code> loadOption </code> parameteren."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra columns to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|"
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  \n  \n [!code-cs[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/csharp/m-system.data.datatable._29_1.cs)]\n [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/visualbasic/m-system.data.datatable._29_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som inneholder én eller flere resultatsett."
    - id: loadOption
      type: System.Data.LoadOption
      description: "En verdi fra den <xref href=&quot;System.Data.LoadOption&quot;> </xref> opplisting som angir hvordan rader i den <xref href=&quot;System.Data.DataTable&quot;> </xref> kombineres med innkommende rader som deler samme primærnøkkel."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Fyller en <xref href=&quot;System.Data.DataTable&quot;> </xref> med verdier fra en datakilde ved hjelp av den angitte <xref href=&quot;System.Data.IDataReader&quot;> </xref> ved hjelp av en feilbehandling representant."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra column(s) to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|  \n  \n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing. Set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."
  example:
  - >-
    [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/visualbasic/e9f1029e-2520-490c-8397-_1.vb)]
     [!code-cs[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/csharp/e9f1029e-2520-490c-8397-_1.cs)]
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "En <xref href=&quot;System.Data.IDataReader&quot;> </xref> som gir et resultatsett."
    - id: loadOption
      type: System.Data.LoadOption
      description: "En verdi fra den <xref href=&quot;System.Data.LoadOption&quot;> </xref> opplisting som angir hvordan rader i den <xref href=&quot;System.Data.DataTable&quot;> </xref> kombineres med innkommende rader som deler samme primærnøkkel."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "En <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> representant å kalle når det oppstår en feil under innlasting av data."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  id: LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Søker etter og oppdaterer en bestemt rad. Hvis det finnes ingen samsvarende rad, opprettes en ny rad med de angitte verdiene."
  remarks: "Metoden LoadDataRow tar en matrise med verdier, og søker etter de samsvarende verdiene i primary key kolonne(r).       Hvis en kolonne har en standardverdi, kan du sende en null-verdi i matrisen til å angi verdien for kolonnen. På samme måte hvis en kolonne har den <xref:System.Data.DataColumn.AutoIncrement%2A>-egenskapen satt til true, sendes en null-verdi i matrisen slik at de automatisk genererte verdien for raden.</xref:System.Data.DataColumn.AutoIncrement%2A>       Hvis den `fAcceptChanges` parameteren er `true` eller ikke er angitt, legges det nye data og deretter <xref:System.Data.DataTable.AcceptChanges%2A>kalles for å godta alle endringer i den <xref:System.Data.DataTable>; Hvis argumentet er `false`nye rader er merket som innsettinger og endringer i eksisterende rader er merket som endringer.</xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>       Unntak kan også oppstå enten en <xref:System.Data.DataTable.ColumnChanging>eller <xref:System.Data.DataTable.RowChanging>hendelsen.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Hvis det oppstår et unntak, legges ikke raden i tabellen.       Bruk LoadDataRow sammen med <xref:System.Data.DataTable.BeginLoadData%2A>og <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A>"
  example:
  - "The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  \n  \n [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._23_1.vb)]\n [!code-cs[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._23_1.cs)]"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);
    parameters:
    - id: values
      type: System.Object[]
      description: "En matrise med verdier som brukes til å opprette ny rad."
    - id: fAcceptChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Godta endringer. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Matrisen er større enn antallet kolonner i tabellen."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "En verdi samsvarer ikke med den tilsvarende kolonnetypen."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Legge til raden ugyldiggjøres en begrensning."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Forsøk på å sette en null-verdi i en kolonne der <xref:System.Data.DataColumn.AllowDBNull*>er USANN.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  id: LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Søker etter og oppdaterer en bestemt rad. Hvis det finnes ingen samsvarende rad, opprettes en ny rad med de angitte verdiene."
  remarks: "Den <xref:System.Data.DataTable.LoadDataRow%2A>metoden tar en matrise med verdier, og søker etter de samsvarende verdiene i den primære nøkkelen kolonne(r).</xref:System.Data.DataTable.LoadDataRow%2A>       Hvis en kolonne har en standardverdi, kan du sende en null-verdi i matrisen til å angi verdien for kolonnen. På samme måte hvis en kolonne har den <xref:System.Data.DataColumn.AutoIncrement%2A>-egenskapen satt til true, sendes en null-verdi i matrisen slik at de automatisk genererte verdien for raden.</xref:System.Data.DataColumn.AutoIncrement%2A>       Verdien for den `loadOption` parameteren brukes til å finne ut hvordan verdiene i matrisen brukes på en eksisterende rad. For eksempel hvis `loadOption` er satt til `OverwriteChanges`, `Original` og `Current` verdier for hver kolonne blir erstattet med verdiene i den innkommende raden og `RowState` er satt til `Unchanged`.       Unntak kan også oppstå enten en <xref:System.Data.DataTable.ColumnChanging>eller <xref:System.Data.DataTable.RowChanging>hendelsen.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Hvis det oppstår et unntak, legges ikke raden i tabellen.       Bruk <xref:System.Data.DataTable.LoadDataRow%2A>sammen med <xref:System.Data.DataTable.BeginLoadData%2A>og <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);
    parameters:
    - id: values
      type: System.Object[]
      description: "En matrise med verdier som brukes til å opprette ny rad."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Brukes til å bestemme hvordan Matriseverdiene brukes de tilhørende verdiene i en eksisterende rad."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Locale
  id: Locale
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir nasjonal innstilling informasjonen som ble brukt til å sammenligne strenger i tabellen."
  remarks: "En <xref:System.Globalization.CultureInfo>representerer innstillingene for programvare for en bestemt kultur eller fellesskapet.</xref:System.Globalization.CultureInfo>       Når det brukes for strengsammenligninger av <xref:System.Globalization.CultureInfo>påvirker, sammenligninger, og sortering.</xref:System.Globalization.CultureInfo>      > [!NOTE] > I kolonnene som inneholder uttrykk, den <xref:System.StringComparison>brukes.</xref:System.StringComparison> Den <xref:System.StringComparison>ignoreres.</xref:System.StringComparison>"
  example:
  - "The following example sets the <xref:System.Globalization.CultureInfo> through the Locale and prints the ISO language name.  \n  \n [!code-cs[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/csharp/p-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "En <xref:System.Globalization.CultureInfo>som inneholder data om brukerens maskinen nasjonal innstilling.</xref:System.Globalization.CultureInfo> Standard er det <xref href=&quot;System.Data.DataSet&quot;> </xref> objektets <xref:System.Globalization.CultureInfo>(returnert av den <xref:System.Data.DataSet.Locale*>egenskapen) som den <xref href=&quot;System.Data.DataTable&quot;> </xref> tilhører; Hvis tabellen ikke tilhører en <xref href=&quot;System.Data.DataSet&quot;> </xref>, standard er det gjeldende systemet <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale*> </xref:System.Globalization.CultureInfo>"
  overload: System.Data.DataTable.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Slå sammen den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> med gjeldende <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Merge-metoden brukes til å slå sammen to <xref:System.Data.DataTable>objekter med stor grad lignende skjemaer.</xref:System.Data.DataTable> Et merge brukes vanligvis på et klientprogram for å ta de nyeste endringene fra en datakilde i en eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Dette gjør det mulig for klientprogrammet skal ha et oppdateres <xref:System.Data.DataTable>med de nyeste dataene fra datakilden.</xref:System.Data.DataTable>       Fletteoperasjonen tar hensyn til den opprinnelige tabellen, og tabellen som skal flettes. Underordnede tabeller er ikke berørt eller inkludert. Hvis en tabell som har én eller flere underordnede tabeller, definert som en del av en-relasjon, må hver tabell som underordnet flettes enkeltvis.       Den `Merge` vanligvis-metoden på slutten av en rekke prosedyrer som involverer validering endringer avstemmer feil, oppdaterer datakilden med endringene og til slutt oppdatere den eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Når du utfører en fletting, beholdes endringer i de eksisterende dataene før flettingen som standard under flettingen. Utviklere kan endre dette problemet ved å kalle en av de to overlastingene for denne metoden, og angir verdien USANN for den `preserveChanges` parameteren.       I et klientprogram er det vanlige skal ha én enkelt knapp som brukeren kan klikke som samler endrede data og validerer før du sender den til en midterste skalaenhet komponent. I dette tilfellet den <xref:System.Data.DataTable.GetChanges%2A>metoden aktiveres først.</xref:System.Data.DataTable.GetChanges%2A> Metoden returnerer sekund <xref:System.Data.DataTable>optimalisert for å validere og sammenslåing.</xref:System.Data.DataTable> Denne andre <xref:System.Data.DataTable>objektet inneholder bare <xref:System.Data.DataRow>objekter som ble endret, noe som førte til et delsett av opprinnelige <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> Denne delsett er vanligvis mindre og dermed mer effektivt sendt tilbake til en midterste skalaenhet komponent. Komponenten midterste skalaenhet oppdaterer deretter den opprinnelige datakilden med endringene via lagrede prosedyrer. Midterste skalaenhet kan deretter sende tilbake en ny <xref:System.Data.DataTable>som inkluderer opprinnelige dataene og de nyeste dataene fra datakilden (ved å kjøre den opprinnelige spørringen på nytt), eller den kan sende delsettet med endringer som er gjort i den fra datakilden.</xref:System.Data.DataTable> (For eksempel hvis datakilden opprettes automatisk unike primære nøkkelverdier, disse verdiene kan overføres til klientprogrammet.) Uansett det returnerte <xref:System.Data.DataTable>kan slås sammen tilbake til det klientprogrammet opprinnelig <xref:System.Data.DataTable>med metoden Merge.</xref:System.Data.DataTable> </xref:System.Data.DataTable>       Når du slår sammen en ny kilde <xref:System.Data.DataTable>til målet, noen kilde rader med et <xref:System.Data.DataRowState>verdien for `Unchanged`, `Modified`, eller `Deleted`, er tilordnet mål rader med samme primære nøkkelverdier.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Kilde rader med et <xref:System.Data.DataRowState>verdien `Added` passer til nye mål rader med samme primære nøkkelverdier som de nye kilderadene.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  \n  \n [!code-vb[DataWorks DataTable.Merge#1](~/add/codesnippet/visualbasic/m-system.data.datatable._4_1.vb)]\n [!code-cs[DataWorks DataTable.Merge#1](~/add/codesnippet/csharp/m-system.data.datatable._4_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> skal slås sammen med gjeldende <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  id: Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Slå sammen den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> med gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, som angir om du vil beholde endringene i gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "Merge-metoden brukes til å slå sammen to <xref:System.Data.DataTable>objekter med stor grad lignende skjemaer.</xref:System.Data.DataTable> Et merge brukes vanligvis på et klientprogram for å ta de nyeste endringene fra en datakilde i en eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Dette gjør det mulig for klientprogrammet skal ha et oppdateres <xref:System.Data.DataTable>med de nyeste dataene fra datakilden.</xref:System.Data.DataTable>       Fletteoperasjonen tar hensyn til den opprinnelige tabellen, og tabellen som skal flettes. Underordnede tabeller er ikke berørt eller inkludert. Hvis en tabell som har én eller flere underordnede tabeller, definert som en del av en-relasjon, må hver tabell som underordnet flettes enkeltvis.       Den `Merge` vanligvis-metoden på slutten av en rekke prosedyrer som involverer validering endringer avstemmer feil, oppdaterer datakilden med endringene og til slutt oppdatere den eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Når du utfører en fletting, beholdes endringer i de eksisterende dataene før flettingen under flettingen hvis utvikleren angir false for den `preserveChanges` parameteren. Hvis den `preserveChanges` parameteren er satt til `true`, innkommende verdier ikke Overskriv eksisterende verdiene i den gjeldende rad-versjonen av den eksisterende raden. Hvis den `preserveChanges` parameteren er satt til `false`, innkommende verdier må overskrive de eksisterende verdiene i den gjeldende rad-versjonen av den eksisterende raden. Du finner mer informasjon om rad versjoner [rad tilstander og rad versjoner](~/add/includes/ajax-current-ext-md.md).       I et klientprogram er det vanlige skal ha én enkelt knapp som brukeren kan klikke som samler endrede data og validerer før du sender den til en midterste skalaenhet komponent. I dette tilfellet den <xref:System.Data.DataTable.GetChanges%2A>metoden aktiveres først.</xref:System.Data.DataTable.GetChanges%2A> Metoden returnerer sekund <xref:System.Data.DataTable>optimalisert for å validere og sammenslåing.</xref:System.Data.DataTable> Denne andre <xref:System.Data.DataTable>objektet inneholder bare <xref:System.Data.DataTable>og <xref:System.Data.DataRow>objekter som ble endret, noe som førte til et delsett av opprinnelige <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Denne delsett er vanligvis mindre, og dermed dette delsettet mer effektivt er sendt til en midterste skalaenhet komponent. Komponenten midterste skalaenhet oppdaterer deretter den opprinnelige datakilden med endringene via lagrede prosedyrer. Midterste skalaenhet kan deretter sende tilbake en ny <xref:System.Data.DataTable>som inkluderer opprinnelige dataene og de nyeste dataene fra datakilden (ved å kjøre den opprinnelige spørringen på nytt), eller den kan sende delsettet med endringer som er gjort i den fra datakilden.</xref:System.Data.DataTable> (For eksempel hvis datakilden opprettes automatisk unike primære nøkkelverdier, disse verdiene kan overføres til klientprogrammet.) Uansett det returnerte <xref:System.Data.DataTable>kan slås sammen tilbake til det klientprogrammet opprinnelig <xref:System.Data.DataTable>med den <xref:System.Data.DataTable.Merge%2A>metoden.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Når du slår sammen en ny kilde <xref:System.Data.DataTable>til målet, noen kilde rader med et <xref:System.Data.DataRowState>verdien `Unchanged`, `Modified`, eller `Deleted` target radene med de samme primære nøkkelverdiene samsvarer med.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Kilde rader med et <xref:System.Data.DataRowState>verdien `Added` passer til nye mål rader med samme primære nøkkelverdier som de nye kilderadene.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>. The example demonstrates the different behaviors for the `preserveChanges` parameter.  \n  \n [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/visualbasic/m-system.data.datatable._2_1.vb)]\n [!code-cs[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/csharp/m-system.data.datatable._2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> skal slås sammen med gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, å beholde endringene i gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.<xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>"
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Slå sammen den angitte <xref href=&quot;System.Data.DataTable&quot;> </xref> med gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, som angir om du vil beholde endringene og behandlingsmåten mangler XML-skjema i gjeldende <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "Den `Merge` metoden brukes til å slå sammen to <xref:System.Data.DataTable>objekter med stor grad lignende skjemaer.</xref:System.Data.DataTable> Et merge brukes vanligvis på et klientprogram for å ta de nyeste endringene fra en datakilde i en eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Dette gjør det mulig for klientprogrammet skal ha et oppdateres <xref:System.Data.DataTable>med de nyeste dataene fra datakilden.</xref:System.Data.DataTable>       Fletteoperasjonen tar hensyn til den opprinnelige tabellen, og tabellen som skal flettes. Underordnede tabeller er ikke berørt eller inkludert. Hvis en tabell som har én eller flere underordnede tabeller, definert som en del av en-relasjon, må hver tabell som underordnet flettes enkeltvis.       Den `Merge` vanligvis-metoden på slutten av en rekke prosedyrer som involverer validering endringer avstemmer feil, oppdaterer datakilden med endringene og til slutt oppdatere den eksisterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Når du utfører en fletting, beholdes endringer i de eksisterende dataene før flettingen under flettingen hvis utvikleren angir false for den `preserveChanges` parameteren. Hvis den `preserveChanges` parameteren er satt til `true`, innkommende verdier ikke Overskriv eksisterende verdiene i den gjeldende rad-versjonen av den eksisterende raden. Hvis den `preserveChanges` parameteren er satt til `false`, innkommende verdier må overskrive de eksisterende verdiene i den gjeldende rad-versjonen av den eksisterende raden. Du finner mer informasjon om rad versjoner [rad tilstander og rad versjoner](~/add/includes/ajax-current-ext-md.md).       I et klientprogram er det vanlige skal ha én enkelt knapp som brukeren kan klikke som samler endrede data og validerer før du sender den til en midterste skalaenhet komponent. I dette tilfellet den <xref:System.Data.DataTable.GetChanges%2A>metoden aktiveres først.</xref:System.Data.DataTable.GetChanges%2A> Metoden returnerer sekund <xref:System.Data.DataTable>optimalisert for å validere og sammenslåing.</xref:System.Data.DataTable> Denne andre <xref:System.Data.DataTable>objektet inneholder bare <xref:System.Data.DataTable>og <xref:System.Data.DataRow>objekter som ble endret, noe som førte til et delsett av opprinnelige <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Denne delsett er vanligvis mindre, og dermed dette delsettet mer effektivt er sendt til en midterste skalaenhet komponent. Komponenten midterste skalaenhet oppdaterer deretter den opprinnelige datakilden med endringene via lagrede prosedyrer. Midterste skalaenhet kan deretter sende tilbake en ny <xref:System.Data.DataTable>som inkluderer opprinnelige dataene og de nyeste dataene fra datakilden (ved å kjøre den opprinnelige spørringen på nytt), eller den kan sende delsettet med endringer som er gjort i den fra datakilden.</xref:System.Data.DataTable> (For eksempel hvis datakilden opprettes automatisk unike primære nøkkelverdier, disse verdiene kan overføres til klientprogrammet.) Uansett det returnerte <xref:System.Data.DataTable>kan slås sammen tilbake til det klientprogrammet opprinnelig <xref:System.Data.DataTable>med den <xref:System.Data.DataTable.Merge%2A>metoden.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Når den <xref:System.Data.DataTable.Merge%2A>-metoden, skjemaene i to <xref:System.Data.DataTable>objekter sammenlignes, fordi det er mulig at skjemaene kan ha blitt endret.</xref:System.Data.DataTable> </xref:System.Data.DataTable.Merge%2A> For eksempel i en bedrift-til-bedrift-scenarioet kan nye kolonner er lagt til et XML-skjema med en automatisert prosess. Hvis kilden <xref:System.Data.DataTable>inneholder skjemaelementer (lagt til <xref:System.Data.DataColumn>objekter) som mangler i målet, skjemaelementene kan legges til målet ved å angi den `missingSchemaAction` argumentet til `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> I dette tilfellet, den sammenslåtte <xref:System.Data.DataTable>inneholder tillagt skjema og data.</xref:System.Data.DataTable>       Etter sammenslåing skjemaer flettes dataene.       Når du slår sammen en ny kilde <xref:System.Data.DataTable>til målet, noen kilde rader med et <xref:System.Data.DataRowState>verdien `Unchanged`, `Modified`, eller `Deleted` target radene med de samme primære nøkkelverdiene samsvarer med.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Kilde rader med et <xref:System.Data.DataRowState>verdien `Added` passer til nye mål rader med samme primære nøkkelverdier som de nye kilderadene.</xref:System.Data.DataRowState>"
  example:
  - "The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  \n  \n [!code-cs[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/csharp/0a34dc2a-14c3-4d65-b78d-_1.cs)]\n [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/visualbasic/0a34dc2a-14c3-4d65-b78d-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Den <xref href=&quot;System.Data.DataTable&quot;> </xref> skal slås sammen med gjeldende <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, å beholde endringene i gjeldende <xref href=&quot;System.Data.DataTable&quot;> </xref>; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Én av de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> verdier."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.MinimumCapacity
  id: MinimumCapacity
  parent: System.Data.DataTable
  langs:
  - csharp
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir størrelsen på første Start for denne tabellen."
  remarks: "MinimumCapacity lar systemet til å opprette et passende sett med ressurser før henting av data. En når ytelse er kritiske, kan angi denne egenskapen optimalisere ytelsen."
  example:
  - "The following example sets the MinimumCapacity of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._6_1.vb)]\n [!code-cs[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/csharp/p-system.data.datatable._6_1.cs)]"
  syntax:
    content: public int MinimumCapacity { get; set; }
    return:
      type: System.Int32
      description: "Den opprinnelige Start størrelsen på radene i tabellen. Standarden er 50."
  overload: System.Data.DataTable.MinimumCapacity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Namespace
  id: Namespace
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir navneområdet for XML-representasjon av data som er lagret i den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Navneområdet for den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRow
  id: NewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Oppretter en ny <xref href=&quot;System.Data.DataRow&quot;> </xref> med samme XML-skjemaet som tabellen."
  remarks: "Du må bruke NewRow-metoden til å opprette nye <xref:System.Data.DataRow>objekter med samme XML-skjemaet som <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> Når du har opprettet en <xref:System.Data.DataRow>, kan du legge den til den <xref:System.Data.DataRowCollection>, til den <xref:System.Data.DataTable>objektets <xref:System.Data.DataTable.Rows%2A>egenskapen.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection> </xref:System.Data.DataRow> Når du bruker NewRow til å opprette nye rader, må radene legges til eller slettes fra tabellen før du kaller <xref:System.Data.DataTable.Clear%2A>.</xref:System.Data.DataTable.Clear%2A>"
  example:
  - "The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the NewRow method. Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.  \n  \n [!code-vb[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._27_1.vb)]\n [!code-cs[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._27_1.cs)]"
  syntax:
    content: public System.Data.DataRow NewRow ();
    parameters: []
    return:
      type: System.Data.DataRow
      description: "En <xref href=&quot;System.Data.DataRow&quot;> </xref> med samme XML-skjemaet som den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.NewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  id: NewRowArray(System.Int32)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Returnerer en matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  syntax:
    content: protected System.Data.DataRow[] NewRowArray (int size);
    parameters:
    - id: size
      type: System.Int32
      description: "En <xref:System.Int32>verdi som beskriver størrelsen på matrisen.</xref:System.Int32>"
    return:
      type: System.Data.DataRow[]
      description: "Den nye matrisen."
  overload: System.Data.DataTable.NewRowArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  id: NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Oppretter en ny rad fra en eksisterende rad."
  syntax:
    content: protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "A <xref href=&quot;System.Data.DataRowBuilder&quot;></xref> object."
    return:
      type: System.Data.DataRow
      description: "En <xref href=&quot;System.Data.DataRow&quot;> </xref> avledet klasse."
  overload: System.Data.DataTable.NewRowFromBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.ColumnChanged&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnColumnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.ColumnChanging&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnColumnChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>hendelsen.</xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>"
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "En <xref:System.ComponentModel.PropertyChangedEventArgs>som inneholder Hendelsesdata.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataTable.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  id: OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Varsler den <xref href=&quot;System.Data.DataTable&quot;> </xref> som en <xref href=&quot;System.Data.DataColumn&quot;> </xref> fjernes."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. Hvis du vil ha mer informasjon, se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRemoveColumn (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "Den <xref href=&quot;System.Data.DataColumn&quot;> </xref> blir fjernet."
  overload: System.Data.DataTable.OnRemoveColumn*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  id: OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.RowChanged&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnRowChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  id: OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnRowChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.RowDeleted&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnRowDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.RowDeleting&quot;> </xref> hendelsen."
  remarks: 'Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "En <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnRowDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  id: OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.TableCleared&quot;> </xref> hendelsen."
  remarks: "Hever den <xref:System.Data.DataTable.TableCleared>hendelse som aktiveres umiddelbart etter at alle rader har blitt tømt men før den <xref:System.Data.DataTable.Clear%2A>metoden returnerer kontrollen til oppkalleren.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableCleared>       Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "En <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnTableCleared*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  id: OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.TableClearing&quot;> </xref> hendelsen."
  remarks: "Hever den <xref:System.Data.DataTable.TableClearing>hendelse som aktiveres før behandling av den <xref:System.Data.DataTable.Clear%2A>operasjonen starter.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableClearing>       Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "En <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnTableClearing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  id: OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hever den <xref href=&quot;System.Data.DataTable.TableNewRow&quot;> </xref> hendelsen."
  remarks: "Viser <xref:System.Data.DataTable.TableNewRow>hendelser som starter etter en ny <xref:System.Data.DataRow>har blitt opprettet <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> </xref:System.Data.DataTable.TableNewRow>       Opprettet en hendelse aktiverer hendelsesbehandlingen via en representant. For en oversikt, kan du se [NIB: opprettet en hendelse](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableNewRowEventArgs
      description: "En <xref href=&quot;System.Data.DataTableNewRowEventArgs&quot;> </xref> som inneholder Hendelsesdata."
  overload: System.Data.DataTable.OnTableNewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ParentRelations
  id: ParentRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av overordnede relasjoner for dette <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the ParentRelations property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._9_1.cs)]\n [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._9_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection ParentRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "En <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> som inneholder de overordnede relasjonene for tabellen. En tom samling returneres hvis ingen <xref href=&quot;System.Data.DataRelation&quot;> </xref> objektene finnes."
  overload: System.Data.DataTable.ParentRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Prefix
  id: Prefix
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir navneområdet for XML-representasjon av data som er lagret i den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Prefikset for den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.PrimaryKey
  id: PrimaryKey
  parent: System.Data.DataTable
  langs:
  - csharp
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir en matrise av kolonner som fungerer som primærnøkler for datatabellen."
  remarks: "Primærnøkkelen i en tabell må være unike til å identifisere post i tabellen. Det er også mulig å ha en tabell med en primærnøkkel som består av to eller flere kolonner. Dette skjer når en enkelt kolonne ikke kan inneholde nok unike verdier. For eksempel kan en primærnøkkel for to kolonner bestå av en &quot;Fornavn&quot; og &quot;Etternavn&quot;-kolonne. Fordi primærnøkler kan bestå av mer enn én kolonne, egenskapen PrimaryKey består av en matrise av <xref:System.Data.DataColumn>objekter.</xref:System.Data.DataColumn>"
  example:
  - "The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`. The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/csharp/p-system.data.datatable._4_1.cs)]\n [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._4_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] PrimaryKey { get; set; }
    return:
      type: System.Data.DataColumn[]
      description: "En matrise av <xref href=&quot;System.Data.DataColumn&quot;> </xref> objekter."
  overload: System.Data.DataTable.PrimaryKey*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Nøkkelen er en sekundærnøkkel."
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser XML-skjema og data i den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "Den gjeldende <xref:System.Data.DataTable>og tilhørende etterfølgere utstyres med data fra den angitte <xref:System.IO.Stream>.</xref:System.IO.Stream> </xref:System.Data.DataTable> Virkemåten til denne metoden er identisk med den <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metoden, unntatt som i dette tilfellet dataene er lastet inn bare for den gjeldende tabellen og underordnede.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoden ReadXml gir en måte å lese data only, eller både data og skjema til en <xref:System.Data.DataTable>fra en XML-dokument, mens den <xref:System.Data.DataTable.ReadXmlSchema%2A>metoden viser bare skjema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Merk at det samme gjelder for den <xref:System.Data.DataTable.WriteXml%2A>og <xref:System.Data.DataTable.WriteXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Lagring av XML-dataene, eller skjemaet og data fra den `DataTable`, bruker den `WriteXml` metoden. For å skrive bare skjemaet, kan du bruke den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Hvis et innebygd skjema er angitt, brukes i linje-skjema til å utvide den eksisterende relasjonsdatabase strukturen før innlasting av dataene. Hvis det er konflikter (for eksempel den samme kolonnen i den samme tabellen som er definert med forskjellige datatyper) oppstår et unntak.       Hvis ingen innebygde XML-skjemaet er angitt, utsettes relasjonsdata strukturen via interferens etter behov, i henhold til strukturen i XML-dokumentet. Hvis skjemaet ikke kan utvides til interferens for å vise alle dataene, oppstår det et unntak.      > [!NOTE] > I `DataSet` ikke knytte et XML-element med den tilhørende `DataColumn` eller `DataTable` når gyldig XML-tegn, for eksempel (&quot;_&quot;) anførselstegn i serialisert XML. Den `DataSet` selve escapes bare ugyldige XML-tegn i XML-elementnavn, og derfor kan bare bruke det samme. Når gyldige tegn i XML-elementnavnet er escape-tegn, ignoreres elementet under behandling."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXml#1](~/add/codesnippet/csharp/m-system.data.datatable._19_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._19_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Et objekt som er avledet fra<xref:System.IO.Stream></xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> brukes til å lese dataene."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser XML-skjema og data i den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "Den gjeldende <xref:System.Data.DataTable>og tilhørende etterfølgere utstyres med data fra den angitte <xref:System.IO.TextReader>.</xref:System.IO.TextReader> </xref:System.Data.DataTable> Virkemåten til denne metoden er identisk med den <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metoden, unntatt som i dette tilfellet dataene er lastet inn bare for den gjeldende tabellen og underordnede.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoden ReadXml gir en måte å lese data only, eller både data og skjema til en <xref:System.Data.DataTable>fra en XML-dokument, mens den <xref:System.Data.DataTable.ReadXmlSchema%2A>metoden viser bare skjema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Merk at det samme gjelder for den <xref:System.Data.DataTable.WriteXml%2A>og <xref:System.Data.DataTable.WriteXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Lagring av XML-dataene, eller skjemaet og data fra den `DataTable`, bruker den `WriteXml` metoden. For å skrive bare skjemaet, kan du bruke den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Hvis et innebygd skjema er angitt, brukes i linje-skjema til å utvide den eksisterende relasjonsdatabase strukturen før innlasting av dataene. Hvis det er konflikter (for eksempel den samme kolonnen i den samme tabellen som er definert med forskjellige datatyper) oppstår et unntak.       Hvis ingen innebygde XML-skjemaet er angitt, utsettes relasjonsdata strukturen via interferens etter behov, i henhold til strukturen i XML-dokumentet. Hvis skjemaet ikke kan utvides til interferens for å vise alle dataene, oppstår det et unntak.      > [!NOTE] > I `DataSet` ikke knytte et XML-element med den tilhørende `DataColumn` eller `DataTable` når gyldig XML-tegn, for eksempel (&quot;_&quot;) anførselstegn i serialisert XML. Den `DataSet` selve escapes bare ugyldige XML-tegn i XML-elementnavn, og derfor kan bare bruke det samme. Når gyldige tegn i XML-elementnavnet er escape-tegn, ignoreres elementet under behandling."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-vb[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/visualbasic/m-system.data.datatable._26_1.vb)]\n [!code-cs[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/csharp/m-system.data.datatable._26_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref:System.IO.TextReader>som skal brukes til å lese dataene.</xref:System.IO.TextReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> brukes til å lese dataene."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser XML-skjema og data i den <xref href=&quot;System.Data.DataTable&quot;> </xref> fra den angitte filen."
  remarks: "Den gjeldende <xref:System.Data.DataTable>og tilhørende etterfølgere utstyres med dataene fra filen i den angitte <xref:System.String>.</xref:System.String> </xref:System.Data.DataTable> Virkemåten til denne metoden er identisk med den <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>metoden, unntatt som i dette tilfellet dataene er lastet inn bare for den gjeldende tabellen og underordnede.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Metoden ReadXml gir en måte å lese data only, eller både data og skjema til en <xref:System.Data.DataTable>fra en XML-dokument, mens den <xref:System.Data.DataTable.ReadXmlSchema%2A>metoden viser bare skjema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Merk at det samme gjelder for den <xref:System.Data.DataTable.WriteXml%2A>og <xref:System.Data.DataTable.WriteXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Lagring av XML-dataene, eller skjemaet og data fra den `DataTable`, bruker den `WriteXml` metoden. For å skrive bare skjemaet, kan du bruke den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Hvis et innebygd skjema er angitt, brukes i linje-skjema til å utvide den eksisterende relasjonsdatabase strukturen før innlasting av dataene. Hvis det er konflikter (for eksempel den samme kolonnen i den samme tabellen som er definert med forskjellige datatyper) oppstår et unntak.       Hvis ingen innebygde XML-skjemaet er angitt, utsettes relasjonsdata strukturen via interferens etter behov, i henhold til strukturen i XML-dokumentet. Hvis skjemaet ikke kan utvides til interferens for å vise alle dataene, oppstår det et unntak.      > [!NOTE] > I `DataSet` ikke knytte et XML-element med den tilhørende `DataColumn` eller `DataTable` når gyldig XML-tegn, for eksempel (&quot;_&quot;) anførselstegn i serialisert XML. Den `DataSet` selve escapes bare ugyldige XML-tegn i XML-elementnavn, og derfor kan bare bruke det samme. Når gyldige tegn i XML-elementnavnet er escape-tegn, ignoreres elementet under behandling.      ```   using System.Data;   public class A {      static void Main(string[] args) {         DataTable tabl = new DataTable(&quot;mytable&quot;);         tabl.Columns.Add(new DataColumn(&quot;id&quot;, typeof(int)));         for (int i = 0; i < 10; i++) {            DataRow row = tabl.NewRow();            row[&quot;id&quot;] = i;            tabl.Rows.Add(row);         }         tabl.WriteXml(&quot;f.xml&quot;, XmlWriteMode.WriteSchema);         DataTable newt = new DataTable();         newt.ReadXml(&quot;f.xml&quot;);      }   }   ```"
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to disk. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/csharp/m-system.data.datatable._14_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._14_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen kan lese data fra."
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> brukes til å lese dataene."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser XML-skjema og Data i den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "Den gjeldende <xref:System.Data.DataTable>og tilhørende etterfølgere utstyres med dataene fra filen i den angitte <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Data.DataTable> Virkemåten til denne metoden er identisk med metoden ReadXml bortsett fra at i dette tilfellet dataene er lastet inn bare for den gjeldende tabellen og underordnede.       Metoden ReadXml gir en måte å lese data only, eller både data og skjema til en <xref:System.Data.DataTable>fra en XML-dokument, mens den <xref:System.Data.DataTable.ReadXmlSchema%2A>metoden viser bare skjema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Merk at det samme gjelder for den <xref:System.Data.DataTable.WriteXml%2A>og <xref:System.Data.DataTable.WriteXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Lagring av XML-dataene, eller skjemaet og data fra den `DataTable`, bruker den `WriteXml` metoden. For å skrive bare skjemaet, kan du bruke den `WriteXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Hvis et innebygd skjema er angitt, brukes i linje-skjema til å utvide den eksisterende relasjonsdatabase strukturen før innlasting av dataene. Hvis det er konflikter (for eksempel den samme kolonnen i den samme tabellen som er definert med forskjellige datatyper) oppstår et unntak.       Hvis ingen innebygde XML-skjemaet er angitt, utsettes relasjonsdata strukturen via interferens etter behov, i henhold til strukturen i XML-dokumentet. Hvis skjemaet ikke kan utvides til interferens for å vise alle dataene, oppstår det et unntak.      > [!NOTE] > I `DataSet` ikke knytte et XML-element med den tilhørende `DataColumn` eller `DataTable` når gyldig XML-tegn, for eksempel (&quot;_&quot;) anførselstegn i serialisert XML. Den `DataSet` selve escapes bare ugyldige XML-tegn i XML-elementnavn, og derfor kan bare bruke det samme. Når gyldige tegn i XML-elementnavnet er escape-tegn, ignoreres elementet under behandling."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/csharp/m-system.data.datatable._10_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._10_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>som skal brukes til å lese dataene.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Den <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> brukes til å lese dataene."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser en XML-skjema til den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte strømmen."
  remarks: "Bruk ReadXmlSchema-metoden til å opprette skjemaet for <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       For å skrive inn et skjema et XML-dokument, kan du bruke den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden.</xref:System.Data.DataTable.WriteXmlSchema%2A>       XML-skjemaet tolkes i henhold til XSD standard.       Ødelagte data kan forekomme hvis msdata:DataType og xs:type-typer ikke samsvarer. Bli vil utløst ingen unntak.       Den `ReadXmlSchema` metoden vanligvis kalles før du aktiverer <xref:System.Data.DataTable.ReadXml%2A>metoden som brukes til å fylle <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Hvis du vil opprette en nestet relasjon som bruker XML-skjemaet, kan du bruke implisitt nestede elementer. Du kan også konfigurere nestet relasjon for å bruke eksplisitt kolonnenavn. Elementene må være implisitt nestet for at den tilsvarende DataTables delta i en nestet relasjon."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/csharp/m-system.data.datatable._8_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/visualbasic/m-system.data.datatable._8_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten brukes til å lese skjemaet."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser en XML-skjema til den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "Bruk ReadXmlSchema-metoden til å opprette skjemaet for <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       For å skrive inn et skjema et XML-dokument, kan du bruke den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden.</xref:System.Data.DataTable.WriteXmlSchema%2A>       XML-skjemaet tolkes i henhold til XSD standard.       Ødelagte data kan forekomme hvis msdata:DataType og xs:type-typer ikke samsvarer. Bli vil utløst ingen unntak.       Den `ReadXmlSchema` metoden vanligvis kalles før du aktiverer <xref:System.Data.DataTable.ReadXml%2A>metoden som brukes til å fylle <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Hvis du vil opprette en nestet relasjon som bruker XML-skjemaet, kan du bruke implisitt nestede elementer. Du kan også konfigurere nestet relasjon for å bruke eksplisitt kolonnenavn. Elementene må være implisitt nestet for at den tilsvarende DataTables delta i en nestet relasjon."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._12_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._12_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Den <xref:System.IO.TextReader>brukes til å lese skjemainformasjon.</xref:System.IO.TextReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser en XML-skjema til den <xref href=&quot;System.Data.DataTable&quot;> </xref> fra den angitte filen."
  remarks: "Bruk ReadXmlSchema-metoden til å opprette skjemaet for <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       For å skrive inn et skjema et XML-dokument, kan du bruke den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden.</xref:System.Data.DataTable.WriteXmlSchema%2A>       XML-skjemaet tolkes i henhold til XSD standard.       Ødelagte data kan forekomme hvis msdata:DataType og xs:type-typer ikke samsvarer. Bli vil utløst ingen unntak.       Den `ReadXmlSchema` metoden vanligvis kalles før du aktiverer den <xref:System.Data.DataTable.ReadXml%2A>metoden som brukes til å fylle den `DataTable`.</xref:System.Data.DataTable.ReadXml%2A>       Hvis du vil opprette en nestet relasjon som bruker XML-skjemaet, kan du bruke implisitt nestede elementer. Du kan også konfigurere nestet relasjon for å bruke eksplisitt kolonnenavn. Elementene må være implisitt nestet for at den tilsvarende DataTables delta i en nestet relasjon."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/csharp/m-system.data.datatable._16_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._16_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen som kan lese skjemainformasjon."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser en XML-skjema til den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "Bruk ReadXmlSchema-metoden til å opprette skjemaet for <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       For å skrive inn et skjema et XML-dokument, kan du bruke den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden.</xref:System.Data.DataTable.WriteXmlSchema%2A>       XML-skjemaet tolkes i henhold til XSD standard.       Ødelagte data kan forekomme hvis msdata:DataType og xs:type-typer ikke samsvarer. Bli vil utløst ingen unntak.       Den `ReadXmlSchema` metoden vanligvis kalles før du aktiverer <xref:System.Data.DataTable.ReadXml%2A>metoden som brukes til å fylle <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>      > [!NOTE] > Måten å opprette en nestet relasjon som bruker XML-skjema er ha implisitt nestede elementer. I tillegg kan nestet relasjon på nytt kablet, til å bruke eksplisitt kolonnenavn. Det er obligatorisk for elementene implisitt nestede for den tilsvarende DataTables delta i en nestet relasjon."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/csharp/m-system.data.datatable._17_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._17_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Den <xref:System.Xml.XmlReader>brukes til å lese skjemainformasjon.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Leser en XML-strømmen."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "En <xref:System.Xml.XmlReader>objektet.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RejectChanges
  id: RejectChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ruller tilbake alle endringer som er gjort i tabellen fordi det ble lastet inn eller sist <xref:System.Data.DataTable.AcceptChanges*>ble kalt.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Når RejectChanges kalles, noen <xref:System.Data.DataRow>objekter som er fremdeles i redigeringsmodus avbryte endringene.</xref:System.Data.DataRow> Nye rader er fjernet. Rader med den <xref:System.Data.DataRowState>satt til `Modified` eller `Deleted` return tilbake til opprinnelig tilstand.</xref:System.Data.DataRowState>"
  example:
  - "The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the RejectChanges method.  \n  \n [!code-cs[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._3_1.cs)]\n [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._3_1.vb)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataTable.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir serialiseringsformatet."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "En <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> opplisting angi enten <xref uid=&quot;langword_csharp_Binary&quot; name=&quot;Binary&quot; href=&quot;&quot;> </xref> eller <xref uid=&quot;langword_csharp_Xml&quot; name=&quot;Xml&quot; href=&quot;&quot;> </xref> serialisering."
  overload: System.Data.DataTable.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Reset
  id: Reset
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Tilbakestiller det <xref href=&quot;System.Data.DataTable&quot;> </xref> til sin opprinnelige tilstand. Tilbakestill fjerner alle data, indekser, relasjoner og kolonner i tabellen. Hvis et datasett som inkluderer en DataTable, være tabellen fremdeles del av datasettet etter at tabellen er tilbakestilt."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataTable.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanged
  id: RowChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inntreffer etter en <xref href=&quot;System.Data.DataRow&quot;> </xref> er endret."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._0_1.vb)]
     [!code-cs[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._0_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanged;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanging
  id: RowChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en <xref href=&quot;System.Data.DataRow&quot;> </xref> endrer."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._1_1.cs)]
     [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._1_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanging;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleted
  id: RowDeleted
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en rad i tabellen er slettet."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._3_1.vb)]
     [!code-cs[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/csharp/e-system.data.datatable._3_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleted;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleting
  id: RowDeleting
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer før en rad i tabellen vil bli slettet."
  remarks: "Hvis du vil ha mer informasjon, se [behandler DataTable hendelser](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/csharp/e-system.data.datatable._2_1.cs)]
     [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._2_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleting;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Rows
  id: Rows
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter samlingen av rader som tilhører denne tabellen."
  remarks: "Opprette en ny <xref:System.Data.DataRow>, må du bruke den <xref:System.Data.DataTable.NewRow%2A>metode til å returnere et nytt objekt.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Slikt objekt konfigureres automatisk i henhold til skjemaet definert for den <xref:System.Data.DataTable>via samlingen <xref:System.Data.DataColumn>objekter.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> Etter oppretter en ny rad, og angi verdier for hver kolonne i raden, kan du legge til raden i <xref:System.Data.DataRowCollection>ved hjelp av den `Add` metoden.</xref:System.Data.DataRowCollection>       Hver <xref:System.Data.DataRow>representerer en rad med data i tabellen i samlingen.</xref:System.Data.DataRow> Hvis du vil utføre en endring i verdien for en kolonne i raden, må du aktivere den <xref:System.Data.DataTable.AcceptChanges%2A>metoden.</xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>. After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.  \n  \n [!code-cs[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/csharp/p-system.data.datatable._1_1.cs)]\n [!code-vb[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._1_1.vb)]"
  syntax:
    content: public System.Data.DataRowCollection Rows { get; }
    return:
      type: System.Data.DataRowCollection
      description: "En <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> som inneholder <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter; hvis en null verdi hvis ingen <xref href=&quot;System.Data.DataRow&quot;> </xref> objektene finnes."
  overload: System.Data.DataTable.Rows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select
  id: Select
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en matrise av alle <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter."
  remarks: "For å sikre sorteringsrekkefølgen som er riktig, må du angi sorteringskriteriene med <xref:System.Data.DataTable.Select%2A>eller <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>"
  example:
  - "The following example returns an array of <xref:System.Data.DataRow> objects through the Select method.  \n  \n [!code-cs[Classic WebData DataTable.Select Example#1](~/add/codesnippet/csharp/m-system.data.datatable._6_1.cs)]\n [!code-vb[Classic WebData DataTable.Select Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._6_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String)
  id: Select(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en matrise av alle <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter som samsvarer med filtervilkårene."
  remarks: "Til å opprette den `filterExpression` argument, bruk de samme reglene som gjelder for den <xref:System.Data.DataColumn>klassens <xref:System.Data.DataColumn.Expression%2A>egenskapsverdien for oppretting av filtre.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn>       For å sikre sorteringsrekkefølgen som er riktig, må du angi sorteringskriteriene med <xref:System.Data.DataTable.Select%2A>eller <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>       Hvis kolonnen i filteret inneholder en nullverdi, blir ikke en del av resultatet."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Vilkårene som skal brukes til å filtrere radene. Eksempler på hvordan filteret radene [datavisningen RowFilter syntaksen \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    return:
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String)
  id: Select(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en matrise av alle <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter som samsvarer med filtervilkår i den angitte sorteringsrekkefølgen."
  remarks: "Skjemaet den `filterExpression` argument, bruker samme regler for å opprette den <xref:System.Data.DataColumn>klassens <xref:System.Data.DataColumn.Expression%2A>egenskapsverdi.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Den `Sort` argumentet også bruker samme regler for å opprette klassens <xref:System.Data.DataColumn.Expression%2A>strenger.</xref:System.Data.DataColumn.Expression%2A>       Hvis kolonnen i filteret inneholder en nullverdi, blir ikke en del av resultatet."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Vilkårene som skal brukes til å filtrere radene. Eksempler på hvordan filteret radene [datavisningen RowFilter syntaksen \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "En tekststreng som angir retningen kolonne og sortering."
    return:
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter tilsvarende filteruttrykket."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  id: Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter en matrise av alle <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter som samsvarer med filteret sortert sorteringen som samsvarer med den angitte tilstanden."
  remarks: "Skjemaet den `filterExpression` argument, bruker samme regler for å opprette den <xref:System.Data.DataColumn>klassens <xref:System.Data.DataColumn.Expression%2A>egenskapsverdi.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Den `Sort` argumentet også bruker samme regler for å opprette klassens <xref:System.Data.DataColumn.Expression%2A>strenger.</xref:System.Data.DataColumn.Expression%2A>       Hvis kolonnen i filteret inneholder en nullverdi, blir ikke en del av resultatet."
  example:
  - "The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/csharp/c72cdab9-f58a-41a1-a322-_1.cs)]\n [!code-vb[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/visualbasic/c72cdab9-f58a-41a1-a322-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);
    parameters:
    - id: filterExpression
      type: System.String
      description: "Vilkårene som skal brukes til å filtrere radene. Eksempler på hvordan filteret radene [datavisningen RowFilter syntaksen \\[C#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "En tekststreng som angir retningen kolonne og sortering."
    - id: recordStates
      type: System.Data.DataViewRowState
      description: "Én av de <xref href=&quot;System.Data.DataViewRowState&quot;> </xref> verdier."
    return:
      type: System.Data.DataRow[]
      description: "En matrise av <xref href=&quot;System.Data.DataRow&quot;> </xref> objekter."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Site
  id: Site
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir en <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> for den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Områder binde en <xref:System.ComponentModel.Component>til en <xref:System.ComponentModel.Container>og aktivere kommunikasjon mellom dem, i tillegg gir mulighet for beholderen til å administrere komponentene.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.Data.DataTable>forekomsten endres til en <xref:System.ComponentModel.IListSource>grensesnittet.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en samling av samlingen <xref:System.Collections.IList>objekter; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.Data.DataTable>forekomsten endres til en <xref:System.ComponentModel.IListSource>grensesnittet.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "En <xref:System.Collections.IList>som kan være bundet til en datakilde fra objektet.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.Data.DataSet>forekomsten endres til en <xref:System.Xml.Serialization.IXmlSerializable>grensesnittet.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "En <xref:System.Xml.Schema.XmlSchema>som beskriver XML-representasjon av objektet som er generert av den <> </> *> metoden og forbrukes av den <> </> *> metode.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.Data.DataSet>forekomsten endres til en <xref:System.Xml.Serialization.IXmlSerializable>grensesnittet.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "En XmlReader."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "En beskrivelse for dette medlemmet under &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.Data.DataSet>forekomsten endres til en <xref:System.Xml.Serialization.IXmlSerializable>grensesnittet.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "En XmlWriter."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableCleared
  id: TableCleared
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inntreffer etter en <xref href=&quot;System.Data.DataTable&quot;> </xref> er fjernet."
  remarks: "Hendelsen TableCleared aktiveres umiddelbart etter at alle rader har blitt tømt men før den <xref:System.Data.DataTable.Clear%2A>metoden returnerer kontrollen til oppkalleren.</xref:System.Data.DataTable.Clear%2A> Hendelsen TableCleared aktiveres ikke hvis det finnes unntak under Fjern-operasjonen."
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableCleared;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableClearing
  id: TableClearing
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en <xref href=&quot;System.Data.DataTable&quot;> </xref> er fjernet."
  remarks: "TableClearing-hendelsen startes før behandling av den <xref:System.Data.DataTable.Clear%2A>operasjonen starter.</xref:System.Data.DataTable.Clear%2A> Denne hendelsen starter når alltid den <xref:System.Data.DataTable.Clear%2A>metoden startes, selv om tabellen inneholder ingen rader.</xref:System.Data.DataTable.Clear%2A>"
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableClearing;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableName
  id: TableName
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter eller angir navnet på den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Tabellnavnet til å returnere denne tabellen fra overordnet <xref:System.Data.DataSet>objektets <xref:System.Data.DataTableCollection>(returnert av den <xref:System.Data.DataSet.Tables%2A>egenskapen).</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> </xref:System.Data.DataSet>"
  example:
  - "The following example prints the TableName for each table in a collection of <xref:System.Data.DataTable> objects.  \n  \n [!code-cs[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/csharp/p-system.data.datatable._2_1.cs)]\n [!code-vb[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._2_1.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Navnet på den <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.TableName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>eller tom streng (&quot;&quot;) er sendt og denne tabellen tilhører en samling."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "Tabellen som tilhører en samling som allerede har en tabell med samme navn. (Sammenligningen skiller)."
  platform:
  - net462
- uid: System.Data.DataTable.TableNewRow
  id: TableNewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Forekommer når en ny <xref href=&quot;System.Data.DataRow&quot;> </xref> er satt inn."
  remarks: "Starter etter en ny <xref:System.Data.DataRow>har blitt opprettet <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Denne hendelsen starter før den `NewRow` metoden returnerer. Den nye <xref:System.Data.DataRow>forekomsten er frakoblet, er ikke lagt til i samlingen.</xref:System.Data.DataRow>"
  syntax:
    content: public event System.Data.DataTableNewRowEventHandler TableNewRow;
    return:
      type: System.Data.DataTableNewRowEventHandler
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ToString
  id: ToString
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Henter den <> </> *> og <> </> *>, hvis det finnes en som en sammenkoblet streng."
  remarks: "Henter den <xref:System.Data.DataTable.TableName%2A>, og <xref:System.Data.DataTable.DisplayExpression%2A> <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.DisplayExpression%2A> </xref:System.Data.DataTable.TableName%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the ToString method.  \n  \n [!code-cs[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datatable._28_1.cs)]\n [!code-vb[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._28_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "En streng som består av det <> </> *> og <> </> *> verdier."
  overload: System.Data.DataTable.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som dataene vil bli skrevet."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>som du kan skrive innholdet.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte filen."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen du vil skrive XML-dataene."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>som du kan skrive til innholdet.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.IO.Stream>.</xref:System.IO.Stream> Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. Å skrive data for den gjeldende tabellen, og alle etterkommer, relaterte tabeller, kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som dataene vil bli skrevet."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> til den angitte filen med det angitte <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som dataene vil bli skrevet."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. For å skrive data for den gjeldende tabellen og alle underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.  \n  \n [!code-cs[DataWorks DataTable.WriteXml#1](~/add/codesnippet/csharp/m-system.data.datatable._1_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._1_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>som du kan skrive innholdet.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.IO.TextWriter>og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>brukes til å skrive dokumentet.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  id: WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte filen. Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. Å skrive data for den gjeldende tabellen, og alle etterkommer, relaterte tabeller, kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Filen du vil skrive XML-dataene."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte filen og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen som dataene vil bli skrevet."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende innholdet i den <xref href=&quot;System.Data.DataTable&quot;> </xref> som XML med den angitte <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. For å skrive data for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>som du kan skrive til innholdet.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.Xml.XmlWriter>og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>brukes til å skrive dokumentet.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> til den angitte filen med det angitte <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en `DataTable` i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den `XmlWriteMode` parameteren og sette verdien `WriteSchema`.       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden lagrer data bare for den gjeldende tabellen. Den `WriteXml` metoden gir en måte å skrive data only, eller både data og skjema fra en `DataTable` i et XML-dokument, mens den `WriteXmlSchema` metoden skriver bare skjema. For å skrive data- og schema, Bruk overlastingene som inneholder den `XmlWriteMode` parameteren og sette verdien `WriteSchema`.       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. Å skrive data for den gjeldende tabellen, og alle etterkommer, relaterte tabeller, kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som dataene vil bli skrevet."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.IO.TextWriter>og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden lagrer data bare for den gjeldende tabellen. Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. Å skrive data for den gjeldende tabellen, og alle etterkommer, relaterte tabeller, kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/csharp/a21e26c1-61d0-4d79-88a3-_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/visualbasic/a21e26c1-61d0-4d79-88a3-_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n</NewDataSet>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n          <xs:element name=\"Table2\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"OrderID\" type=\"xs:int\" />  \n                <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n                <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n      <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" m  \nsdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"OrderID\" />  \n      </xs:unique>  \n      <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"CustomerID\" />  \n      </xs:keyref>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n  <Table2>  \n    <OrderID>1</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>2</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>3</OrderID>  \n    <CustomerID>2</CustomerID>  \n    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>4</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>5</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>6</OrderID>  \n    <CustomerID>4</CustomerID>  \n    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n</NewDataSet>  \n```"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>brukes til å skrive dokumentet.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte filen og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden lagrer data bare for den gjeldende tabellen. Hvis du vil lagre dataene for den gjeldende tabellen, og alle skjemaet, den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. For å skrive data for den gjeldende tabellen og alle underordnede, relaterte tabeller, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen som dataene vil bli skrevet."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende data og eventuelt skjemaet, for den <xref href=&quot;System.Data.DataTable&quot;> </xref> ved hjelp av den angitte <xref:System.Xml.XmlWriter>og <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> For å skrive skjemaet, kan du angi verdien for den <code> mode </code> parameter <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Hvis du vil lagre dataene for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Den <xref:System.Data.DataTable.WriteXml%2A>metoden gir en måte å skrive data only, eller både data og skjema fra en <xref:System.Data.DataTable>i et XML-dokument, mens den <xref:System.Data.DataTable.WriteXmlSchema%2A>metoden skriver bare skjema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> For å skrive data- og schema, Bruk overlastingene som inneholder den <xref:System.Data.XmlWriteMode>parameteren og sette verdien `WriteSchema`.</xref:System.Data.XmlWriteMode>       Merk at det samme gjelder for den <xref:System.Data.DataTable.ReadXml%2A>og <xref:System.Data.DataTable.ReadXmlSchema%2A>metoder, henholdsvis.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Kan lese XML-dataene, eller skjemaet og dataene i den `DataTable`, bruker den `ReadXml` metoden. Du kan lese bare skjemaet ved bruk av `ReadXmlSchema` metoden.       Vanligvis den `WriteXml` metoden skriver dataene bare for den gjeldende tabellen. For å skrive data for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`.      > [!NOTE] > En <xref:System.InvalidOperationException>vil bli utløst Hvis kolonnetype i den `DataRow` som lese fra eller skrive til implementerer <xref:System.Dynamic.IDynamicMetaObjectProvider>og implementerer ikke <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>brukes til å skrive dokumentet.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Én av de <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> verdier."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive til innholdet i den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive data for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema til den angitte strømmen."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som XML-skjemaet skrives."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema med den angitte <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>som du kan skrive.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema til den angitte filen."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen som skal brukes."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema med den angitte <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>skal brukes.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  id: WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema til den angitte strømmen. Hvis du vil lagre skjemaet for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>       Vanligvis den `WriteXmlSchema` metoden skriver skjemaet bare for den gjeldende tabellen. For å skrive inn skjemaet for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Dataflyten som XML-skjemaet skrives."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive skjemaet for den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive skjemaet for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  id: WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema med den angitte <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Hvis du vil lagre skjemaet for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>       Vanligvis den `WriteXmlSchema` metoden skriver skjemaet bare for den gjeldende tabellen. For å skrive inn skjemaet for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._30_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._30_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Ta  \nble1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n  </xs:element>  \n</xs:schema>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Table2\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" type=\"xs:int\" />  \n              <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n    <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"OrderID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Den <xref:System.IO.TextWriter>som du kan skrive.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive skjemaet for den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive skjemaet for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  id: WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema til den angitte filen. Hvis du vil lagre skjemaet for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>       Vanligvis den `WriteXmlSchema` metoden skriver skjemaet bare for den gjeldende tabellen. For å skrive inn skjemaet for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`."
  syntax:
    content: public void WriteXmlSchema (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Navnet på filen som skal brukes."
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive skjemaet for den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive skjemaet for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Skriver gjeldende datastrukturen for den <xref href=&quot;System.Data.DataTable&quot;> </xref> som et XML-skjema med den angitte <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> Hvis du vil lagre skjemaet for tabellen og alle underordnede, angitt i <code> writeHierarchy </code> parameter <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Bruk av <xref:System.Data.DataTable.WriteXmlSchema%2A>metode for å skrive til skjemaet for et <xref:System.Data.DataTable>til et XML-dokument.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Skjemaet inneholder tabell, relasjon og begrensningen definisjoner.       XML-skjemaet er skrevet med XSD-standard.       For å skrive data til en XML-dokumentet, kan du bruke den <xref:System.Data.DataTable.WriteXml%2A>metoden.</xref:System.Data.DataTable.WriteXml%2A>       Vanligvis den `WriteXmlSchema` metoden skriver skjemaet bare for den gjeldende tabellen. For å skrive inn skjemaet for den gjeldende tabellen og hele underordnede, relaterte tabellene, kan du kalle metoden med den `writeHierarchy` parameteren satt til `true`."
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Den <xref:System.Xml.XmlWriter>brukes til å skrive dokumentet.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Hvis <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, skrive skjemaet for den gjeldende tabellen og alle underordnede. Hvis <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (standardverdien) skrive skjemaet for den gjeldende tabellen."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataTable.#ctor
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
- uid: System.Data.DataTable.#ctor(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
- uid: System.Data.DataTable.AcceptChanges
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
- uid: System.Data.DataTable.BeginInit
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
- uid: System.Data.DataTable.BeginLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
- uid: System.Data.DataTable.CaseSensitive
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTable.ChildRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataTable.Clear
  parent: System.Data.DataTable
  isExternal: false
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
- uid: System.Data.DataTable.Clone
  parent: System.Data.DataTable
  isExternal: false
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTable.ColumnChanged
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
- uid: System.Data.DataColumnChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventHandler
  nameWithType: DataColumnChangeEventHandler
  fullName: System.Data.DataColumnChangeEventHandler
- uid: System.Data.DataTable.ColumnChanging
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
- uid: System.Data.DataTable.Columns
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
- uid: System.Data.DataColumnCollection
  parent: System.Data
  isExternal: false
  name: DataColumnCollection
  nameWithType: DataColumnCollection
  fullName: System.Data.DataColumnCollection
- uid: System.Data.DataTable.Compute(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataTable.Constraints
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
- uid: System.Data.ConstraintCollection
  parent: System.Data
  isExternal: false
  name: ConstraintCollection
  nameWithType: ConstraintCollection
  fullName: System.Data.ConstraintCollection
- uid: System.Data.DataTable.Copy
  parent: System.Data.DataTable
  isExternal: false
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
- uid: System.Data.DataTable.CreateDataReader
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataTable.CreateInstance
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
- uid: System.Data.DataTable.DataSet
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataTable.DefaultView
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
- uid: System.Data.DataView
  parent: System.Data
  isExternal: false
  name: DataView
  nameWithType: DataView
  fullName: System.Data.DataView
- uid: System.Data.DataTable.DisplayExpression
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
- uid: System.Data.DataTable.EndLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
- uid: System.Data.DataTable.ExtendedProperties
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataTable.fInitInProgress
  parent: System.Data.DataTable
  isExternal: false
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
- uid: System.Data.DataTable.GetChanges
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataTable.GetErrors
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataTable.GetRowType
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataTable.GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataTable.HasErrors
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataTable.Initialized
  parent: System.Data.DataTable
  isExternal: false
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataTable.IsInitialized
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
- uid: System.Data.DataTable.Locale
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataTable.MinimumCapacity
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable.Namespace
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
- uid: System.Data.DataTable.NewRow
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
- uid: System.Data.DataColumnChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventArgs
  nameWithType: DataColumnChangeEventArgs
  fullName: System.Data.DataColumnChangeEventArgs
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
- uid: System.Data.DataRowChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventArgs
  nameWithType: DataRowChangeEventArgs
  fullName: System.Data.DataRowChangeEventArgs
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
- uid: System.Data.DataTableClearEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableClearEventArgs
  nameWithType: DataTableClearEventArgs
  fullName: System.Data.DataTableClearEventArgs
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
- uid: System.Data.DataTableNewRowEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventArgs
  nameWithType: DataTableNewRowEventArgs
  fullName: System.Data.DataTableNewRowEventArgs
- uid: System.Data.DataTable.ParentRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataTable.ReadXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataTable.RejectChanges
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
- uid: System.Data.DataTable.RemotingFormat
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataTable.Reset
  parent: System.Data.DataTable
  isExternal: false
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
- uid: System.Data.DataTable.RowChanged
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
- uid: System.Data.DataRowChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventHandler
  nameWithType: DataRowChangeEventHandler
  fullName: System.Data.DataRowChangeEventHandler
- uid: System.Data.DataTable.RowChanging
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
- uid: System.Data.DataTable.RowDeleted
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
- uid: System.Data.DataTable.RowDeleting
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
- uid: System.Data.DataTable.Rows
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
- uid: System.Data.DataRowCollection
  parent: System.Data
  isExternal: false
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
- uid: System.Data.DataTable.Select
  parent: System.Data.DataTable
  isExternal: false
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
- uid: System.Data.DataTable.Select(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
- uid: System.Data.DataTable.Select(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
- uid: System.Data.DataViewRowState
  parent: System.Data
  isExternal: false
  name: DataViewRowState
  nameWithType: DataViewRowState
  fullName: System.Data.DataViewRowState
- uid: System.Data.DataTable.Site
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataTable.TableCleared
  parent: System.Data.DataTable
  isExternal: false
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
- uid: System.Data.DataTableClearEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableClearEventHandler
  nameWithType: DataTableClearEventHandler
  fullName: System.Data.DataTableClearEventHandler
- uid: System.Data.DataTable.TableClearing
  parent: System.Data.DataTable
  isExternal: false
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
- uid: System.Data.DataTable.TableName
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
- uid: System.Data.DataTable.TableNewRow
  parent: System.Data.DataTable
  isExternal: false
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
- uid: System.Data.DataTableNewRowEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventHandler
  nameWithType: DataTableNewRowEventHandler
  fullName: System.Data.DataTableNewRowEventHandler
- uid: System.Data.DataTable.ToString
  parent: System.Data.DataTable
  isExternal: false
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataTable.WriteXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
- uid: System.Data.DataTable.#ctor*
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable
  nameWithType: DataTable.DataTable
- uid: System.Data.DataTable.AcceptChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges
  nameWithType: DataTable.AcceptChanges
- uid: System.Data.DataTable.BeginInit*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit
  nameWithType: DataTable.BeginInit
- uid: System.Data.DataTable.BeginLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData
  nameWithType: DataTable.BeginLoadData
- uid: System.Data.DataTable.CaseSensitive*
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
- uid: System.Data.DataTable.ChildRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
- uid: System.Data.DataTable.Clear*
  parent: System.Data.DataTable
  isExternal: false
  name: Clear
  nameWithType: DataTable.Clear
- uid: System.Data.DataTable.Clone*
  parent: System.Data.DataTable
  isExternal: false
  name: Clone
  nameWithType: DataTable.Clone
- uid: System.Data.DataTable.Columns*
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
- uid: System.Data.DataTable.Compute*
  parent: System.Data.DataTable
  isExternal: false
  name: Compute
  nameWithType: DataTable.Compute
- uid: System.Data.DataTable.Constraints*
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
- uid: System.Data.DataTable.Copy*
  parent: System.Data.DataTable
  isExternal: false
  name: Copy
  nameWithType: DataTable.Copy
- uid: System.Data.DataTable.CreateDataReader*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader
  nameWithType: DataTable.CreateDataReader
- uid: System.Data.DataTable.CreateInstance*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance
  nameWithType: DataTable.CreateInstance
- uid: System.Data.DataTable.DataSet*
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
- uid: System.Data.DataTable.DefaultView*
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
- uid: System.Data.DataTable.DisplayExpression*
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit*
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit
  nameWithType: DataTable.EndInit
- uid: System.Data.DataTable.EndLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData
  nameWithType: DataTable.EndLoadData
- uid: System.Data.DataTable.ExtendedProperties*
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
- uid: System.Data.DataTable.GetChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges
  nameWithType: DataTable.GetChanges
- uid: System.Data.DataTable.GetDataTableSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema
  nameWithType: DataTable.GetDataTableSchema
- uid: System.Data.DataTable.GetErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors
  nameWithType: DataTable.GetErrors
- uid: System.Data.DataTable.GetObjectData*
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData
  nameWithType: DataTable.GetObjectData
- uid: System.Data.DataTable.GetRowType*
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType
  nameWithType: DataTable.GetRowType
- uid: System.Data.DataTable.GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema
  nameWithType: DataTable.GetSchema
- uid: System.Data.DataTable.HasErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow*
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow
  nameWithType: DataTable.ImportRow
- uid: System.Data.DataTable.IsInitialized*
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
- uid: System.Data.DataTable.Load*
  parent: System.Data.DataTable
  isExternal: false
  name: Load
  nameWithType: DataTable.Load
- uid: System.Data.DataTable.LoadDataRow*
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow
  nameWithType: DataTable.LoadDataRow
- uid: System.Data.DataTable.Locale*
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
- uid: System.Data.DataTable.Merge*
  parent: System.Data.DataTable
  isExternal: false
  name: Merge
  nameWithType: DataTable.Merge
- uid: System.Data.DataTable.MinimumCapacity*
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
- uid: System.Data.DataTable.Namespace*
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
- uid: System.Data.DataTable.NewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow
  nameWithType: DataTable.NewRow
- uid: System.Data.DataTable.NewRowArray*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray
  nameWithType: DataTable.NewRowArray
- uid: System.Data.DataTable.NewRowFromBuilder*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder
  nameWithType: DataTable.NewRowFromBuilder
- uid: System.Data.DataTable.OnColumnChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged
  nameWithType: DataTable.OnColumnChanged
- uid: System.Data.DataTable.OnColumnChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging
  nameWithType: DataTable.OnColumnChanging
- uid: System.Data.DataTable.OnPropertyChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataTable.OnPropertyChanging
- uid: System.Data.DataTable.OnRemoveColumn*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn
  nameWithType: DataTable.OnRemoveColumn
- uid: System.Data.DataTable.OnRowChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged
  nameWithType: DataTable.OnRowChanged
- uid: System.Data.DataTable.OnRowChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging
  nameWithType: DataTable.OnRowChanging
- uid: System.Data.DataTable.OnRowDeleted*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted
  nameWithType: DataTable.OnRowDeleted
- uid: System.Data.DataTable.OnRowDeleting*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting
  nameWithType: DataTable.OnRowDeleting
- uid: System.Data.DataTable.OnTableCleared*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared
  nameWithType: DataTable.OnTableCleared
- uid: System.Data.DataTable.OnTableClearing*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing
  nameWithType: DataTable.OnTableClearing
- uid: System.Data.DataTable.OnTableNewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow
  nameWithType: DataTable.OnTableNewRow
- uid: System.Data.DataTable.ParentRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix*
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey*
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
- uid: System.Data.DataTable.ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml
  nameWithType: DataTable.ReadXml
- uid: System.Data.DataTable.ReadXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataTable.ReadXmlSchema
- uid: System.Data.DataTable.ReadXmlSerializable*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataTable.ReadXmlSerializable
- uid: System.Data.DataTable.RejectChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges
  nameWithType: DataTable.RejectChanges
- uid: System.Data.DataTable.RemotingFormat*
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
- uid: System.Data.DataTable.Reset*
  parent: System.Data.DataTable
  isExternal: false
  name: Reset
  nameWithType: DataTable.Reset
- uid: System.Data.DataTable.Rows*
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
- uid: System.Data.DataTable.Select*
  parent: System.Data.DataTable
  isExternal: false
  name: Select
  nameWithType: DataTable.Select
- uid: System.Data.DataTable.Site*
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataTable.TableName*
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
- uid: System.Data.DataTable.ToString*
  parent: System.Data.DataTable
  isExternal: false
  name: ToString
  nameWithType: DataTable.ToString
- uid: System.Data.DataTable.WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml
  nameWithType: DataTable.WriteXml
- uid: System.Data.DataTable.WriteXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataTable.WriteXmlSchema
