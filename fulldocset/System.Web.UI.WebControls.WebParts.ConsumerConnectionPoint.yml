### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Definerer en connection point-objektet som aktiverer en serverkontroll fungerer som forbruker å utgjøre en tilkobling til en leverandør."
  remarks: "Hver webdeler tilkobling mellom to serverkontroller må hver kontroll ha (blant andre krav) en tilknyttet tilkobling punkt-objekt som gjør det mulig å koble til den andre kontrollen, og for å angi eller bruke data, avhengig av om kontrollen er angitt som leverandøren eller forbrukeren for tilkoblingen. En <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objektet Generelt inneholder detaljer om hvordan en kontroll kan koble til en annen kontroll og datatypen kan dele.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Tilkoblingspunktet må være et ConsumerConnectionPoint-objekt for en kontroll som fungerer som forbrukeren i en tilkobling. For informasjon om webdeler lese tilkoblinger og tilkobling punkt emnene i Se også delen nedenfor.       Flere trinn kreves for å opprette et ConsumerConnectionPoint-objekt: 1.  Aktiver en forbrukeren kontrollen referere til en grensesnittet-forekomst. En <xref:System.Web.UI.WebControls.WebParts.WebPart>eller andre serverkontroll (alle typer serverkontroll som blir lagt til en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>sone kan brukes) må kunne bruke data fra en bestemt grensesnitt-forekomst.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Kontrollen må ikke implementere grensesnittet; bare leverandøren må implementere den. Brukeren kan enten arbeide med nøyaktige grensesnittype som er behandlet av en leverandør eller, hvis ikke, en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet kan brukes til å gjøre dataene fra en leverandør grensesnittype til en type forstått av forbrukeren.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Vanlig måte å aktivere en forbruker, er å deklarere et private felt inneholder en referanse til den ønskede grensesnittypen.      2.  Angi en tilbakeringing-metode. En metode i forbrukeren må være identifisert som metoden tilbakeringing for å opprette en tilkobling til leverandøren. Denne metoden henter en forekomst av grensesnitt som leverandøren implementerer og tilordner den til (for eksempel) private feltet som er opprettet i første trinn. Tilnærmingen webdeler for å identifisere en tilbakeringing-metoden i forbrukeren er å legge til en `ConnectionConsumer` metadataattributt (definert av den <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klassen) til metoden som mottar grensesnittet-forekomsten.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Når attributtet er lagt til, er bare nødvendige parameteren et visningsnavn skal brukes for tilkoblingspunktet for brukeren. Valgfrie parametere kan også legges til, for eksempel en ID.      3.  Behandle, og sender dataene fra grensesnittet-forekomst. Utføre en intern behandling etter behov på dataene, og deretter vanligvis en Forbrukerkontroll vil føre til at dataene på siden. Er en vanlig måte å gjøre dette til å overstyre kontrollens <xref:System.Web.UI.Control.OnPreRender%2A>metode.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Under synkron forespørsel, en forbruker skal be om data direkte fra leverandøren under eller umiddelbart etter at den <xref:System.Web.UI.Control.PreRender>hendelsen.</xref:System.Web.UI.Control.PreRender> Under en asynkron forespørsel om leverandørens tilbakeringing metoden ikke er kalles når som helst under gjengivelse, kan utvikleren ha at ingen data ble sendt til brukeren.       Når en kontroll har blitt forutsetninger for å utføre en handling som forbruker, kan kontrollen kobles sammen (forutsatt at leverandøren kontrollen er også stand og tilgjengelig). Hvis du vil opprette en statisk, deklarerende tilkobling i koden for en webside, utviklere kan bruke den `<asp:webpartconnection>` elementet. Hvis den `ConnectionConsumer` attributt i forbrukeren kildekode som identifiserer metoden tilbakeringing angir en ID for tilkoblingspunktet og denne verdien må være tilordnet til den `ConsumerConnectionPointID` attributt i den `<asp:webpartconnection>` element på en side. En årsak for at en utvikler kan angi en ID for et forbrukeren connection point er hvis det er flere tilkoblingen punkt som er definert i forbrukeren kontrollen. Hvis en ID ikke er angitt for forbrukstilkoblingspunktet forbrukeren kontrollens, har ikke en verdi som skal tilordnes til det `ConsumerConnectionPointID` attributt på denne siden, fordi tilkoblingen vil bli opprettet med en standardverdi som er hentet fra den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>felt.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Hvis du vil opprette en tilkobling i koden, må utviklere opprette et nytt objekt ConsumerConnectionPoint ved å kalle den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metoden og sende til den ID sammen med ID eller indeksen for definerte ConsumerConnectionPoint objektet forbrukeren kontrollens kontrollen forbrukeren.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Det returnerte ConsumerConnectionPoint-objektet, sammen med en referanse til kontrollen forbrukeren, en referanse til kontrollen leverandør og en tilsvarende <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt, blir alle sendt til den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metode for å opprette en ny <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Men utviklere kan bruke forbrukeren tilkoblingen punkt som en del av oppretter tilkoblinger deklarativt eller programmatisk, kan brukere også samhandle med forbrukeren tilkoblingen peker til å opprette tilkoblinger via brukergrensesnittet (UI). Hvis utviklere deklarere en <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll på en webside det gir en kjøretid Brukergrensesnittet for brukere å opprette tilkoblinger.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Hvis brukere velger leverandøren kontrollen som utgangspunkt for oppretting av tilkoblingen ved å klikke den koble verb (de kan også velge forbrukeren; det er ingen forskjell i den resulterende tilkoblingen), i Brukergrensesnittet kommentarene rullegardinlistekontroll med visningsnavnet for tilgjengelig forbrukeren tilkoblingen punkt (eller punkt hvis det finnes flere dem) som leverandøren kan sende data til. Brukerne må velge et forbrukeren connection point å opprette en tilkobling.       Et objekt for ConsumerConnectionPoint knytter direkte til en bestemt Forbrukerkontroll og lagrer detaljer om en tilkobling i egenskapene for den arver fra base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> I for eksempel arvet <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>egenskapen tilkoblingspunktet en forbruker beholder typen grensesnitt den bruker.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Hvis begge forstår grensesnittypen leverandør og forbrukeren i en tilkobling, er kontrollene kompatible og kan utgjør en direkte tilkobling. Hvis leverandør og forbrukeren ikke virker med den samme grensesnittypen, de er kompatible og må bruke en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet som oversettes leverandøren for tilkoblingspunktet <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>egenskapen til en type som brukeren kan arbeide med.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> En annen viktig arvede egenskapen den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>egenskap, som gir et egendefinert navn skal vises i Brukergrensesnittet for brukere å velge en forbrukeren tilkobling peke når du oppretter tilkoblinger.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Visningsnavnet er den obligatoriske parameteren når utviklere legger til en `ConnectionConsumer` attributt til tilbakeringing-metoden i en Forbrukerkontroll. Arvet <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>er også nyttig, slik det er angitt ovenfor, fordi den inneholder en unik identifikator for et forbrukeren connection point som en forbruker har flere tilkoblingen punkter.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> En forbruker kan ha flere ConsumerConnectionPoint-objekter som er definert i den, og i dette tilfellet når utviklere legger til den `ConnectionConsumer` attributtet de bør angi ID-verdien for å skille hver tilkoblingspunktet til en metode. En annen viktige arvede-egenskap er den <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>egenskapen som indikerer om et forbrukeren connection point kan koble samtidig til flere leverandører.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> En verdi for denne egenskapen er `false` som standard for forbrukeren tilkoblingen punkt (mens brukes som standard `true` for leverandøren tilkoblingen punkt).       Klassen ConsumerConnectionPoint legger til flere unike metoder for medlemmene som arver fra <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>metoden aktiverer metoden forbrukeren egen definert tilbakeringing for å hente grensesnittet forekomsten av leverandøren.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>metoden returnerer en boolsk verdi som angir om tilkoblingspunktet er i stand til å opprette tilkoblinger, basert på gjeldende status for den tilknyttede forbruker kontrollen.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> klasse."
  remarks: "Konstruktøren ConsumerConnectionPoint for <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klassen kaller ganske enkelt base konstruktøren, sende til den forskjellige parametere og initialiserer base klassen.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Basisklassen konstruktøren kontrollerer et antall parametere for et connection point, og kan iverksette flere unntak. En liste over mulige unntak, kan du se delen unntak.       Du kan ringe konstruktøren ConsumerConnectionPoint for å opprette en forekomst av <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klassen.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Imidlertid i tilfeller der du er ganske enkelt å opprette en tilkobling og utvider ikke klassen, må du først kalle den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metode til å returnere en connection point-objektet fra en leverandør.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Metoden forbrukeren kontrollens som returnerer en grensesnittet forekomst til forbrukerne til å opprette en tilkobling."
    - id: interfaceType
      type: System.Type
      description: "Den <xref:System.Type>grensesnittet forbrukeren mottar fra en leverandør.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "Den <xref:System.Type>av forbrukeren kontrollen som er tilknyttet tilkoblingspunktet forbrukeren.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Et egendefinert navn for tilkoblingspunktet forbrukeren som vises for brukere i tilkoblingen-brukergrensesnittet (UI)."
    - id: id
      type: System.String
      description: "En unik identifikator for tilkoblingspunktet for brukeren."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "En boolsk verdi som angir om tilkoblingspunktet forbrukeren kan ha flere samtidige tilkoblinger leverandører."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>er ikke av samme type som forbruker-kontrollen (eller en gyldig klasse som er avledet fra den)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Aktiverer tilbakeringing-metoden i en Forbrukerkontroll og henter grensesnittet forekomsten fra en leverandør-kontroll."
  remarks: "Denne metoden mottar en grensesnittet forekomst fra en leverandør som inneholder data for de forbrukeren-kontrollen.       Metoden SetObject kalles av <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objekter når en tilkobling blir aktivert.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Dette er et viktig trinn som en del av initialisere en tilkobling og aktivere to kontroller å dele data.       Forbrukeren kontrollen i en tilkobling må være kan arbeide med den samme typen grensesnittet som leverandøren. Hvis ikke, kontrollene er inkompatible og en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet må brukes til å opprette en tilkobling.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Forbrukeren kontrollen som er forbundet med et forbrukeren connection point."
    - id: data
      type: System.Object
      description: "Grensesnittet forekomsten ble returnert fra en leverandør-kontroll."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Bestemmer om tilkoblingspunktet en forbruker, er for øyeblikket kan opprette en tilkobling."
  remarks: "Metoden SupportsConnection som implementert alltid returnerer `true` i alle tilfellene for <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Meningen for denne metoden er at den skal se på tilstanden til `control` og `secondaryInterfaces` på bestemte kritiske tidspunkter å finne ut om en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet er for øyeblikket kan opprette en tilkobling.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Det kan være scenarioer der `control` i en tilstand som kan gjøre det mulig å opprette en tilkobling eller hvor `secondaryInterfaces` må finnes før en tilkobling kan utformes. I slike tilfeller utviklere kan arve fra den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse, og overstyre metoden SupportsConnection gir en egendefinert implementering for å finne ut når tilkoblingspunktet er klar til å støtte tilkoblinger.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Forbrukeren kontrollen som er tilknyttet den <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> for alle sekundære grensesnitt som deltar i en tilkobling."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis et connection point for øyeblikket kan opprette en tilkobling; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
