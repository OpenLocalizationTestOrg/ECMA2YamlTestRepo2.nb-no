### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Administrerer stakk gå som bestemmer om alle brukere i kallstakken har de nødvendige tillatelsene til å åpne en beskyttet ressurs."
  remarks: "Delvis klarert kode er alltid en sikkerhetsrisiko. Det kan noen ganger redigeres for å utføre handlinger på vegne av skadelig kode som ikke har tilgang til en ressurs. På denne måten kan skadelig kode oppnå høyere sikkerheten for tilgang enn skal være tillatt.       Common language runtime beskytter forvaltet kode fra disse angrep ved å kjøre en stakk gå på alle samtaler. Stakk gå krever at all kode i kallstakken har tilgang til en beskyttet ressurs. Fordi koden prøver angrepet vil alltid være et eller annet sted i kallstakken, kan den ikke overskride sin egen sikkerhetstillatelser."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Deklarasjoner at kall koden har tilgang til ressursen identifisert av gjeldende tillatelse-objekt, selv om brukere høyere i stakken ikke har fått tillatelse til å få tilgang til ressursen."
  remarks: "Kaller deklarering stopper tillatelse se på brukere som er høyere i kallstakken. Derfor selv om disse brukere ikke har rettighetene som kreves, kan fortsatt tilgang til ressurser. En deklarasjon virker bare hvis koden som kaller deklarering går gjennom sikkerhetskontrollen for tillatelsen som den er asserting.       Et kall til deklarering virker til kall koden Returner til oppringeren eller til et etterfølgende kall til deklarering gjengir tidligere deklarasjon ineffektiv. Også <xref:System.Security.CodeAccessPermission.RevertAssert%2A>eller <xref:System.Security.CodeAccessPermission.RevertAll%2A>fjerner en ventende deklarering.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Deklarer ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes. Imidlertid Hvis kaller koden lavere i kallstakken <xref:System.Security.IStackWalk.Demand%2A>for denne tillatelsen en <xref:System.Security.SecurityException>forårsakes når stakk gå når kode som prøvde å ringe deklarering.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Dette skjer fordi koden som kalles deklarering ikke har blitt gitt tillatelse, selv om den prøvde å Deklarer den.      > [!CAUTION] > Fordi kaller deklarering fjerner kravet at all kode i kall-kjede må gis tilgang til den angitte ressursen, som kan åpnes av sikkerhetsproblemer hvis brukt feil eller feil måte. Den bør derfor brukes med fantastiske forsiktig."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Kall koden har ikke <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Bestemmer ved kjøretid om alle brukere i kallstakken har tillatelsen angitt av det gjeldende tillatelse-objektet."
  remarks: "Denne metoden brukes vanligvis av sikre libraries slik at brukere får tilgang til en ressurs. For eksempel en klasse med filen i et Klassebibliotek for sikker kaller behov for nødvendige <xref:System.Security.Permissions.FileIOPermission>før du utfører filoperasjonen en som ble forespurt av oppkalleren.</xref:System.Security.Permissions.FileIOPermission>       Tillatelsene for koden som kaller opp denne metoden undersøkes ikke; sjekken begynner fra umiddelbar oppkalleren for denne koden og fortsetter av bunken. Behov lykkes bare hvis ingen <xref:System.Security.SecurityException>oppstår.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "En oppringer høyere i kallstakken har ikke tillatelse angitt av det gjeldende tillatelse-objektet.       - eller - oppkalleren i kallet bunke har kalt <xref:System.Security.IStackWalk.Deny*>for gjeldende tillatelse-objektet.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gjør at hver <xref:System.Security.IStackWalk.Demand*>for det gjeldende objektet går gjennom prefiks mislykkes.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Denne metoden hindrer at brukere høyere i kallstakken tilgang til beskyttet ressursen kode som kaller denne metoden, selv om disse brukere har fått tilgang til den. Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken.       Nekt kan begrense ansvaret i programmer eller forhindre utilsiktet sikkerhetsproblemer fordi den hindrer metoden som kaller Deny brukes til å få tilgang til ressursen som er beskyttet av nektet tilgang. Hvis du kaller en metode som skal avslås på en tillatelse, og hvis en <xref:System.Security.IStackWalk.Demand%2A>for denne tillatelsen startes av en oppringer lavere i kallstakken, som sikkerhetskontrollen mislykkes når du avslå.</xref:System.Security.IStackWalk.Demand%2A>       Avslå ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gjør at hver <xref:System.Security.IStackWalk.Demand*>for alle objekter, men den gjeldende som går gjennom prefiks mislykkes, selv om koden høyere i kallstakken har fått tilgang til andre ressurser.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly ligner <xref:System.Security.IStackWalk.Deny%2A>, ved at både føre til at stakk hjelper mislykkes når de vil ellers lykkes.</xref:System.Security.IStackWalk.Deny%2A> Forskjellen er at <xref:System.Security.IStackWalk.Deny%2A>angir tillatelser som vil føre til at stakken vise mislykkes, men PermitOnly angir bare tillatelser som gir stakk gå mislykkes.</xref:System.Security.IStackWalk.Deny%2A> Kalle denne metoden for å sikre at koden kan brukes til å få tilgang til de angitte ressursene.       PermitOnly ignoreres for en tillatelse ikke gitt fordi et behov for å få denne tillatelsen ikke vil lykkes. Men hvis kode lavere til samtalen stable senere kall <xref:System.Security.IStackWalk.Demand%2A>for denne tillatelsen en <xref:System.Security.SecurityException>forårsakes når stakk gå når kode som prøvde å ringe PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Dette er fordi koden som kalles PermitOnly ikke har blitt gitt tillatelse, selv om den kalles PermitOnly for denne tillatelsen. Kallstakken representeres vanligvis som voksende ned, slik at metoder høyere i kallstakken kalle metoder lavere i kallstakken."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
