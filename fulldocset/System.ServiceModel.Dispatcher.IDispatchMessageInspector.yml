### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  id: IDispatchMessageInspector
  children:
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  langs:
  - csharp
  name: IDispatchMessageInspector
  nameWithType: IDispatchMessageInspector
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  type: Interface
  summary: "Definerer metodene som aktiverer egendefinert inspection eller endring av innkommende og utgående meldinger i tjenesteprogrammer."
  remarks: "Implementere IDispatchMessageInspector for å kontrollere eller endre innkommende og utgående programmet meldinger enten før sending av en forespørselsmelding for en operasjon eller før den returnerer en svarmelding til en oppringer. Det finnes et stort antall tilfeller som krever avskjærer meldinger før aktivering av operasjonen som er den skal. Du kan for eksempel logger innkommende programmet meldinger eller utføre noen funksjoner som er basert på en meldingshodet.       Vanligvis meldingen inspeksjoner blir satt inn av tjenestevirkemåte (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>), en endpoint virkemåte (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>), eller kontrakten virkemåte (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>).</xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName> Virkemåten legger deretter kontrolløren melding til den <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName>samlingen.</xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> Du finner mer informasjon om utvider kjøretiden ved hjelp av virkemåter [utvider ServiceHost og tjenesten modellen laget](~/add/includes/ajax-current-ext-md.md).      - <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>Metoden aktiverer egendefinert virkemåte etter mottak av meldingen, men før sending til den angitte operasjonen.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>      - <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>Metoden aktiverer egendefinert virkemåte etter operasjonen returnerer, men før svaret sendes.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!NOTE] > IDispatchMessageInspector objektene kalles alltid på samme punkt under sending av melding uansett om en operasjon er enveis eller forespørsel-svar."
  example:
  - "The following code example shows a basic IDispatchMessageInspector that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`IDispatchMessageInspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`IDispatchMessageInspector.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IDispatchMessageInspector
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  id: AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Kalles når en innkommende melding er mottatt men før er meldingen sendt til den angitte operasjonen."
  remarks: "Bruk AfterReceiveRequest-metoden til å kontrollere eller endre den innkommende meldingen, klienten kanalen som angitt, og gjeldende tjenesteforekomsten. Verdien som returneres kan være et objekt som du vil bruke for korrelasjonsformål. Det returneres til deg som den `correlationState` parameter i den <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>metoden.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>      > [!IMPORTANT] > Du kan ikke bruke meldingsteksten i meldingen med mindre du buffer hele meldingen, og lage en kopi. Hvis du gjør dette, må du gjøre to kopier av meldingen: én skal undersøkes, og den andre til å skrive over den `request` parameteren."
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: request
      type: System.ServiceModel.Channels.Message
      description: "Forespørselsmeldingen."
    - id: channel
      type: System.ServiceModel.IClientChannel
      description: "Innkommende kanal."
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Gjeldende tjenesteforekomsten."
    return:
      type: System.Object
      description: "Objektet som ble brukt til å koordinere tilstand. Dette objektet er sendt tilbake i den <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>metoden.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  id: BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  langs:
  - csharp
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Kalles når operasjonen har returnert, men før svaret meldingen sendes."
  remarks: "Bruk BeforeSendReply-metoden til å utføre egendefinert virkemåte før sending av return melding. Den `correlationState` er objektet som ble returnert av <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>metode som du kan bruke til å utføre korrelasjonen mellom innkommende og utgående kall til støtter din virkemåte.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A>"
  example:
  - "The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.  \n  \n [!code-vb[Interceptors#7](~/add/codesnippet/visualbasic/interceptors.client/interceptors.vb#7)]\n [!code-cs[Interceptors#7](~/add/codesnippet/csharp/interceptors.client/interceptors.cs#7)]  \n  \n The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=fullName> collection.  \n  \n [!code-vb[Interceptors#8](~/add/codesnippet/visualbasic/interceptors.client/insertingbehaviors.vb#8)]\n [!code-cs[Interceptors#8](~/add/codesnippet/csharp/interceptors.client/insertingbehaviors.cs#8)]  \n  \n The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);
    parameters:
    - id: reply
      type: System.ServiceModel.Channels.Message
      description: "Svarmelding. Denne verdien er null hvis operasjonen én måte."
    - id: correlationState
      type: System.Object
      description: "Korrelasjons-objektet som ble returnert av <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>metode.</xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*>"
  overload: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message,IClientChannel,InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IClientChannel
  parent: System.ServiceModel
  isExternal: true
  name: IClientChannel
  nameWithType: IClientChannel
  fullName: System.ServiceModel.IClientChannel
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply(Message,Object)
  nameWithType: IDispatchMessageInspector.BeforeSendReply(Message,Object)
  fullName: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message,Object)
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: AfterReceiveRequest
  nameWithType: IDispatchMessageInspector.AfterReceiveRequest
- uid: System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply*
  parent: System.ServiceModel.Dispatcher.IDispatchMessageInspector
  isExternal: false
  name: BeforeSendReply
  nameWithType: IDispatchMessageInspector.BeforeSendReply
