### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Støtter veksle en <xref:System.String>objekt og lese enkelttegn.</xref:System.String> Denne klassen kan ikke arves."
  remarks: "En CharEnumerator gir lesetilgang tegn i en refererte <xref:System.String>objektet.</xref:System.String> For eksempel den `foreach` -setningen for de Microsoft Visual Basic og C# programmeringsspråkene, som går gjennom elementene i en samling, henter CharEnumerator fra en <xref:System.String>objekt for å gå gjennom tegnene i dette objektet.</xref:System.String>       Det er ingen offentlig konstruktør for CharEnumerator. Kall i stedet en <xref:System.String>objektets <xref:System.String.GetEnumerator%2A>metode for å hente en CharEnumerator er initialisert en referanse til en streng.</xref:System.String.GetEnumerator%2A> </xref:System.String>       En CharEnumerator opprettholder en intern indeks tegn i strengen CharEnumerator-referanser. Status for indeksen er ugyldig når den refererer til en tegnposisjonen logisk før det første tegnet eller etter det siste tegnet i strengen og gyldig når den refererer til et tegn i strengen. Indeksen er initialisert til en plassering logisk før det første tegnet, og er satt til en plassering etter det siste tegnet når gjentakelsen er fullført. Et unntak hvis du prøver å få tilgang til et tegn mens indeksen er ugyldig.       Den <xref:System.CharEnumerator.MoveNext%2A>metoden øker indeksen for ett, slik at de første og etterfølgende tegnene åpnes igjen.</xref:System.CharEnumerator.MoveNext%2A> Den <xref:System.CharEnumerator.Reset%2A>metoden angir indeksen til en plassering logisk før det første tegnet.</xref:System.CharEnumerator.Reset%2A> Den <xref:System.CharEnumerator.Current%2A>egenskapen henter tegnet for øyeblikket refererer til indeksen.</xref:System.CharEnumerator.Current%2A> Den <xref:System.CharEnumerator.Clone%2A>metoden opprettes en kopi av CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > Flere uavhengige forekomster av CharEnumerator på tvers av én eller flere tråder kan ha tilgang til en enkelt forekomst av <xref:System.String>.</xref:System.String> Denne klassen er implementert for å støtte av <xref:System.Collections.IEnumerator>grensesnittet.</xref:System.Collections.IEnumerator> Du finner mer informasjon om bruk av en opplisting av <xref:System.Collections.IEnumerator>emnet.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Oppretter en kopi av gjeldende <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet."
  remarks: "Verdien som returneres er en kopi av denne forekomsten av <xref:System.CharEnumerator>og den gjeldende tilstanden.</xref:System.CharEnumerator> Dette er nyttig for å lagre delstaten under gjentakelse en <xref:System.String>objektet.</xref:System.String>       Eksempel: Programmet bruker en opprinnelige forekomsten for <xref:System.CharEnumerator>å gå gjennom hvert tegn i en <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator> Når det oppstår noen unike tegn, programmet stopper behandling og aktiverer klone-metoden. I kraft lagrer denne <xref:System.CharEnumerator>objektets indeksen i <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator>       Programmet bruker klone til å navigere til en annen del av den `String` å utføre noen ekstra behandling. Side-effekten av denne navigasjon er klone mister spor for plasseringen der behandlingen stoppet. Imidlertid når Aux behandling er fullført, programmet i klone, forkastes og bruker opprinnelig <xref:System.CharEnumerator>forekomsten du vil fortsette å arbeide med den <xref:System.String>der opprinnelige behandlingen stoppet.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Denne metoden er implementert for å støtte av <xref:System.ICloneable>grensesnittet.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "En <xref:System.Object>som en kopi av gjeldende <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Henter som er referert til tegnet i strengen listes opp av dette <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet."
  remarks: "Den <xref:System.CharEnumerator>klassen beholder en intern indeks nummererte strengen, og den gjeldende egenskapen returnerer tegnet som refereres til av indeksen.</xref:System.CharEnumerator> Denne egenskapen kan aktiveres bare når indeksen er ugyldig. Ellers unntak et.       Indeksen er alltid ugyldig for en tom streng (&quot;&quot;). Indeksen er også ugyldig etter den <xref:System.String.GetEnumerator%2A?displayProperty=fullName>eller <xref:System.CharEnumerator.Reset%2A>-metoden.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> Når en av disse metodene kalles, kan du aktivere den <xref:System.CharEnumerator.MoveNext%2A>metode til å justere indeksen til det første tegnet i nummererte strengen.</xref:System.CharEnumerator.MoveNext%2A> Indeksen er ugyldig når den <xref:System.CharEnumerator.MoveNext%2A>metoden returnerer `true`.</xref:System.CharEnumerator.MoveNext%2A>       Gjeldende ikke flytte indeksen, og etterfølgende kall til gjeldende returnere samme tegnet før <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, eller <xref:System.String.GetEnumerator%2A?displayProperty=fullName>kalles.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "Unicode-tegn som er referert til av dette <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Indeksen er ugyldig. Det er det vil si før først eller etter det siste tegnet på nummererte strengen."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Frigir alle ressursene som brukes av den gjeldende forekomsten av den <xref href=&quot;System.CharEnumerator&quot;> </xref> klasse."
  remarks: "Kall avhending når du er ferdig med <xref:System.CharEnumerator>.</xref:System.CharEnumerator> Fjerningsmetoden forlater den <xref:System.CharEnumerator>i en ubrukelig tilstand.</xref:System.CharEnumerator> Etter å avhending, må du frigi alle referanser til den <xref:System.CharEnumerator>Slik saneringsoppsamlingen kan gjenvinne minnet som den <xref:System.CharEnumerator>ble bruker.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       Hvis du vil ha mer informasjon, se [Rydder opp uforvaltede ressurser](~/add/includes/ajax-current-ext-md.md) og [implementere metoden fjerne](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid kall fjerne før du slipper siste referanse til <xref:System.CharEnumerator>.</xref:System.CharEnumerator> Ellers ressurser den bruker vil ikke bli frigjort før saneringsoppsamling kall av <xref:System.CharEnumerator>objektets `Finalize` metode.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Øker intern indeksen for gjeldende <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet til det neste tegnet på nummererte strengen."
  remarks: "Den <xref:System.CharEnumerator>klassen opprettholder en intern indeks nummererte strengen, og metoden MoveNext øker indeksen av en.</xref:System.CharEnumerator> Kall MoveNext etter kall <xref:System.String.GetEnumerator%2A>eller <xref:System.CharEnumerator.Reset%2A>skal økes gjeldende tegnposisjonen til det første tegnet i nummererte strengen.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Kontroller at verdien som returneres `true` til å fastslå at gjeldende tegnposisjonen er ugyldig.       Hvis du allerede indeksen er utenfor det siste tegnet i nummererte strengen, endres ikke indeksen og `false` returneres.       Legg merke til at hvis nummererte strengen er tom (&quot;&quot;), tilstand for den <xref:System.CharEnumerator>alltid er ugyldig.</xref:System.CharEnumerator> Fordi intern indeksen for den <xref:System.CharEnumerator>er opprinnelig før det første tegnet i nummererte strengen og er derfor ugyldig.</xref:System.CharEnumerator> MoveNext angir logisk indeksen etter siste (ikke-eksisterende) tegn nummererte strengen som også er ugyldig."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis indeksen økes ble og i nummererte strengen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Initialiserer indeks til en plassering logisk før det første tegnet i nummererte strengen."
  remarks: "Den <xref:System.CharEnumerator>klassen opprettholder en intern indeks nummererte strengen, og metoden tilbakestilling angir indeksen til en ugyldig tilstand.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Henter som er referert til tegnet i strengen listes opp av dette <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet. En beskrivelse for dette medlemmet under &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Dette medlemmet er implementering eksplisitt grensesnitt medlem. Den kan brukes bare når den <xref:System.CharEnumerator>forekomsten endres til en <xref:System.Collections.IEnumerator>grensesnittet.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Boks Unicode-tegn som er referert til av dette <xref href=&quot;System.CharEnumerator&quot;> </xref> objektet."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Opplisting er ikke startet.       - eller - opplisting er avsluttet."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
