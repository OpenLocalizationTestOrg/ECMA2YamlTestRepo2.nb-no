### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "Representerer teksten som skal holdes konfidensiell, for eksempel ved å slette den fra minnet når du trenger ikke lenger. Denne klassen kan ikke arves."
  remarks: "SecureString er en streng som inneholder et mål for sikkerhet. Prøver å unngå å lagre potensielt sensitiv strenger i prosessminnet som ren tekst.  (For begrensninger, men du se den [hvor sikre er SecureString?](#HowSecure) delen.) Verdien for en forekomst av SecureString beskyttes automatisk ved hjelp av en metode som støttes av den underliggende plattformen når forekomsten er initialisert, eller når verdien er endret. Programmet kan gjengi forekomsten uforanderlig og hindre ytterligere redigering ved å bruke den <xref:System.Security.SecureString.MakeReadOnly%2A>metoden.</xref:System.Security.SecureString.MakeReadOnly%2A>       Den maksimale lengden på en forekomst av typen SecureString er 65 536 tegn.      > [!IMPORTANT] > Denne typen implementerer den <xref:System.IDisposable>grensesnittet.</xref:System.IDisposable> Når du er ferdig med en forekomst av typen, må du fjerne den direkte eller indirekte. Hvis du vil fjerne av typen direkte, kan du kalle den <xref:System.IDisposable.Dispose%2A>metoden i en `try` / `catch` blokken.</xref:System.IDisposable.Dispose%2A> Hvis du vil fjerne den indirekte, bruke et språk som `using` (i C#) eller `Using` (i Visual Basic). For mer informasjon, se &quot;Ved hjelp av et objekt som implementerer IDisposable&quot; i den <xref:System.IDisposable>grensesnittet emnet.</xref:System.IDisposable>       Klassen SecureString og medlemmene er ikke synlige for COM. Hvis du vil ha mer informasjon, kan du se <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       I dette avsnittet: [streng kontra. SecureString](#vsString)[SecureString operasjoner](#Ops)[SecureString og interop](#interop)[hvor sikre er SecureString?               ](#HowSecure)      <a name=&quot;vsString&quot;></a>## Streng sammenlignet SecureString en forekomst av den <xref:System.String?displayProperty=fullName>klassen er begge uforanderlig og, når du ikke lenger trenger, kan planlegges programmatisk for datasanering, som er forekomsten er skrivebeskyttet etter at den er opprettet, og det er ikke mulig å forutse når forekomsten slettes fra minnet.</xref:System.String?displayProperty=fullName> Fordi <xref:System.String?displayProperty=fullName>forekomster er uforanderlig, operasjoner som ser ut til å endre en eksisterende forekomst opprettes en kopi av det til å redigere faktisk.</xref:System.String?displayProperty=fullName> Derfor, hvis en <xref:System.String>objektet inneholder sensitiv informasjon, for eksempel et passord, kredittkortnummer eller personlige data, likevel av informasjon som kan vises når det blir brukt fordi programmet ikke kan slette dataene fra minnet.</xref:System.String>       Et objekt for SecureString ligner en <xref:System.String>objekt ved at den har en tekstverdi.</xref:System.String> Imidlertid verdien for en SecureString objektet er låst i minnet, kan bruke en beskyttelse mekanisme, slik som kryptering, angitt av det underliggende operativsystemet kan endres før programmet som skrivebeskyttet, og kan slettes fra minnet som programmet-kaller den <xref:System.Security.SecureString.Dispose%2A>metoden eller .NET Framework-saneringsoppsamling.</xref:System.Security.SecureString.Dispose%2A>       Hvis du vil vite mer om begrensningene for klassen SecureString, se den [hvor sikre er SecureString?](#HowSecure) delen.       [Tilbake til toppen](#top) <a name=&quot;Ops&quot;> </a> ## SecureString operasjoner i SecureString klassen inneholder medlemmer som kan du gjøre følgende: starte et SecureString objekt du starte et SecureString objekt ved å kalle den parameterløs konstruktøren.             Legg til tegnene til en SecureString objekt du kan legge til et enkelttegn samtidig til et objekt for SecureString ved å kalle den <xref:System.Security.SecureString.AppendChar%2A>eller <xref:System.Security.SecureString.InsertAt%2A>metode.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > En SecureString-objektet må aldri konstruert fra en <xref:System.String>fordi sensitive data er allerede involvert i minnet utholdenhet konsekvensene av uforanderlig <xref:System.String>klasse.</xref:System.String> </xref:System.String> Den beste måten å lage et SecureString objekt er fra en tegn i gangen uforvaltede kilde, for eksempel den <xref:System.Console.ReadKey%2A?displayProperty=fullName>metoden.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       Fjern tegn fra en SecureString objekt du kan erstatte et uavhengig tegn ved å kalle den <xref:System.Security.SecureString.SetAt%2A>metoden fjerne en enkelt tegn ved å kalle den <xref:System.Security.SecureString.RemoveAt%2A>metode, eller Fjern alle tegn fra SecureString forekomst ved å kalle den <xref:System.Security.SecureString.Clear%2A>metoden.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       Angi SecureString objektet skrivebeskyttet når du har angitt streng som representerer SecureString-objekt, du kalle den <xref:System.Security.SecureString.MakeReadOnly%2A>metode for å gjøre strengen skrivebeskyttet.</xref:System.Security.SecureString.MakeReadOnly%2A>       Hent informasjon om SecureString objektet i SecureString klassen har bare to medlemmer som gir informasjon om strengen: den <xref:System.Security.SecureString.Length%2A>egenskap, som angir antall UTF16-kodet kode enheter i strengen; og <xref:System.Security.SecureString.IsReadOnly%2A>, metode, som angir om forekomsten er skrivebeskyttet.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       Slipp minnet tilordnet SecureString forekomsten fordi SecureString implementerer den <xref:System.IDisposable>grensesnittet du frigi minnet ved å kalle den <xref:System.Security.SecureString.Dispose%2A>metoden.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       Klassen SecureString har ingen medlemmer som undersøkes, sammenligne eller konvertere verdien for en SecureString. Fravær av slike medlemmer beskytter verdien for forekomsten fra tilfeldig eller skadelig eksponering. Bruk passende medlemmer av den <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>class, for eksempel den <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>metode for å endre verdien for et objekt for SecureString.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework klassen biblioteket bruker vanligvis SecureString forekomster i følgende: - Angi informasjon om passord til en prosess ved hjelp av den <xref:System.Diagnostics.ProcessStartInfo>struktur eller kaller ved overbelastning av den <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>metode som har en parameter av typen SecureString.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -For å angi nettverksinformasjon passord ved å kalle en <xref:System.Net.NetworkCredential>klassekonstruktør som har en parameter av typen SecureString eller ved å bruke den <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>egenskapen.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -Som inneholder passordinformasjon for SQL Server-godkjenning ved å ringe det <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>konstruktøren eller henting av verdien for den <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>egenskapen.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -Skal sendes en streng til ubehandlet kode. Hvis du vil ha mer informasjon, se den [SecureString og interop](#interop) delen.       [Tilbake til toppen](#top) <a name=&quot;interop&quot;> </a> ## SecureString og interop fordi operativsystemet ikke støtter direkte SecureString, må du konvertere verdien for SecureString-objektet til nødvendige strengetypen før sende strengen til en opprinnelig metode.        Den <xref:System.Runtime.InteropServices.Marshal>klassen har metoder som gjøre dette:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, som konverterer SecureString strengverdien til en binær streng (BSTR) gjenkjent COM.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>og <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, som kopierer SecureString strengverdien til en ANSI-streng i ubehandlet.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>og <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, som kopierer SecureString strengverdien til en Unicode-streng i ubehandlet.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       Hver av disse metodene oppretter en streng i klartekst i uforvaltede minnet. Det er ansvarlig for utviklere null ut og gratis at fordi den ikke lenger er nødvendig. Hver av streng konvertering og minne tildelingsmetoder har en tilsvarende metode null ut og gratis tildelt minne: | Tildelings- og konvertering metoden | Null og gratis metoden |   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    Når du opprettet på riktig måte, beskytter en forekomst av typen SecureString mer data enn <xref:System.String>.</xref:System.String> Når du oppretter en streng fra et tegn på gangen kilde <xref:System.String>oppretter flere midlertidige i minnet, mens SecureString oppretter en enkelt forekomst.</xref:System.String>  Datasanering for <xref:System.String>objekter er ikke-deterministisk.</xref:System.String> I tillegg fordi minnet ikke er festet, saneringsoppsamlingen gjør flere kopier av <xref:System.String>verdier og flytte komprimering minne.</xref:System.String> I motsetning minnet tilordnet en SecureString-objektet er låst, og at kan bli frigjort ved å kalle den <xref:System.Security.SecureString.Dispose%2A>metoden.</xref:System.Security.SecureString.Dispose%2A>       Selv om data som er lagret i en forekomst av typen SecureString flere sikrere enn data som er lagret i en <xref:System.String>serverforekomsten, er det betydelige begrensninger på hvor sikre en SecureString forekomsten er.</xref:System.String> Disse omfatter: plattformen på Windows operativsystem, innholdet i en SecureString forekomst intern tegnmatrise er kryptert. Imidlertid om på grunn av manglende APIer eller Nøkkelbehandling problemer, er kryptering ikke tilgjengelig på alle plattformer. SecureString er tilgjengelig på skrivebordet (bare Windows), og ikke på .NET kjerner på grunn av dette.       Varighet likt Hvis SecureString implementeringen kan dra nytte av kryptering, ren tekst som er tilordnet til SecureString forekomsten kan vises på ulike tidspunkter: – fordi Windows ikke er en sikker streng på operativsystemet-nivå, .NET Framework fremdeles har til å konvertere sikre strengverdien til representasjonen ren tekst for å bruke den.      -Når verdien for den sikre strengen er endret av metoder som <xref:System.Security.SecureString.AppendChar%2A>eller <xref:System.Security.SecureString.RemoveAt%2A>, må krypteres (det vil si konvertere tilbake til ren tekst), endres, og kryptert på nytt.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -Hvis sikre strengen er brukt i en interoperabilitetskall, må den konverteres til en ANSI-streng, en Unicode-streng eller binærstreng (BSTR). Hvis du vil ha mer informasjon, se den [SecureString og interop](#interop) delen.       Tidsintervallet SecureString-forekomsten verdi vises forkortet bare sammenlignet med <xref:System.String>klasse.</xref:System.String>       Eller Bruk flere vanligvis SecureString klassen definerer en lagring mekanisme for strengverdier som skal beskyttet eller konfidensiell. Utenfor .NET Framework seg selv støtter ikke bruk mekanisme SecureString. Dette betyr at den sikre tilkoblingsstrengen må konverteres til et brukes skjema (vanligvis en Fjern tekstform) som kan gjenkjennes av målet og dekryptering og konvertering må være i området for brukeren.       Den totale, SecureString er sikrere enn <xref:System.String>fordi det begrenser eksponering av sensitive strengdata.</xref:System.String> Disse strenger kan imidlertid fortsatt vises til prosesser og operasjon som har tilgang til raw minnet, for eksempel en ondsinnet prosess som kjører på vertsdatamaskinen, Prosessdump eller en bruker kan vises bytte-fil. I stedet for å bruke SecureString til å beskytte passord, er anbefalt alternativ å bruke en ugjennomsiktig referanse til legitimasjonen som er lagret utenfor prosessen.       [Tilbake til toppen](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.SecureString&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne forekomsten."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Denne operasjonen støttes ikke på denne plattformen."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Security.SecureString&quot;> </xref> klassen fra en subarray av &lt;xref:System.Char?displayProperty=fullName&gt; objekter.       Denne konstruktøren, er ikke CLS-kompatible. CLS-kompatibel-alternativet er &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;."
  remarks: "Denne konstruktøren initialiserer den nye <xref:System.Security.SecureString>objektet antallet tegn i `value` angitt av `length`; krypteres deretter verdien for forekomsten.</xref:System.Security.SecureString>       Denne konstruktøren defineres i C#, bare i konteksten for en usikker kode."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "En peker til en matrise av &lt;xref:System.Char?displayProperty=fullName&gt; objekter."
    - id: length
      type: System.Int32
      description: "Antall elementer i `value` skal tas med i den nye forekomsten."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>er mindre enn null eller større enn 65 536."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Denne operasjonen støttes ikke på denne plattformen."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Legger til et tegn på slutten av gjeldende sikre strengen."
  remarks: "Hvis implementeringen bruker en beskyttelse mekanisme, for eksempel kryptering, er verdien for denne sikre strengen eventuelt ubeskyttet; `c` føyes; er den nye verdien for den sikre strengen beskyttede på nytt."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "Et tegn som skal føyes til denne sikre strengen."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne sikre strengen er skrivebeskyttet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Operasjonen kan gjøre lengden på strengen sikre større enn 65 536 tegn."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Sletter verdien for den gjeldende sikre strengen."
  remarks: "Oppretting av minne som inneholder verdien for denne sikre strengen, og deretter lengden på verdien for denne sikre strengen er satt til null."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne sikre strengen er skrivebeskyttet."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Oppretter en kopi av den gjeldende sikre strengen."
  remarks: "Hvis en forekomst av en <xref:System.Security.SecureString>er skrivebeskyttet, kopi av den forekomsten vil ikke være skrivebeskyttet.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "Et duplikat av denne sikre strengen."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Frigir alle ressursene som brukes av gjeldende <xref href=&quot;System.Security.SecureString&quot;> </xref> objektet."
  remarks: "Fjerningsmetoden skriver binære nuller til tildelt minnet som inneholder verdien for dette <xref:System.Security.SecureString>objekt og frigjør tildelt minne.</xref:System.Security.SecureString>       Hvis du vil ha mer informasjon, se [datasanering](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Setter inn et tegn i denne sikre strengen ved plasseringen angitt indeks."
  remarks: "Indeksen er nullbasert; Det første tegnet i denne sikre strengen er i indeksen posisjon null.       Hvis implementeringen bruker en beskyttelse mekanisme, for eksempel kryptering, er verdien for den sikre strengen, eventuelt ubeskyttet; `c` er satt inn i den angitte indeksen posisjonen; er den nye verdien på nytt beskyttet. Metoden InsertAt gir samme resultat som den <xref:System.Security.SecureString.AppendChar%2A>metoden som setter inn et tegn på slutten av en sikker streng, hvis den `index` -parameteren for InsertAt er satt til lengden på denne forekomsten.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "Indeksen Plasser where parameteren `c` er satt inn."
    - id: c
      type: System.Char
      description: "Tegnet som skal settes inn."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne sikre strengen er skrivebeskyttet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null, eller større enn lengden på denne sikre streng.       - eller - operasjonen kan gjøre lengden på strengen sikre blir større enn 65 536 tegn."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Angir om denne sikre strengen er skrivebeskyttet."
  remarks: "Etter en forekomst av <xref:System.Security.SecureString>er skrivebeskyttet med <xref:System.Security.SecureString.MakeReadOnly%2A>metoden, forsøk på å endre verdien for de forekomsten kaster en <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.SecureString.MakeReadOnly%2A> </xref:System.Security.SecureString> Bruk metoden IsReadOnly til å kontrollere om en <xref:System.Security.SecureString>er skrivebeskyttet før du prøver å endre det.</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis denne sikre strengen er merket som skrivebeskyttet. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Henter antallet tegn i gjeldende sikre strengen."
  remarks: "Egenskapen lengde returnerer antall <xref:System.Char>objekter i denne forekomsten, ikke antall Unicode-tegn.</xref:System.Char> Et Unicode-tegn som kan vises som flere <xref:System.Char>objektet.</xref:System.Char>       Den maksimale lengden på en <xref:System.Security.SecureString>forekomsten er 65 536 tegn.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "Antall &lt;xref:System.Char?displayProperty=fullName&gt; objekter i denne sikre streng."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Gjør tekstverdien for denne sikre strengen skrivebeskyttet."
  remarks: "Initialisere tekstverdien for en forekomst av den <xref:System.Security.SecureString>klasse med den <xref:System.Security.SecureString.%23ctor%2A>konstruktører, og endre verdien med den <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, og <xref:System.Security.SecureString.AppendChar%2A>metoder.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       Når du har utført endringene endelig, bruker du metoden MakeReadOnly foreta verdien for forekomsten uforanderlig (skrivebeskyttet). Når verdien er merket som skrivebeskyttet, oppstår flere forsøk på å endre det en <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       Aktivering av MakeReadOnly virker permanent fordi den <xref:System.Security.SecureString>klassen gir ingen betyr foreta sikre strengen kan endres på nytt.</xref:System.Security.SecureString> Bruk av <xref:System.Security.SecureString.IsReadOnly%2A>metode til å kontrollere om en forekomst av <xref:System.Security.SecureString>er skrivebeskyttet.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Fjerner tegnet på den angitte indeks posisjonen fra denne sikre strengen."
  remarks: "Indeksen er nullbasert; Det første tegnet i denne forekomsten er i indeksen posisjon null.       Hvis implementeringen bruker en beskyttelse mekanisme, for eksempel kryptering, er verdien for denne sikre strengen eventuelt ubeskyttet; tegnet på den angitte indeks posisjonen fjernes; den nye verdien er deretter på nytt beskyttet."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indeksen posisjonen til tegnet i denne sikre strengen."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne sikre strengen er skrivebeskyttet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null, eller større enn eller lik lengden på denne sikre streng."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Erstatter eksisterende tegnet på den angitte indeks posisjonen med et annet tegn."
  remarks: "Indeksen er nullbasert; Det første tegnet i denne forekomsten er i indeksen posisjon null.       Hvis implementeringen bruker en beskyttelse mekanisme, for eksempel kryptering, er verdien for den sikre strengen, eventuelt ubeskyttet; `c` er tilordnet til den angitte indeks posisjonen; er den nye verdien på nytt beskyttet."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "Indeksen posisjonen til et eksisterende tegn i denne sikre strengen"
    - id: c
      type: System.Char
      description: "Et tegn som erstatter eksisterende tegn."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Denne sikre strengen har allerede blitt fjernet."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne sikre strengen er skrivebeskyttet."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>er mindre enn null, eller større enn eller lik lengden på denne sikre streng."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Det oppstod en feil under beskyttelse eller beskyttelsen verdien for denne sikre strengen."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
