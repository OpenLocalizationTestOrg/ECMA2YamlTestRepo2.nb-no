### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Representerer metoden som kjører på en <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "Når en administrert tråd opprettes, metoden som kjører på tråd representeres av: – en <xref:System.Threading.ThreadStart>representanten som er sendt til den <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>konstruktør.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  En metode som har ingen parametere, og som returnerer `void` i C# eller en `Sub` prosedyren i Visual Basic kan representere representanten.      -ParameterizedThreadStart representant som er sendt til den <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>konstruktør.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> En metode som har en parameter av typen <xref:System.Object>og som returnerer void i C# eller Sub-prosedyre i Visual Basic kan representere representanten.</xref:System.Object>       Tråden begynner ikke kjøres før den <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>-metoden.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> Den <xref:System.Threading.ThreadStart>ParameterizedThreadStart representanten aktiveres på tråd eller kjøring starter på den første linjen for metoden representert av representanten.</xref:System.Threading.ThreadStart> Når det gjelder ParameterizedThreadStart representant objektet som er sendt til den <xref:System.Threading.Thread.Start%28System.Object%29>metoden er sendt til representanten.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Visual Basic og C# brukere kan utelate den <xref:System.Threading.ThreadStart>eller ParameterizedThreadStart representantkonstruktør når du oppretter en tråd.</xref:System.Threading.ThreadStart> I Visual Basic, kan du bruke den `AddressOf` operatoren ved sending av metoden til den <xref:System.Threading.Thread.%23ctor%2A>konstruktøren, for eksempel `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> I C# ganske enkelt du angi navnet på tråd. Kompilatoren velger riktig representanten-konstruktøren.      > [!NOTE] > Når du oppretter ParameterizedThreadStart representant for en forekomst-metoden i C++, er den første parameteren for konstruktøren variabelen forekomsten. For en statisk metode er den første parameteren for konstruktøren null. For en statisk metode krever representanten konstruktøren bare én parameter: adressen til metoden tilbakeringing kvalifisert av klassen.       Representanten ParameterizedThreadStart og <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>metoden overbelastning gjør det enkelt å sende data til en tråd prosedyre, men denne metoden er ikke typen trygt fordi et objekt kan sendes til <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> En mer robust måte å sende data til en tråd prosedyre er å plassere både tråd prosedyren og datafeltene til et objekt for arbeidsprosessen. Hvis du vil ha mer informasjon, se [oppretter tråder og sende Data på starttid](~/add/includes/ajax-current-ext-md.md).       Representanten ParameterizedThreadStart støtter bare én enkelt parameter. Du kan sende flere dataelementer til ParameterizedThreadStart ved å gjøre at parameteren én av følgende: – en matrise.      – En samlingstype hvis alle dataelementene er av samme type.      – En tuppel-type, for eksempel <xref:System.Tuple%602>eller <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
