### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Gir et objekt som gjør det mulig for to <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontroller for å opprette en tilkobling. Denne klassen kan arves."
  remarks: "Webdeler kontroll-angi en tilkobling er en kobling eller en tilordning mellom to <xref:System.Web.UI.WebControls.WebParts.WebPart>(eller andre server eller bruker) kontroller som de kan dele dataene.</xref:System.Web.UI.WebControls.WebParts.WebPart> Denne muligheten til å dele dataene kan tilkoblet kontrolltypene som skal brukes på en måte som overskrider funksjonaliteten i isolerte kontrollene. For eksempel hvis én kontroll gir Postnummerdata, og en annen kontroll kan lese dataene og angi været informasjonen basert på postnummeret gir deretter tilkoblet funksjonaliteten til de to kontrollene flere verdien til brukere. Hvis du vil utvide dette eksemplet, kan du opprette andre kontroller at også viser informasjon basert på et postnummer, for eksempel en kontroll med koblinger til lokale nyheter, og alle disse kontroller kan arbeide med postnummerdata kan dele dataene med enkelt kontrollen som gir et postnummer. Sluttbrukere av webdeler programmer kan opprette og administrere tilkoblinger mellom slike kompatibel Kontroller direkte fra en nettleser, ved hjelp av standard tilkoblinger brukergrensesnittet (UI) som er angitt av den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontrollen eller bruke en egendefinert Brukergrensesnittet som er angitt av en utvikler.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Denne WebPartConnection klassen oversikt er Generelt sett av grunnleggende informasjon for å opprette en tilkobling. For mer informasjon om bestemte komponenter og krav som er involvert i oppretting av tilkoblinger, kan du se [oversikt over webdeler tilkoblinger](~/add/includes/ajax-current-ext-md.md), eller referanse klassene og kodeeksempler nevnt i følgende diskusjoner. Det finnes flere grunnleggende aspektene ved tilkobling webdeler: – to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Hver webdeler tilkobling består av to kontroller. Det er mulig for en kontroll som skal delta i mer enn én samtidig, men hver enkelt tilkobling består av nøyaktig to kontroller. Kontrollene kan utledes direkte fra den <xref:System.Web.UI.WebControls.WebParts.WebPart>basisklasse, eller de kan være andre serverkontroller, inkludert ASP.NET kontroller egendefinerte serverkontroller og brukerkontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Kontroller ikke avledet fra den <xref:System.Web.UI.WebControls.WebParts.WebPart>klasse Hvis satt i en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>sone, automatisk står i en <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>objektet ved kjøretid, som gjør det mulig for dem å arve fra den <xref:System.Web.UI.WebControls.WebParts.WebPart>klassen og funksjonen som kjøretid <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Kontroller som ligger i <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>soner.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Begge <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller og andre typer serverkontroll må befinne seg i en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>sone skal kunne delta i webdeler-tilkoblinger (og de fleste funksjonene andre webdeler).</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Forbrukere og leverandører. Det finnes to kontroller i hver webdeler tilkobling: en leverandør med data og forbrukeren av dataene. Leverandøren inneholder data til forbrukeren via en angitt tilbakeringing metode som returnerer data i form av et grensesnitt. (Se eksempel-delen i dette emnet for et eksempel på hvordan du oppretter og angi metoden tilbakeringing.) Denne metoden for tilbakeringing kalles et leverandøren connection point. Detaljene for denne tilkoblingen punkt (&quot;&quot; visningsnavnet IDen og hva slags grensesnittet returnerte) finnes i en <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektet som er knyttet til leverandøren kontrollen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Brukeren mottar dataene gjennom en angitt metode som kan godta en forekomst av grensesnittet. Denne metoden kalles tilkoblingspunktet en forbruker, og detaljene for tilkoblingspunktet (navn ID og type grensesnitt) finnes i en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>tilknyttet Forbrukerkontroll.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Kompatibel kontroller eller en gyldig transformering. For en tilkobling til å kjøre de forbrukeren og leverandøren må være kompatibel (betyr at de angitte tilkoblingen punkt metodene kan arbeide med samme type grensesnittet), eller det kan være en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objekt kan oversette type til typen forstått av forbrukeren som tilbys av leverandøren.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      – En WebPartConnection-objekt. For en tilkobling til finnes, må det være en forekomst av klassen WebPartConnection som inneholder referanser til leverandøren og forbrukeren kontroller, sammen med detaljene for sine tilkoblingen punkt. Hvis leverandør og forbrukeren er ikke kompatible og bruker i stedet en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet som kobles til tilkoblingen refererer til transformeringen.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      – En metode for oppretting av tilkoblingen. Når kompatibel forbrukeren og leverandøren kontroller er riktig utformet med connection point metoder og plassert i en sone, og et WebPartConnection objekt er tilgjengelig, er den siste grunnleggende trinn nødvendig å starte tilkoblingen. Dette kan skyldes gjøres for brukere å opprette tilkoblingen via Brukergrensesnittet. Hvis du setter en `<asp:connectionszone>` element på siden, og den andre nødvendige komponentene for en tilkobling er på plass, på kjøretidspunktet en bruker kan bytte siden i koble visningsmodus, klikker du et koble verb på verb-menyen for leverandøren eller forbrukeren og en tilkobling Brukergrensesnittet (basert på den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontrollen) vises.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Brukeren kan starte tilkoblingen i dette Grensesnittet. En annen måte å starte tilkoblingen er å gjøre det programmatisk. Uansett om via Brukergrensesnittet eller programmatisk underliggende metode som starter tilkoblingen er den samme. Applikasjons-kall i <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metoden (eller <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metoden hvis du bruker en transformering) på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollere, sende til den leverandøren, forbrukeren og de respektive tilkoblingen punkt objektene, og metoden returnerer et WebPartConnection-objekt.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Klassen WebPartConnection definerer et objekt som innkapsler viktige detaljene for en tilkobling mellom to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Klassen nesten utelukkende består av egenskaper relatert til detaljene for en bestemt tilkobling. Flere egenskaper gjelder forbrukeren kontrollen i en tilkobling. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>Egenskapen refererer forbrukeren kontrollen seg selv, og <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>egenskapen refererer til de forbrukeren-ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>-objektet som inneholder detaljer om de forbrukeren tilkoblingspunktet, refererer til forbrukeren <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>egenskapen.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>egenskapen refererer til IDen for den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Alle disse forbrukeren-relaterte tilkoblingsegenskapene må ha en verdi som er tilordnet til å opprette en tilkobling.       Klassen WebPartConnection også har flere egenskaper som er knyttet til leverandøren kontrollen i en tilkobling, og disse samsvarer med egenskaper for en forbruker. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>Egenskapen refererer til leverandøren kontrollen seg selv, under <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>egenskapen refererer ID.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>egenskapen refererer til den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt, og <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>egenskapen refererer til IDen leverandørens tilkoblingspunktet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Flere egenskaper gjelder tilstanden for tilkoblingen. Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>egenskapen angir om tilkoblingen er aktiv (for øyeblikket utveksle data) eller inaktiv (fortsatt koblet, men ikke aktivt deling data).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> Den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>egenskapen angir om tilkoblingen er en delt (tilgjengelig for alle brukere på en side) eller en bestemt tilkobling og <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>egenskapen angir om kontrollen statisk (deklarert i siden markup og dermed permanent) eller dynamisk (opprettet programmatisk, noe som betyr at den kan slettes).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> klasse."
  remarks: "Konstruktøren WebPartConnection er felles slik at ASP.NET parseren kan opprette en forekomst når en tilkobling er deklarert i koden for en webside; Denne konstruktøren skal ikke brukes i developer kode.       Når du vil opprette en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objekt programmatisk, bør du bruke den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>eller <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>metoden som er angitt i den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Disse metodene håndtere mange detaljene for å opprette en tilkobling, og returnerer en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       WebPartConnection konstruktøren for den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>klassen angir verdiene i den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>og <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>egenskapene som skal `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Dermed standardtilstanden til en ny tilkobling er ikke statisk (det vil si at det er deklarert i markup inneholdende websiden) og delte (vises for alle brukere av siden). Dette vil være tilfellet når du legger til en tilkobling i de fleste tilfellet av deklarerer tilkoblingen i koden på siden med en `<asp:webpartconnection>` elementet. I andre tilfeller vil imidlertid en tilkobling har forskjellige verdier for disse egenskapene. For eksempel når du legger til en tilkobling programmatisk ved å opprette tilkoblingsobjektet i koden, og brukeren viser siden i standard bruker-område, opprettes tilkoblingen som en dynamisk, per user(visible only to the specific user)-tilkobling.      > [!NOTE] > I <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>og <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>er skrivebeskyttet, og disse egenskapene som avgjør av en tilkobling er angitt internt av den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen avhengig av hvordan en tilkobling opprettes (deklarativt i siden markup eller programmatisk via koden eller brukergrensesnittet).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> objektet som fungerer som forbruker kontrollen i en tilkobling."
  remarks: "Hver webdeler tilkobling består av to kontroller som dele dataene. Én kontroll fungerer som leverandøren med data, og den andre kontrollen fungerer som forbruker, mottak og behandling av data fra leverandøren. Egenskapen forbrukeren henter en referanse til det <xref:System.Web.UI.WebControls.WebParts.WebPart>kontrollere fungerer som forbruker i en relasjon for tilkoblingen.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> som representerer webdeler kontrollen fungerer som forbrukeren i en tilkobling."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Lengden på den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>egenskapen er null.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter objektet som fungerer som et connection point for en kontroll som fungerer som forbruker i en tilkobling."
  remarks: "Én av de nødvendige trinnene for å opprette en tilkobling mellom to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller er ikke opprette tilkoblingen punkt for hver kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPart> Tilkoblingspunktet forbrukeren er et objekt som inneholder informasjon om hvordan du kobler til kontrollen fungerer som forbruker. De forbrukeren kildekode, må én av metodene identifiseres med den `ConnectionConsumer` attributtet. Den <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet som er knyttet til en Forbrukerkontroll inneholder detaljer om metoden og attributtet, inkludert en ID for metoden et visningsnavn for bruk i brukergrensesnittet (UI), og hvilken type grensesnittet metoden kan hente.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Dette settet med informasjon om forbrukeren, metoden for utgjør tilkoblinger, og hva slags grensesnittet den forstår utgjør samlet tilkoblingspunktet en forbruker.       Som standard et <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekt kan koble til bare én <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt om gangen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> En forbruker kan ha flere metoder identifisert som mulig forbrukeren tilkoblingen punkt, men en forbruker kan bare ha én tilkobling som forbruker (altså bare én av de forbrukeren tilkoblingen punktene kan være aktiv) om gangen. Derimot et <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>kan koble til flere <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekter.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Standardvirkemåten kan endres ved å overstyre den <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>egenskap i den <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>attributtet.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> tilknyttet forbrukeren kontrollen i en tilkobling."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter eller angir egenskapsverdien på en tilkobling som refererer til IDen for objektet som betjener som tilkoblingspunktet forbrukeren for tilkoblingen."
  remarks: "Utviklere kan angi tilkoblingspunktet som forbruker brukes for tilkoblingen ved å tilordne en verdi for en statisk tilkobling er angitt i koden for en webside i `ConsumerConnectionPointID` attributtet for den `<asp:webpartconnection>` elementet. Hvis en verdi ikke er tilordnet til attributtet i <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapsverdien brukes.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Når du oppretter dynamiske (programmatisk) tilkoblinger, skal vanligvis du ikke angi verdien for egenskapen ConsumerConnectionPointID. Du kan bare kalle den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>-metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollere, sende til den forbrukeren og forbrukeren tilkobling peke objekter (sammen med andre nødvendige parameterne), og denne metoden bestemmer riktig ID som brukes for de forbrukeren tilkoblingspunktet.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> På samme måte når du kobler, du kan ringe den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metoden uten å måtte angi egenskapsverdien ConsumerConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > IDen til en forbruker tilkoblingspunktet kan bestemmes når du angir en <xref:System.Web.UI.WebControls.WebParts.WebPart>eller andre serverkontroll som forbruker.</xref:System.Web.UI.WebControls.WebParts.WebPart> Du må angi en metode i forbruker som henter en forekomst av et grensesnitt som er angitt av en leverandør kontroll eller en transformering. For å identifisere metoden, merker du det med den `ConnectionConsumer` code-attributtet. Når du legger til dette attributtet, kan du legge til en valgfri verdi strengparameter som fungerer som en ID for forbrukeren <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Hvis du angir en verdi for den valgfrie parameteren ID, blir denne verdien verdien for egenskapen ConsumerConnectionPointID for tilkoblingen. Hvis du ikke angir en ID-verdi i <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapsverdien brukes.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Velg en streng som inneholder ID for forbrukeren-tilkoblingen."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter eller angir egenskapsverdien på en tilkobling som refererer til IDen for den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontrollere fungerer som forbruker for tilkoblingen."
  remarks: "Egenskapsverdien ConsumerID kreves når du oppretter en tilkobling mellom <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Hvis en verdi ikke er tilordnet til egenskapen, et unntak når den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen prøver å aktivere tilkoblingen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "En streng som inneholder IDen til kontrollen fungerer som forbruker i en tilkobling."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter eller angir IDen for en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet."
  remarks: "Hver <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet har en unik verdi som er tilordnet til ID-egenskap.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Dette er slik at det blir enklere å skille mellom flere tilkoblinger.       Hvis du oppretter en statisk tilkobling ved deklarerer en `<asp:webpartconnection>` element i en webside, og du ikke tilordne en verdi til den `ID` attributtet for tilkoblingen, et unntak forårsakes når den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen prøver å aktivere tilkoblingen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Når den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen oppretter en ny dynamiske tilkobling, kaller den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>metode for å generere en unik ID for tilkoblingen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "En streng som inneholder IDen til en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en verdi som angir om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> -objektet er opprettet, og kan ikke utveksle data mellom leverandør og forbrukeren kontrollene."
  remarks: "Egenskapen IsActive angir av en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Når tilkoblingen er i denne tilstanden, leverandør og forbrukeren kontrollene i tilkoblingen er kommunikasjon og kan utveksle data via et felles grensesnitt eller <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Når en bruker viser en gjengitte side som inkluderer en opprettet tilkobling normal lesemodus, aktiveres tilkoblingen vanligvis (Hvis den ikke kunne aktiveres på grunn av en konflikt eller et annet problem når laste inn siden). Egenskapsverdien er i en tidlig fase av siden og kontroll levetid `false`. Tilkoblingen aktiveres bare når den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>hendelse på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen aktiveres.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> Nærmere bestemt tilkoblingen aktiveres etter at brukeren har hentet en forekomst av det angitte grensesnittet fra leverandøren eller <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Det er lurt å vite om en tilkobling er aktiv i tilfeller der det er kanskje konflikter eller synkroniseringsproblemer på grunn av flere tilkoblinger på en side. Hvis det er en konflikt mellom to tilkoblinger, for eksempel den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen har muligheten til å ikke aktivere en tilkoblinger for å unngå konflikten.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tilkoblingen er aktiv. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en verdi som angir om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet er synlig for alle brukere eller bare for gjeldende bruker."
  remarks: "Som med individuell <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroller, en <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>-objektet kan være en delt eller per brukerforekomst.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> En delt forekomst betyr at tilkoblingen er synlig for alle brukere fra en webside og per brukerforekomst betyr at tilkoblingen er bare synlige for en bestemt bruker.       Vanligvis bestemmer hvordan en tilkobling er lagt til en side om deles tilkoblingen. Hvis tilkoblingen er deklarert i koden for en webside, og deretter deles tilkoblingen og IsShared egenskapsverdi `true`. I tillegg hvis websiden er i delt område når en tilkobling, deles også tilkoblingen. Vanligvis når en bruker i `<asp:connectionszone>` brukergrensesnittet (UI) for å legge til en tilkobling, siden er i bruker-område, slik at den ikke er delt og IsShared egenskapsverdi `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tilkoblingen er delt; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en verdi som angir om en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> objektet er deklarert i koden for en webside eller opprettet programmatisk."
  remarks: "Tilkoblinger mellom webdeler kontroller kan være statisk eller dynamisk. En statisk tilkobling er deklarert i koden for en webside ved hjelp av en `<asp:WebPartConnection>` elementet. Dynamiske tilkoblinger opprettes programmatisk eller når en bruker oppretter en tilkobling via brukergrensesnittet (UI) som er definert av den <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>kontroll.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Statiske tilkoblinger er delt objekter, noe som betyr at de er tilgjengelige for alle brukere av websiden. De er også i hovedsak permanent fordi, som en statisk <xref:System.Web.UI.WebControls.WebParts.WebPart>kontroll, de kan bli slettet permanent.</xref:System.Web.UI.WebControls.WebParts.WebPart>      > [!NOTE] > Mens en statisk connection-objektet ikke kan slettes permanent, den permanent kan kobles. I dette tilfellet frakoblet objekt vil finnes på serveren, men sluttbrukeren vil aldri være klar over objektets finnes på en side."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tilkoblingen er statisk; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontrollen som fungerer som leverandøren i en webdeler-tilkobling."
  remarks: "Hver webdeler tilkobling består av to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller--forbrukere og en leverandør, og egenskapen returnerer en referanse til leverandøren kontrollen i en tilkobling.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Kontrollen leverandøren kreves for å opprette en tilkobling som motparten i en tilkobling (forbrukeren kontrollen). Om du oppretter tilkoblingen programmatisk eller deklarerer siden utholdenhet format, må du angi en kontroll som leverandøren for en tilkobling."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> som fungerer som leverandøren av data."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Lengden på den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>egenskapsverdien er null.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter objektet som fungerer som en tilkoblingspunktet for en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontrollere fungerer som en leverandør for en tilkobling."
  remarks: "Én av de nødvendige trinnene for å opprette en tilkobling mellom to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller er ikke opprette tilkoblingen punkt for hver kontroll.</xref:System.Web.UI.WebControls.WebParts.WebPart> Tilkoblingspunktet for tjeneste er et objekt som inneholder informasjon om hvordan du kobler til kontrollen fungerer som en leverandør. Leverandørens kildekode, må én av metodene identifiseres med den `ConnectionProvider` attributtet. Den <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>som er knyttet til hos en leverandør av kontrollen inneholder detaljer om metoden og attributtet, inkludert en ID for metoden et visningsnavn for bruk i brukergrensesnittet (UI), og hvilken type grensesnittet forekomsten metoden kan gå tilbake til en Forbrukerkontroll.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Dette settet med informasjon om leverandøren, metoden for utgjør tilkoblinger, og hva slags grensesnittet det gir utgjør samlet et leverandøren connection point.       Som standard en <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>kan koble til bare én <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objekt om gangen.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> En forbruker kan ha flere metoder identifisert som mulig forbrukeren tilkoblingen punkt, men en forbruker kan bare ha én tilkobling som forbruker (altså bare én av de forbrukeren tilkoblingen punktene kan være aktiv) om gangen. Derimot et <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>kan koble til flere <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objekter som standard.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> En leverandør kontroll som gir et postnummer kan for eksempel være koblet til flere forbrukerkontroller som bruker et postnummer til å opprette forskjellige typer data basert på et postnummer, for eksempel Vær data, nyheter og så videre. Standardvirkemåten kan endres ved å overstyre den <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>egenskap i den <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>attributtet.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> knyttet til leverandøren kontrollen i en tilkobling."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter eller angir egenskapsverdien på en tilkobling som refererer til IDen for objektet som betjener som tilkoblingspunktet for tjeneste for tilkoblingen."
  remarks: "Utviklere kan angi tilkoblingspunktet hvilken leverandør som skal brukes for tilkoblingen ved å tilordne en verdi for en statisk tilkobling er angitt i koden for en webside i `ProviderConnectionPointID` attributtet for den `<asp:webpartconnection>` elementet. Hvis en verdi ikke er tilordnet til attributtet i <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>egenskapsverdien brukes.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Når du oppretter dynamiske (programmatisk) tilkoblinger, skal vanligvis du ikke angi verdien for egenskapen ProviderConnectionPointID. Du kan bare kalle den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>-metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollere, sende til den leverandør og leverandør peke objekter (sammen med andre nødvendige parameterne), og denne metoden bestemmer riktig ID som brukes for leverandørens tilkoblingspunktet.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> På samme måte når du kobler, du kan ringe den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>metoden uten å måtte angi egenskapsverdien ProviderConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      > [!NOTE] > IDen til en leverandør tilkoblingspunktet kan bestemmes når du angir en <xref:System.Web.UI.WebControls.WebParts.WebPart>eller andre serverkontroll som en leverandør.</xref:System.Web.UI.WebControls.WebParts.WebPart> Du må angi en tilbakeringing metode i leverandøren som brukes som en forekomst av et grensesnitt som inneholder data til en forbruker. For å identifisere metoden, merker du det med den `ConnectionProvider` code-attributtet. Når du legger til dette attributtet, kan du legge til en valgfri verdi strengparameter som fungerer som en ID for leverandørens <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objektet.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Hvis du angir en verdi for den valgfrie parameteren ID, blir denne verdien verdien for egenskapen ProviderConnectionPointID for tilkoblingen. Hvis du ikke angir en ID-verdi i <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen tilordner en default-ID når objektet er opprettet.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "En streng som inneholder IDen for en leverandør connection point-objektet."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter eller angir egenskapsverdien på en tilkobling som refererer til IDen for den <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> kontrollere fungerer som en leverandør for tilkoblingen."
  remarks: "Egenskapsverdien ProviderID kreves når du oppretter en tilkobling mellom to <xref:System.Web.UI.WebControls.WebParts.WebPart>Kontroller.</xref:System.Web.UI.WebControls.WebParts.WebPart> Hvis en verdi ikke er tilordnet til egenskapen, et unntak når den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen prøver å aktivere tilkoblingen.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "En streng som inneholder IDen for leverandøren-kontroll."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Overstyrer arvet <xref:System.Object.ToString*>metoden og returnerer typen kort navn for tilkoblingsobjektet.</xref:System.Object.ToString*>"
  remarks: "Denne metoden brukes vanligvis til foretrekker av kontrollen utviklere. Det forbedrer hvordan tilkoblingsobjekter vises i utformingsvisning ved hjelp av kortere typenavnet, i motsetning til en fullstendig kvalifisert navn. Metoden kan imidlertid kalles når som helst i koden der du vil vite typenavnet på en koblingsobjektet."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "En streng som inneholder korte (ukvalifiserte) Skriv inn navnet på en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekt som brukes til å omforme data mellom to ellers er inkompatible tilkoblingen punktene i en webdeler-tilkobling."
  remarks: "Det er to måter leverandør og forbrukeren kontrollene i tilkoblingen kan koble til i en webdeler-tilkobling. De kan koble direkte til de respektive <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>objekter og en grensesnittype som forstå for begge kontrollene.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Eller, hvis de er kompatible, de kan koble til indirekte, med en <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet som transformerer en grensesnittet forekomst fra en leverandør til en type forstått av en forbruker.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Når du trenger en transformering som en del av en tilkobling, egenskapen transformeringen inneholder en referanse til det <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>objektet.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Du kan legge til en transformering for en tilkobling deklarativt i koden for en webside ved å legge til en kode for en egendefinert transformering (eller en transformeringer gav webdeler kontrollen settet) i den `<asp:WebPartConnection>` elementet. Du kan også legge til en transformering programmatisk å opprette en forekomst av den i koden, og kaller den <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>-metoden på den <xref:System.Web.UI.WebControls.WebParts.WebPartManager>kontrollen ikke opprette tilkoblingen sende til den transformeringen objektet sammen med de nødvendige parameterne.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. Standardverdien er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Henter en samling av <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekter som er brukt internt av webdeler kontrollen settet."
  remarks: "Transformeringer egenskapen ikke er ment for bruk av utviklere. Hvis du vil ha tilgang til transformeringen knyttet til en tilkobling, utviklere alltid skal bruke den <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>egenskapen.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       Egenskapen transformeringer er brukt internt av webdeler kontrollen angitt slik at siden utviklere kan deklarere transformeringen elementer i den `<asp:webpartconnection>` elementet i koden for en webside."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "En <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> som inneholder <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> objekter."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
