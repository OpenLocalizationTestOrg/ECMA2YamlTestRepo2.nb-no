### YamlMime:ManagedReference
items:
- uid: System.Net.Http.WebRequestHandler
  id: WebRequestHandler
  children:
  - System.Net.Http.WebRequestHandler.#ctor
  - System.Net.Http.WebRequestHandler.AllowPipelining
  - System.Net.Http.WebRequestHandler.AuthenticationLevel
  - System.Net.Http.WebRequestHandler.CachePolicy
  - System.Net.Http.WebRequestHandler.ClientCertificates
  - System.Net.Http.WebRequestHandler.ContinueTimeout
  - System.Net.Http.WebRequestHandler.ImpersonationLevel
  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  - System.Net.Http.WebRequestHandler.ReadWriteTimeout
  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  langs:
  - csharp
  name: WebRequestHandler
  nameWithType: WebRequestHandler
  fullName: System.Net.Http.WebRequestHandler
  type: Class
  summary: "Inneholder desktop-spesifikke funksjoner er ikke tilgjengelig for Windows Store-apper eller andre miljøer."
  remarks: "Denne klassen implementerer en transport behandlingsprogrammet ved hjelp av <xref:System.Net.HttpWebRequest>forekomster til å sende HTTP-forespørsler til serverne.</xref:System.Net.HttpWebRequest>"
  syntax:
    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.HttpClientHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
  type: Constructor
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Http.WebRequestHandler&quot;> </xref> klasse."
  syntax:
    content: public WebRequestHandler ();
    parameters: []
  overload: System.Net.Http.WebRequestHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  id: AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir en verdi som angir om pipeline forespørselen til Internett-ressurs."
  remarks: "Et program bruker egenskapen AllowPipelining til å angi en innstilling for pipelined tilkoblinger. Når AllowPipelining er `true`, et program gjør pipelined tilkoblinger til servere som støtter dem.."
  syntax:
    content: public bool AllowPipelining { get; set; }
    return:
      type: System.Boolean
      description: "Returnerer <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis forespørselen skal være pipelined; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.AllowPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  id: AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir en verdi som angir hvilket godkjenning og representasjon brukes for denne forespørselen."
  remarks: "I gjensidig godkjenning finnes både klienten og serveren legitimasjon for å opprette sin identitet. Den <xref:System.Net.Security.AuthenticationLevel>og <xref:System.Net.Security.AuthenticationLevel>verdier er relevante for Kerberos-godkjenning.</xref:System.Net.Security.AuthenticationLevel> </xref:System.Net.Security.AuthenticationLevel> Kerberos-godkjenning kan støttes direkte, eller kan brukes hvis forhandle sikkerhetsprotokollen brukes til å velge den faktiske security-protokollen. Du finner mer informasjon om protokollene [Internett godkjenning](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }
    return:
      type: System.Net.Security.AuthenticationLevel
      description: "Returnerer <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>       En bitvis kombinasjon av det <xref:System.Net.Security.AuthenticationLevel>verdier.</xref:System.Net.Security.AuthenticationLevel>  Standardverdien er <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>"
  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  id: CachePolicy
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir policy for hurtigbuffer for denne forespørselen."
  remarks: "Bestemmer om svar kan hentes fra hurtigbufferen for gjeldende hurtigbufferen policy og tilstedeværelsen av den forespurte ressursen i hurtigbufferen. Ved hjelp av hurtigbufrede svar vanligvis forbedrer programmet ytelse, men likevel svaret i hurtigbufferen ikke svarer svar på serveren.       Hurtigbufferen standardpolicyen kan angis i Machine.config konfigurasjonsfilen, eller ved å angi den <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>egenskapen.</xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>       En kopi av en ressurs er bare legges til i hurtigbufferen hvis svar dataflyten for ressursen er hentet og lese til slutten av dataflyten. Slik at en annen forespørsel etter samme ressurs kan bruke en bufret kopi, avhengig av hvor hurtigbufferen policy for denne forespørselen."
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "Returns <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;></xref>.       En <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref> -objekt som definerer en policy for hurtigbuffer. Standard er <xref:System.Net.WebRequest.DefaultCachePolicy*>.</xref:System.Net.WebRequest.DefaultCachePolicy*>"
  overload: System.Net.Http.WebRequestHandler.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir samlingen av sikkerhetssertifikatet som er knyttet til denne forespørselen."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "Returns <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref>.       Samling av sikkerhetssertifikatet som er knyttet til denne forespørselen."
  overload: System.Net.Http.WebRequestHandler.ClientCertificates*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir hvor lang tid i millisekunder, programmet venter på 100-fortsette fra serveren før du laster opp data."
  syntax:
    content: public TimeSpan ContinueTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Returnerer <xref:System.TimeSpan>.</xref:System.TimeSpan>       Hvor lang tid i millisekunder programmet venter på 100-fortsette fra serveren før du laster opp data. Standardverdien er 350 millisekunder."
  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir representasjonsnivået for gjeldende forespørsel."
  remarks: "Representasjonsnivået bestemmer hvordan serveren kan bruke klientens legitimasjon."
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Returnerer <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>       Representasjonsnivået for forespørselen. Standard er <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir den maksimale tillatte lengden på svarhoder."
  remarks: "Lengden på svarhode inneholder statuslinjen svar og noen ekstra kontrolltegn som er mottatt som en del av HTTP-protokollen. Verdien-1 betyr ingen grense er pålagt svarhoder; verdien 0 betyr at alle forespørsler mislykkes.       Hvis egenskapen MaxResponseHeadersLength ikke eksplisitt er angitt, brukes som standard verdien for den <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>egenskapen.</xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>       Hvis lengden på svarhode mottatt overstiger verdien for egenskapen MaxResponseHeadersLength, unntak et under svaret er tilgjengelig."
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: "Returnerer <xref:System.Int32>.</xref:System.Int32>       Lengden, i kilobyte (1024 byte), med svaroverskrifter."
  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir et tidsavbrudd i millisekunder under skriving av en forespørsel om eller lesing av et svar fra en server."
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "Returnerer <xref:System.Int32>.</xref:System.Int32>       Antall millisekunder før skriving eller lesing blir tidsavbrutt. Standardverdien er 300 000 millisekunder (5 minutter)."
  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir en tilbakeringing metode til å validere serversertifikatet."
  remarks: "Hvis ServerCertificateValidationCallback `null`, serversertifikatet skal bekreftes med standard velkjente sertifiseringsinstanser."
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "Returns <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>.       Tilbakekallmetode til å validere serversertifikatet."
  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Henter eller angir en verdi som angir om å tillate bredbånd NTLM godkjent tilkobling."
  remarks: "Standardverdien for denne egenskapen er `false`, som fører til at den gjeldende tilkoblingen lukkes når en forespørsel er fullført. Programmet må gå gjennom godkjenning sekvensen hver gang som utstedes en ny forespørsel. Hvis denne egenskapen settes til `true`, tilkoblingen som brukes til å hente svaret fremdeles åpen når godkjenning er utført. I dette tilfellet andre forespørsler som har egenskapen satt til `true` kan bruke tilkoblingen uten godkjenning på nytt. Med andre ord, hvis en tilkobling er godkjent for bruker A, bruker B kan bruke den tilkoblingen. brukerforespørselen B er oppfylt basert på legitimasjonen for brukeren svar.      > [!CAUTION] > Fordi det er mulig for et program tilkoblingen uten å bli godkjent, må du kontrollere at det er ingen administrative sikkerhetsproblemer i systemet når du angir denne egenskapen `true`. Hvis programmet sender forespørsler for flere brukere (representerer flere brukerkontoer) og bruker på godkjenning for å beskytte ressurser, ikke Sett denne egenskapen til `true` Hvis du ikke bruker tilkoblingen grupper som beskrevet nedenfor.       Du bør vurdere å aktivere denne mekanisme hvis den har ytelsesproblemer med og programmet kjører på en nettserver med integrert Windows-godkjenning.       Aktivering av denne innstillingen åpner systemet for sikkerhetsrisiko. Hvis du angir den <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>egenskapen `true` Pass på at du av følgende:-kjører programmet i et beskyttet miljø for å unngå mulig tilkoblingen trusler.</xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>       Hvis du kontrollerer bakenforliggende-serveren, som et alternativ du bør vurdere å deaktivere godkjenning utholdenhet. Dette øker ytelsen i mindre grad, men det er sikrere. For mer informasjon, kan du søke etter AuthPersistence i MSDN-biblioteket på [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: "Returnerer <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>holde godkjente tilkoblingen åpen. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpClientHandler
  isExternal: false
  name: System.Net.Http.HttpClientHandler
- uid: System.Net.Http.WebRequestHandler.#ctor
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
- uid: System.Net.Security.AuthenticationLevel
  parent: System.Net.Security
  isExternal: true
  name: AuthenticationLevel
  nameWithType: AuthenticationLevel
  fullName: System.Net.Security.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.Http.WebRequestHandler.#ctor*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler
  nameWithType: WebRequestHandler.WebRequestHandler
- uid: System.Net.Http.WebRequestHandler.AllowPipelining*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
