### YamlMime:ManagedReference
items:
- uid: System.Configuration.TypeNameConverter
  id: TypeNameConverter
  children:
  - System.Configuration.TypeNameConverter.#ctor
  - System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  langs:
  - csharp
  name: TypeNameConverter
  nameWithType: TypeNameConverter
  fullName: System.Configuration.TypeNameConverter
  type: Class
  summary: "Konverterer mellom verdiene og typen streng. Denne klassen kan arves."
  remarks: "Denne typen som alle de andre konfigurasjon konverteringsprogram typene, konverterer strenger i konfigurasjonsfilen til og fra de forespørselsparameter av sterk type egenskapene.       Spesielt klassen TypeNameConverter konverterer en <xref:System.String>verdien som tilordnes til konfigurasjonstypen til en <xref:System.Type>verdi og omvendt.</xref:System.Type> </xref:System.String> Refererer til, er klassen ansvarlig for konfigurasjon som den er knyttet til."
  example:
  - "The following example shows how to obtain a type associated with a custom section. For the implementation of the custom section, refer to the code example in the <xref:System.Configuration.ConfigurationConverterBase> class reference.  \n  \n [!code-vb[System.Configuration.TypeNameConverter#1](~/add/codesnippet/visualbasic/t-system.configuration.t_0_1.vb)]\n [!code-cs[System.Configuration.TypeNameConverter#1](~/add/codesnippet/csharp/t-system.configuration.t_0_1.cs)]  \n  \n The following example is a configuration excerpt used by the previous example.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<configuration>  \n  \n  <configSections>  \n    <section name=\"CustomSection\"   \n      type=\"Samples.AspNet.CustomSection,   \n      ConfigurationConverters,   \n      Version=1.0.0.0, Culture=neutral,   \n      PublicKeyToken=null\"   \n      allowDefinition=\"Everywhere\"   \n      allowExeDefinition=\"MachineToApplication\"   \n      restartOnExternalChanges=\"true\" />  \n  </configSections>  \n  \n  <CustomSection fileName=\"default.txt\" maxIdleTime=\"90\"   \n    timeDelay=\"infinite\" cdStr=\"str0, str1\" permission=\"Read\"  \n    maxUsers=\"Infinite\"/>  \n  \n</configuration>  \n```"
  syntax:
    content: 'public sealed class TypeNameConverter : System.Configuration.ConfigurationConverterBase'
  inheritance:
  - System.Object
  - System.ComponentModel.TypeConverter
  - System.Configuration.ConfigurationConverterBase
  implements: []
  inheritedMembers:
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  - System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  platform:
  - net462
- uid: System.Configuration.TypeNameConverter.#ctor
  id: '#ctor'
  parent: System.Configuration.TypeNameConverter
  langs:
  - csharp
  name: TypeNameConverter()
  nameWithType: TypeNameConverter.TypeNameConverter()
  fullName: System.Configuration.TypeNameConverter.TypeNameConverter()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Configuration.TypeNameConverter&quot;> </xref> klasse."
  remarks: "Vanligvis bruker konverteringsprogram typene som er angitt av systemet. Den eneste gangen du må bruke TypeNameConverter konstruktøren er når du oppretter en konverteringstype."
  syntax:
    content: public TypeNameConverter ();
    parameters: []
  overload: System.Configuration.TypeNameConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.Configuration.TypeNameConverter
  langs:
  - csharp
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeNameConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.Configuration.TypeNameConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Konverterer en <xref:System.String>objekt en <xref:System.Type>objektet.</xref:System.Type> </xref:System.String>"
  remarks: "Systemet bruker metoden ConvertFrom ved lesing fra en konfigurasjonsfil for å konvertere en <xref:System.String>verdi til en <xref:System.Type>verdi.</xref:System.Type> </xref:System.String>"
  syntax:
    content: public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object data);
    parameters:
    - id: ctx
      type: System.ComponentModel.ITypeDescriptorContext
      description: "Den <xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> objekt som brukes for konverteringer av datatyper."
    - id: ci
      type: System.Globalization.CultureInfo
      description: "Den <xref:System.Globalization.CultureInfo>objektet som ble brukt under konvertering.</xref:System.Globalization.CultureInfo>"
    - id: data
      type: System.Object
      description: "Den <xref:System.String>objekt for å konvertere.</xref:System.String>"
    return:
      type: System.Object
      description: "Den <xref:System.Type>som representerer den <code> data </code> parameteren.</xref:System.Type>"
  overload: System.Configuration.TypeNameConverter.ConvertFrom*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <xref:System.Type>verdien kan ikke løses.</xref:System.Type>"
  platform:
  - net462
- uid: System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.Configuration.TypeNameConverter
  langs:
  - csharp
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeNameConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.Configuration.TypeNameConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Konverterer en <xref:System.Type>objekt en <xref:System.String>objektet.</xref:System.String> </xref:System.Type>"
  remarks: "Systemet bruker metoden ConvertTo under skriving til en konfigurasjonsfil for å konvertere en <xref:System.Type>verdi til en <xref:System.String>verdi.</xref:System.String> </xref:System.Type>"
  syntax:
    content: public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object value, Type type);
    parameters:
    - id: ctx
      type: System.ComponentModel.ITypeDescriptorContext
      description: "Den <xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> objekt som brukes for konverteringer av datatyper."
    - id: ci
      type: System.Globalization.CultureInfo
      description: "Den <xref:System.Globalization.CultureInfo>objektet som ble brukt under konvertering.</xref:System.Globalization.CultureInfo>"
    - id: value
      type: System.Object
      description: "Verdien som skal konverteres til."
    - id: type
      type: System.Type
      description: "Typen til å konvertere til."
    return:
      type: System.Object
      description: "Den <xref:System.String>som representerer den <code> value </code> parameteren.</xref:System.String>"
  overload: System.Configuration.TypeNameConverter.ConvertTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationConverterBase
  isExternal: false
  name: System.Configuration.ConfigurationConverterBase
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.TypeNameConverter.#ctor
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: TypeNameConverter()
  nameWithType: TypeNameConverter.TypeNameConverter()
  fullName: System.Configuration.TypeNameConverter.TypeNameConverter()
- uid: System.Configuration.TypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeNameConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.Configuration.TypeNameConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Configuration.TypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeNameConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.Configuration.TypeNameConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Configuration.TypeNameConverter.#ctor*
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: TypeNameConverter
  nameWithType: TypeNameConverter.TypeNameConverter
- uid: System.Configuration.TypeNameConverter.ConvertFrom*
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: ConvertFrom
  nameWithType: TypeNameConverter.ConvertFrom
- uid: System.Configuration.TypeNameConverter.ConvertTo*
  parent: System.Configuration.TypeNameConverter
  isExternal: false
  name: ConvertTo
  nameWithType: TypeNameConverter.ConvertTo
