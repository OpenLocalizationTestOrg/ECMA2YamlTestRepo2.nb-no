### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "Representerer en tilbakeringing metode kjøres av en tråd applikasjonsutvalget tråd."
  remarks: "WaitCallback representerer en tilbakeringing metode som du vil kjøre på en <xref:System.Threading.ThreadPool>tråd.</xref:System.Threading.ThreadPool> Opprette representanten ved å sende tilbakeringing metoden WaitCallback-konstruktøren. Metoden må ha signatur vises her.       Kø oppgaven for kjøring ved å sende WaitCallback representanten til <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> Metoden tilbakeringing utfører når en tråd applikasjonsutvalget tråd blir tilgjengelig.      > [!NOTE] > Visual Basic-brukere kan Utelat WaitCallback konstruktøren og ganske enkelt å bruke den `AddressOf` operatoren ved sending av tilbakeringing-metoden til <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Visual Basic kaller automatisk riktig representanten-konstruktøren.       Hvis du vil sende informasjon til tilbakeringing metoden, oppretter et objekt som inneholder nødvendig informasjon og sende den til <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>Når du kø oppgaven for kjøring.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Hver gang tilbakeringing metoden utfører, den `state` parameteren inneholder dette objektet.       Du finner mer informasjon om bruk av tilbakeringinger for å synkronisere tråd applikasjonsutvalget tråder [administrert trådutvalget](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
