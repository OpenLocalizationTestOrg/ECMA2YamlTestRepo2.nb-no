### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "Beskriver en kopi av en transaksjon som gir garantere transaksjonen kan ikke utføres før programmet kommer til resten om arbeid på transaksjonen. Denne klassen kan ikke arves."
  remarks: "DependentTransaction er en kopi av en <xref:System.Transactions.Transaction>objektet som ble opprettet ved hjelp av den <xref:System.Transactions.Transaction.DependentClone%2A>metoden.</xref:System.Transactions.Transaction.DependentClone%2A> </xref:System.Transactions.Transaction>  Det eneste formålet er at programmet skal bli Hold for å garantere at transaksjonen ikke kan utføres under arbeid er fremdeles i transaksjonen (for eksempel på en arbeidstråd).       Når arbeidet i klonede transaksjonen til slutt er fullført, og kan ikke utføres, kan det informere oppretteren av transaksjon ved hjelp av den <xref:System.Transactions.DependentTransaction.Complete%2A>metoden.</xref:System.Transactions.DependentTransaction.Complete%2A> Du kan derfor beholde konsekvent og korrekt av data.       Den <xref:System.Transactions.DependentCloneOption>nummerering brukes til å bestemme virkemåten på commit.</xref:System.Transactions.DependentCloneOption>  Kontrollen virkemåte kan et program for å gå til holder, i tillegg til støtte for samtidighet. For mer informasjon om hvordan du bruker denne opplisting, kan du se [behandle samtidighet med DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Forsøk på å fullføre avhengige transaksjonen."
  remarks: "Kalle denne metoden når underordnet klone ønsker å informere oppretteren av transaksjonen arbeidet er fullført, og transaksjonen ikke kan utføres hvis overordnet også er klar.       Når dette kallet er aktivert, bør du prøve ekstra arbeid på transaksjonen, eller et unntak.       Hvis programdomenet går etter at denne metoden, og før transaksjonen er fullført, transaksjonen kan avbrytes.       **Obs** denne metoden må kalles én gang under avhengige transaksjonen levetid."
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "Forsøk på for ekstra arbeid på transaksjonen etter at denne metoden. Disse omfatter bruke metoder som <> </> *>, <> </> *>, <> </> *>, <> </> *>, eller serialisering operasjoner i transaksjonen."
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
