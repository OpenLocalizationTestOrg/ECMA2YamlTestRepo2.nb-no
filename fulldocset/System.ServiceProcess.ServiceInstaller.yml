### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "Installerer en klasse som utvider <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> implementere en tjeneste. Denne klassen kalles av Installer verktøyet når du installerer et tjenesteprogram."
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref> klasse."
  remarks: "For å installere en tjeneste, kan du opprette et prosjekt installasjonsprogrammet klassen som arver fra den <xref:System.Configuration.Install.Installer>klasse, og angi den <xref:System.ComponentModel.RunInstallerAttribute>attributtet klassen for å `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> I prosjektet, oppretter du en <xref:System.ServiceProcess.ServiceProcessInstaller>forekomst per tjenesteprogrammet, og én <xref:System.ServiceProcess.ServiceInstaller>forekomsten for hver tjeneste i applikasjonen.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Angi egenskapene installasjonen for tjenesten bruker i prosjektet installasjonsprogrammet klassen konstruktøren den <xref:System.ServiceProcess.ServiceProcessInstaller>og <xref:System.ServiceProcess.ServiceInstaller>forekomster, og Legg forekomstene til den <xref:System.Configuration.Install.Installer.Installers%2A>samlingen.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>       Konstruktøren ServiceInstaller genererer automatisk en kilde for hendelsesloggen <xref:System.Diagnostics.EventLog.Log%2A>egenskapen er satt til datamaskinens programloggen, og en <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLog.Log%2A> Når du angir den <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>av den <xref:System.ServiceProcess.ServiceInstaller>, som må være identisk med den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>av tjenesten, den <xref:System.Diagnostics.EventLog.Source%2A>på hendelsesloggen automatisk settes til samme verdi.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Kilden er slettet automatisk hvis det er en feil ved installasjonen av.       ServiceInstaller konstruktøren angir den <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>egenskapen `ServiceStartMode.Manual` til å angi en bruker starte tjenesten.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> Du kan tilbakestille til å `ServiceStartMode.Automatic` til å angi at tjenesten starter når datamaskinen er startet på nytt."
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Overfører egenskaper fra en forekomst av <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> til dette installasjonsprogrammet."
  remarks: "Denne metoden vil sjelden kalles i koden. CopyFromComponent kalles vanligvis bare av utviklere.       CopyFromComponent lagrer tjenestenavnet på den `component` parameter i <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>av den <xref:System.ServiceProcess.ServiceInstaller>forekomsten.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (Fordi parameteren må være en forekomst av en klasse som er avledet fra <xref:System.ServiceProcess.ServiceBase>, `component` vil ha en egenskap av <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>.)      > [!NOTE] > Hvis du bruker Visual Studio designer, denne metoden kalles under utformingen når brukeren klikker `Add Installer` på en komponent som denne klassen er angitt som sitt installasjonsprogram.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase> Installasjonsprogrammet tar all informasjon kan fra live komponenten og lagrer for bruk under installasjonen."
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "Den <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> vil kopiere fra."
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Komponenten du vil knytte til dette installasjonsprogrammet arver ikke fra <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten skal utsettes starte før andre automatisk startet tjenester kjører."
  remarks: "Egenskapen DelayedAutoStart kan brukes på alle tjenestene, men det blir ignorert hvis ikke tjenestens startmodusen er <xref:System.ServiceProcess.ServiceStartMode>.</xref:System.ServiceProcess.ServiceStartMode> Innstillingen trer i kraft neste gang systemet er startet på nytt. Tjenestekontrollbehandlingen garanterer et bestemt starttidspunkt for tjenesten.       En forsinket automatisk oppstart-tjenesten kan ikke være medlem av en belastning sortering gruppe, men den kan avhenger av en annen tjeneste for automatisk oppstart. Hvis et program kaller forsinket automatisk oppstart-tjenesten før den er lastet inn, mislykkes kallet.       Angi denne egenskapen har ingen virkning på operativsystemer som ikke støtter forsinket automatisk oppstart."
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>til forsinkelse automatisk start av tjenesten. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir beskrivelsen for tjenesten."
  remarks: "Bruk Description-egenskapen til beskriver formålet med tjenesten installert til brukeren. Brukeren kan vise tjenestebeskrivelsen i programmer som viser detaljene for installerte tjenester.       For eksempel bruker Windows XP, kan du vise tjenestebeskrivelsen med kommandolinjeverktøyet tjenestekontrollbehandlingen (Sc.exe), eller du kan vise tjenestebeskrivelsen i den **Services** noden for den **Datamaskinbehandling** konsollen."
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Beskrivelsen for tjenesten. Standarden er en tom streng (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir det egendefinerte navnet som identifiserer tjenesten til brukeren."
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "Navnet som er forbundet med tjenesten, som brukes ofte for interaktive verktøy."
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Installerer tjenesten ved å skrive informasjon om tjenesteprogram i registret. Denne metoden er ment å brukes av installasjonsverktøy som behandler metodene riktig automatisk."
  remarks: "Vanligvis skal ikke kalles metodene på <xref:System.ServiceProcess.ServiceInstaller>i koden; de vanligvis kalles bare av Installer verktøyet.</xref:System.ServiceProcess.ServiceInstaller> Installer verktøyet kaller automatisk installasjon-metoden i løpet av installasjonen. Det tar ut feil, hvis nødvendig ved å kalle <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>på objektet som genereres unntaket.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>       Et program Installer rutinen opprettholder informasjon automatisk om komponentene som ble installert, ved hjelp av prosjektet installasjonsprogrammets <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Denne statusinformasjon ble sendt til installasjonen som den `stateSaver` parameteren oppdateres kontinuerlig som den <xref:System.ServiceProcess.ServiceProcessInstaller>forekomsten og hver <xref:System.ServiceProcess.ServiceInstaller>forekomsten er installert av verktøyet.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Det er vanligvis unødvendige for koden til å endre denne statusinformasjon eksplisitt.       Den <xref:System.ServiceProcess.ServiceProcessInstaller>som er tilknyttet din prosjektet klassen installerer installasjonsinformasjon felles for alle <xref:System.ServiceProcess.ServiceInstaller>forekomster i prosjektet.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Hvis denne tjenesten har alt som skiller fra de andre tjenestene i prosjektet installasjonen, installeres tjenestespesifikk informasjonen som denne metoden.       For å installere en tjeneste, kan du opprette et prosjekt installasjonsprogrammet klassen som arver fra den <xref:System.Configuration.Install.Installer>klasse, og angi den <xref:System.ComponentModel.RunInstallerAttribute>attributtet klassen for å `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> I prosjektet, oppretter du en <xref:System.ServiceProcess.ServiceProcessInstaller>forekomst per tjenesteprogrammet, og én <xref:System.ServiceProcess.ServiceInstaller>forekomsten for hver tjeneste i applikasjonen.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Angi egenskapene installasjonen for tjenesten bruker i prosjektet installasjonsprogrammet klassen konstruktøren den <xref:System.ServiceProcess.ServiceProcessInstaller>og <xref:System.ServiceProcess.ServiceInstaller>forekomster, og Legg forekomstene til den <xref:System.Configuration.Install.Installer.Installers%2A>samlingen.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>      > [!NOTE] > Det anbefales at du bruker konstruktøren for å legge til installasjonsprogrammet forekomster; imidlertid Hvis du vil legge til den <xref:System.Configuration.Install.Installer.Installers%2A>samlingen i metoden Installer Husk å utføre de samme tilføyelser samlingen i den <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metoden.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A>       For alle klasser som er avledet fra den <xref:System.Configuration.Install.Installer>klasse tilstanden til den <xref:System.Configuration.Install.Installer.Installers%2A>samlingen må være lik i installasjonen og <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metoder.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Du kan imidlertid unngå vedlikehold av samlingen på tvers av installasjonen og <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metoder hvis du legger til installasjonsprogrammet forekomster til den <xref:System.Configuration.Install.Installer.Installers%2A>samling i tilpassede installasjonsprogrammet klasse-konstruktøren.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "En <xref:System.Collections.IDictionary>som inneholder informasjon om sikkerhetskontekst som er knyttet til installasjonen.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Installasjonen inneholder ikke en <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> for den kjørbare filen.       - eller - filnavnet for samlingen er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller en tom streng.       - eller - tjenestenavnet er ugyldig.       - eller - kan ikke åpne det Service Control Manager."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Visningsnavnet for tjenesten er mer enn 255 tegn."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Systemet kan ikke generere en referanse til tjenesten.       - eller en tjeneste med dette navnet er allerede installert."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir om to installasjonsprogram vil installere den samme tjenesten."
  remarks: "IsEquivalentInstaller angir, for eksempel om to installasjonsprogram vil installere tjenesten samme under samme brukerkonto."
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "En <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref> du sammenligner gjeldende installasjonsprogrammet."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis du kaller <xref:System.ServiceProcess.ServiceInstaller.Install*>på begge disse installasjonsprogram ville ført til å installere den samme tjenesten; ellers, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceInstaller.Install*>"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Ruller tilbake informasjon om tjenesteprogram skrevet til registret av installasjonen. Denne metoden er ment å brukes av installasjonsverktøy som behandler metodene riktig automatisk."
  remarks: "Vanligvis skal ikke kalles metodene på <xref:System.ServiceProcess.ServiceInstaller>i koden; de vanligvis kalles bare av Installer verktøyet.</xref:System.ServiceProcess.ServiceInstaller> Installer verktøyet automatisk kaller den <xref:System.ServiceProcess.ServiceInstaller.Install%2A>metoden under installasjonen.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> Det tar ut feil, hvis nødvendig, ved å kalle tilbakerulling på objektet som generert unntaket.       Et program Installer rutinen opprettholder informasjon automatisk om komponenter allerede er installert, ved hjelp av prosjektet installasjonsprogrammets <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Denne informasjon om, ble sendt til tilbakerulling som den `savedState` parameteren oppdateres kontinuerlig som den <xref:System.ServiceProcess.ServiceProcessInstaller>forekomsten og hver <xref:System.ServiceProcess.ServiceInstaller>forekomsten er installert av verktøyet.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Det er vanligvis unødvendige for koden til å endre denne statusinformasjon eksplisitt."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "En <xref:System.Collections.IDictionary>som inneholder informasjon om sikkerhetskontekst som er knyttet til installasjonen.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir navnet brukes av systemet til å identifisere denne tjenesten. Denne egenskapen må være identisk med den &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt; for tjenesten du vil installere."
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Navnet på tjenesten som skal installeres. Denne verdien må angis før installasjonen-verktøyet forsøk på å installere tjenesten."
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Egenskapen tjenestenavn er ugyldig."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir tjenestene som må kjøre for denne tjenesten til å kjøre."
  remarks: "En tjeneste kan kreve at andre tjenester til å kjøre før den kan starte. Informasjonen fra denne egenskapen er skrevet til en nøkkel i registret. Når brukeren (eller systemet, hvis det automatisk oppstart) prøver å kjøre tjenesten, bekrefter Tjenestekontrollbehandling (SCM) at hver av tjenester i matrisen er allerede startet.       Hvis alle tjenestene i matrisen ikke kjører deretter, prøver SCM å starte dem. Dette omfatter tjenester med `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>       Hvis alle tjenestene som avhenger denne tjenesten ikke starter, starter ikke denne tjenesten. Det er ikke et unntaket Hvis systemet ikke er startet fordi det finnes ingen unntaksbehandling på systemnivå til å oppdage dette. Bestemme hvordan håndtere tjenestefeil start å implementere denne koden. Vanligvis dialogboks en for brukeren ved oppstart hvis en tjeneste ikke starter.       Hvis tjenesten ikke starter, skrives en oppføring i hendelsesloggen for programmet.       Tjenestene som denne tjenesten er avhengig av trenger ikke være i den samme kjørbare filen."
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "En matrise av tjenestene som må kjøre før tjenesten som er knyttet til dette installasjonsprogrammet kan kjøres."
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir hvordan og når denne tjenesten er startet."
  remarks: "Angi starttypen angir at tjenesten startes automatisk etter omstart, eller at en bruker må starte tjenesten manuelt. En tjeneste kan også deaktiveres, angi at den ikke kan startes, manuelt eller programmatisk, før den er aktivert.       Du kan ikke endre <xref:System.ServiceProcess.ServiceInstaller>egenskapsverdier etter installasjonen.</xref:System.ServiceProcess.ServiceInstaller> Hvis du vil endre starttypen, du må avinstallere og installere tjenesten på nytt, eller endre manuelt innstillingen ved hjelp av Service Control Manager."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "En <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> som representerer måten tjenesten er startet. Standard <xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;> </xref>, som angir at tjenesten ikke starter automatisk etter omstart."
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Startmodusen er ikke en verdi for den <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> opplisting."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Avinstallerer tjenesten ved å fjerne informasjon om den fra registret."
  remarks: "Avinstaller første forsøk på å stoppe tjenesten før du avinstallerer den. Unntak ingen Hvis ikke kan stoppe tjenesten, og metoden fortsetter med fjerning av tjenesten.       Vanligvis skal ikke kalles metodene på <xref:System.ServiceProcess.ServiceInstaller>i koden; de vanligvis kalles bare av Installer verktøyet.</xref:System.ServiceProcess.ServiceInstaller> InstallUtil brukes til å avinstallere tjenester, i tillegg til å installere dem på nytt. avinstallerer tar en bryter i kommandolinjen-kall.       Et program avinstallere rutinen opprettholder informasjon automatisk om komponentene avinstalleres, ved hjelp av prosjektet installasjonsprogrammets <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Denne informasjon om, ble sendt til Avinstaller som den `savedState` parameteren oppdateres kontinuerlig som den <xref:System.ServiceProcess.ServiceProcessInstaller>forekomsten og hver <xref:System.ServiceProcess.ServiceInstaller>forekomsten er installert av verktøyet.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Det er vanligvis unødvendige for koden til å endre denne statusinformasjon eksplisitt.       For alle klasser som er avledet fra den <xref:System.Configuration.Install.Installer>klasse tilstanden til den <xref:System.Configuration.Install.Installer.Installers%2A>samlingen må være lik i den <xref:System.ServiceProcess.ServiceInstaller.Install%2A>og avinstallere metoder.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Du kan imidlertid unngå vedlikehold av samlingen på tvers av den <xref:System.ServiceProcess.ServiceInstaller.Install%2A>og avinstallere metoder hvis du legger til installasjonsprogrammet forekomster til den <xref:System.Configuration.Install.Installer.Installers%2A>samling i tilpassede installasjonsprogrammet klasse-konstruktøren.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Install%2A>       Det finnes ingen tilbakerulling funksjoner for å avinstallere, så hvis én tjeneste ikke avinstallere, dette ikke påvirker de andre tjenestene (vanligvis i samme installasjonen prosjektet), blir avinstallert."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "En <xref:System.Collections.IDictionary>som inneholder informasjon om sikkerhetskontekst som er knyttet til installasjonen.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Kan ikke åpne Tjenestekontrollbehandling.       - eller - systemet kan ikke hente en referanse til tjenesten."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
