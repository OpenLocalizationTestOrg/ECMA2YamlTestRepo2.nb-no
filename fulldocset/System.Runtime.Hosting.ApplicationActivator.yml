### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "Inneholder basisklassen for aktivering av manifest-baserte samlinger."
  remarks: "Det er én bestemt forekomst av klassen ApplicationActivator i hver <xref:System.AppDomain>kall rutes til som alle aktivering.</xref:System.AppDomain> Den <xref:System.AppDomainManager>for gjeldende <xref:System.AppDomain>kan gi sine egne egendefinerte ApplicationActivator for dette formålet.</xref:System.AppDomain> </xref:System.AppDomainManager> Hvis en egendefinert ApplicationActivator ikke er angitt, en forekomst av standard ApplicationActivator opprettes.       Følgende trinn beskriver virkemåten til standard <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>metodeimplementering: 1.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>  Kontrollerer om den <xref:System.ActivationContext>av tillegget være aktivert samsvar i <xref:System.ActivationContext>for gjeldende domene; hvis ikke, fortsetter med å trinn 2.</xref:System.ActivationContext> </xref:System.ActivationContext> Ellers utfører samlingen, og returnerer resultatet omsluttet av en objektreferanse.      2.  Aktiverer tillegget i en ny <xref:System.AppDomain>.</xref:System.AppDomain> Følgende trinn kommer til å initialisere en ny <xref:System.AppDomain>bruker den <xref:System.Runtime.Hosting.ActivationArguments>for tilleggsprogrammet.</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.AppDomain>          1.  Oppretter en ny <xref:System.AppDomainSetup>objektet ved hjelp av et <xref:System.Runtime.Hosting.ActivationArguments>objekt som inneholder Aktiveringskonteksten for tilleggsprogrammet.</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.AppDomainSetup>          2.  Kall av <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>metode for å opprette en ny domenet ved hjelp av <xref:System.AppDomainSetup>objektet.</xref:System.AppDomainSetup> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>Metodekall <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName>metode for å hente et <xref:System.Security.Policy.ApplicationTrust>objekt for tilleggsprogrammet.</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> Hvis den <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>returnerer `true`, tillegget er utført.</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> Hvis ikke, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>oppstår en <xref:System.Security.Policy.PolicyException>som angir at kjøringen tillatelse ikke kan anskaffe.</xref:System.Security.Policy.PolicyException> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          4.  Hvis tillegget er klarert kjøres, og deretter et nytt <xref:System.AppDomain>opprettes og konfigurert for den <xref:System.ActivationContext>av tillegget, og tillegget er lastet inn, og kjøres.</xref:System.ActivationContext> </xref:System.AppDomain>          5.  Resultatet av aktivering av tillegget returneres, omsluttet av en objektreferanse.       En egendefinert activator kan skreddersy aktivering av et tillegg til et bestemt sett omstendigheter. For eksempel en egendefinert activator finner en eksisterende <xref:System.AppDomain>å aktivere dette tilleggsprogrammet i stedet for å opprette et nytt domene hver gang.</xref:System.AppDomain>       Følgende trinn beskriver virkemåten for en egendefinert ApplicationActivator som aktiverer en tillegg i en eksisterende <xref:System.AppDomain>: 1.</xref:System.AppDomain>  Egendefinert aktivatoren finner et domene som har samme <xref:System.ActivationContext>som tillegget aktiveres.</xref:System.ActivationContext>      2.  Hvis <xref:System.ActivationContext>har aldri blitt sett før pågår, egendefinerte aktivatoren oppretter en ny <xref:System.AppDomain>for dette <xref:System.ActivationContext>ved å ringe til <xref:System.AppDomain.CreateDomain%2A>metoden direkte, eller delegerer denne aktiviteten <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>i basistabellen klassen.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> </xref:System.AppDomain.CreateDomain%2A> </xref:System.ActivationContext> </xref:System.AppDomain> </xref:System.ActivationContext>      3.  Hvis det er et eksisterende domene med samme <xref:System.ActivationContext>, og deretter aktivatoren kan delegere den <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>metodekall til ApplicationActivator i måldomenet.</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> </xref:System.ActivationContext> Legg merke til at dette er en kontroll på tvers av domener kall til en ApplicationActivator som befinner seg i målet <xref:System.AppDomain>.</xref:System.AppDomain>"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;> </xref> klasse."
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Oppretter en forekomst av applikasjonen som skal aktiveres, ved hjelp av angitte Aktiveringskonteksten."
  remarks: "Denne metoden er ment for manifest-basert aktivering av programmer."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "En <xref href=&quot;System.ActivationContext&quot;> </xref> som identifiserer programmet for å aktivere."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "En <xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> som en tekstbryting for returverdien for kjøring av programmet. Verdien som returneres må være plattformverdiene tilgang til reelle objektet."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Oppretter en forekomst av applikasjonen som skal aktiveres, ved hjelp av angitte Aktiveringskonteksten og egendefinerte Aktiveringsdata."
  remarks: "Denne metoden er ment for manifest-basert aktivering av programmer. Aktiveringsdata består av informasjon, for eksempel spørringen streng del av en URL-adresse."
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "En <xref href=&quot;System.ActivationContext&quot;> </xref> som identifiserer programmet for å aktivere."
    - id: activationCustomData
      type: System.String[]
      description: "Egendefinert Aktiveringsdata."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "En <xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> som en tekstbryting for returverdien for kjøring av programmet. Verdien som returneres må være plattformverdiene tilgang til reelle objektet."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "Oppretter en forekomst av en applikasjon med de angitte <xref href=&quot;System.AppDomainSetup&quot;> </xref> objektet."
  remarks: "Denne metoden er ment for manifest-basert aktivering av programmer."
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "En <xref href=&quot;System.AppDomainSetup&quot;> </xref> objekt med <xref:System.AppDomainSetup.ActivationArguments*>identifiserer programmet for å aktivere.</xref:System.AppDomainSetup.ActivationArguments*>"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "En <xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> som en tekstbryting for returverdien for kjøring av programmet. Verdien som returneres må være plattformverdiene tilgang til reelle objektet."
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "Applikasjons-forekomsten ble ikke kjørt fordi policyinnstillingene på gjeldende programdomenet ikke gir tillatelse for denne applikasjonen til å kjøre."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
