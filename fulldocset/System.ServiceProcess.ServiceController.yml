### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceController
  id: ServiceController
  children:
  - System.ServiceProcess.ServiceController.#ctor
  - System.ServiceProcess.ServiceController.#ctor(System.String)
  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  - System.ServiceProcess.ServiceController.CanPauseAndContinue
  - System.ServiceProcess.ServiceController.CanShutdown
  - System.ServiceProcess.ServiceController.CanStop
  - System.ServiceProcess.ServiceController.Close
  - System.ServiceProcess.ServiceController.Continue
  - System.ServiceProcess.ServiceController.DependentServices
  - System.ServiceProcess.ServiceController.DisplayName
  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  - System.ServiceProcess.ServiceController.GetDevices
  - System.ServiceProcess.ServiceController.GetDevices(System.String)
  - System.ServiceProcess.ServiceController.GetServices
  - System.ServiceProcess.ServiceController.GetServices(System.String)
  - System.ServiceProcess.ServiceController.MachineName
  - System.ServiceProcess.ServiceController.Pause
  - System.ServiceProcess.ServiceController.Refresh
  - System.ServiceProcess.ServiceController.ServiceHandle
  - System.ServiceProcess.ServiceController.ServiceName
  - System.ServiceProcess.ServiceController.ServicesDependedOn
  - System.ServiceProcess.ServiceController.ServiceType
  - System.ServiceProcess.ServiceController.Start
  - System.ServiceProcess.ServiceController.Start(System.String[])
  - System.ServiceProcess.ServiceController.StartType
  - System.ServiceProcess.ServiceController.Status
  - System.ServiceProcess.ServiceController.Stop
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  langs:
  - csharp
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController
  type: Class
  summary: "Representerer en Windows-tjeneste, og gjør det mulig å koble til en tjeneste kjører eller er stoppet, endre den eller få informasjon om den."
  remarks: "Du kan bruke klassen ServiceController kan koble til og kontrollere virkemåten for eksisterende tjenester. Når du oppretter en forekomst av klassen ServiceController, kan du angi egenskapene slik at den samhandler med en bestemt Windows-tjeneste. Du kan deretter bruke klassen starte, stoppe og endre ellers tjenesten.       Du bruker mest sannsynlig ServiceController-komponenten i en administrative kapasitet. Du kan for eksempel opprette en Windows eller webprogrammet som sender egendefinerte kommandoer til en tjeneste via ServiceController-forekomst. Dette er nyttig fordi snapin-modulen Tjenestekontrollbehandling (SCM) Microsoft Management Console ikke støtter egendefinerte kommandoer.       Når du oppretter en forekomst av ServiceController, må du opprette to egenskaper for å identifisere tjenesten som den samvirker: datamaskinnavnet og navnet på tjenesten du vil kontrollere.      > [!NOTE] > Som standard <xref:System.ServiceProcess.ServiceController.MachineName%2A>er satt til den lokale datamaskinen, så du ikke trenger å endre den hvis du vil angi at forekomsten skal peke til en annen datamaskin.</xref:System.ServiceProcess.ServiceController.MachineName%2A>       Forfatteren av tjenesten skriver vanligvis kode som tilpasser handling knyttet til en bestemt kommando. For eksempel en tjeneste kan inneholde kode for å svare på en <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>kommandoen.</xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName> I dette tilfellet egendefinerte behandling for den <xref:System.ServiceProcess.ServiceController.Pause%2A>oppgaven kjører før systemet stopper tjenesten.</xref:System.ServiceProcess.ServiceController.Pause%2A>       Sett med kommandoer som en tjeneste kan behandle avhenger av egenskapene; Du kan for eksempel ikke angi den <xref:System.ServiceProcess.ServiceController.CanStop%2A>egenskapen for en tjeneste som `false`.</xref:System.ServiceProcess.ServiceController.CanStop%2A> Denne innstillingen gjengir den `Stop` kommandoen er ikke tilgjengelig på den bestemte tjenesten; den hindrer deg i stopper tjenesten fra SCM ved å deaktivere knappen nødvendig. Hvis du prøver å stoppe tjenesten fra koden, systemet opphøyer feilmeldingen og viser feilmeldingen &quot;kan ikke stoppe `servicename`.&quot;"
  example:
  - "The following example demonstrates the use of the ServiceController class to control the `SimpleService` service example.  \n  \n [!code-cs[ServiceControllerClass#1](~/add/codesnippet/csharp/t-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._6_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")]

      public class ServiceController : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> klassen som er knyttet til en bestemt tjeneste."
  syntax:
    content: public ServiceController ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> klasse som er knyttet til en eksisterende tjeneste på den lokale datamaskinen."
  remarks: ''
  example:
  - "The following example demonstrates the use of the ServiceController constructor to create a <xref:System.ServiceProcess.ServiceController> object that is used to control a sample service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/m-system.serviceprocess._0_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public ServiceController (string name);
    parameters:
    - id: name
      type: System.String
      description: "Navnet som identifiserer tjenesten på systemet. Dette kan også være visningsnavnet for tjenesten."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>er ugyldig."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> klasse som er knyttet til en eksisterende tjeneste på den angitte datamaskinen."
  remarks: "For den `machineName` parameteren, kan du bruke &quot;.&quot; til å vise den lokale datamaskinen."
  syntax:
    content: public ServiceController (string name, string machineName);
    parameters:
    - id: name
      type: System.String
      description: "Navnet som identifiserer tjenesten på systemet. Dette kan også være visningsnavnet for tjenesten."
    - id: machineName
      type: System.String
      description: "Datamaskinen som tjenesten finnes."
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>er ugyldig.       - eller - <code>machineName</code> er ugyldig."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter en verdi som angir om tjenesten kan midlertidig og fortsetter."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanPauseAndContinue property to determine whether a service can pause and continue. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._8_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public bool CanPauseAndContinue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten kan være midlertidig; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter en verdi som angir om tjenesten skal varsles når systemet avsluttes."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanShutdown property to determine whether a service provides a handler for a shutdown event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public bool CanShutdown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten som skal varsles når systemet avslutter; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceController.CanShutdown*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter en verdi som angir om tjenesten kan stoppes når den er startet."
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanStop property to determine whether a service provides a handler for a stop event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._1_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public bool CanStop { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten kan stoppes og <xref:System.ServiceProcess.ServiceBase.OnStop*>metode kalt; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceController.CanStop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Close
  id: Close
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Kobler fra dette <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> serverforekomsten fra tjenesten og Frigjør alle ressurser som tildelt i forekomsten."
  remarks: "Lukk frigir alle referanser som er knyttet til den <xref:System.ServiceProcess.ServiceController>forekomsten.</xref:System.ServiceProcess.ServiceController>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Close*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Continue
  id: Continue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Fortsetter en tjeneste når den er midlertidig stanset."
  remarks: "Når du kaller fortsette for en tjeneste, statusen først endres til `ContinuePending` og deretter låse Continue-metoden, endres det til `Running`.       Du kan ikke kalle fortsette for tjenesten til domenekontrolleren tjenestestatusen er `Paused`."
  example:
  - "The following example demonstrates the use of the Continue method to continue a paused service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#5](~/add/codesnippet/csharp/m-system.serviceprocess._2_1.cs)]\n [!code-vb[ServiceControllerClass#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public void Continue ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Continue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DependentServices
  id: DependentServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter settet med tjenestene som avhenger av tjeneste som er knyttet til dette <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> forekomsten."
  remarks: "Matrisen DependentServices representerer tjenestene som systemet stopper Hvis programmet kaller <xref:System.ServiceProcess.ServiceController.Stop%2A>for denne tjenesten.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._4_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._4_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] DependentServices { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> forekomster som er knyttet til en tjeneste som er avhengig av denne tjenesten."
  overload: System.ServiceProcess.ServiceController.DependentServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir et egendefinert navn for tjenesten."
  remarks: "Du kan angi visningsnavn til en tom streng (&quot;&quot;), men sette egenskapen til `null` oppstår det et unntak."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._3_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._3_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "Det egendefinerte navnet på tjenesten, som kan brukes til å identifisere tjenesten."
  overload: System.ServiceProcess.ServiceController.DisplayName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Visningsnavn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> og eventuelt frigir administrerte ressurser."
  remarks: "Denne metoden kalles av offentlig `Dispose()`metoden og <xref:System.Object.Finalize%2A>metode.</xref:System.Object.Finalize%2A> `Dispose()`Aktiverer den beskyttede `Dispose(Boolean)` metoden med den `disposing` parameteren satt til `true`. <xref:System.Object.Finalize%2A>aktiverer `Dispose` med `disposing` satt til `false`.</xref:System.Object.Finalize%2A>       Når den `disposing` -parameteren er SANN, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.ServiceProcess.ServiceController>referanser.</xref:System.ServiceProcess.ServiceController> Denne metoden starter den `Dispose()` metode for hver referert objekt."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.ServiceProcess.ServiceController.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  id: ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Utfører en egendefinert kommando på tjenesten."
  remarks: "Når du kaller ExecuteCommand, endres ikke status for tjenesten. Hvis tjenesten er startet, ventestatusen opprettholdes `Running`. Hvis tjenesten ble stoppet, ventestatusen opprettholdes `Stopped`og så videre. For å behandle kommandoen egendefinerte tjenesten må overstyre den <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>metoden og gi et behandlingsprogram for kommandoen ble identifisert av den `command` parameteren.</xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>"
  example:
  - "The following code example shows the use of the ExecuteCommand method to execute custom commands in the `SimpleService` service example.  \n  \n [!code-cs[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/csharp/m-system.serviceprocess._5_1.cs)]\n [!code-vb[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._5_1.vb)]"
  syntax:
    content: public void ExecuteCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "En Programdefinert kommandoen flagg som angir hvilken egendefinert kommandoen som skal kjøres. Verdien må være mellom 128 og 256, med."
  overload: System.ServiceProcess.ServiceController.ExecuteCommand*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices
  id: GetDevices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter enheten driver tjenestene på den lokale datamaskinen."
  remarks: "GetDevices returnerer bare enheten driver services fra den lokale datamaskinen. For å hente ikke enhetsdriveren tjenestene eller tjenester som ikke er drivere, kan du kalle den <xref:System.ServiceProcess.ServiceController.GetServices%2A>metoden.</xref:System.ServiceProcess.ServiceController.GetServices%2A> Sammen gir to metoder tilgang til alle tjenester på en datamaskin."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/m-system.serviceprocess._6_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/m-system.serviceprocess._6_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av typen <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> der hvert element er knyttet til en enhet drivertjeneste på den lokale datamaskinen."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  id: GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter enheten driver tjenestene på den angitte datamaskinen."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetDevices%2A>Returnerer bare enheten driver services fra den angitte datamaskinen.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> For å hente ikke enhetsdriveren tjenestene eller tjenester som ikke er drivere, kan du kalle den <xref:System.ServiceProcess.ServiceController.GetServices%2A>metoden.</xref:System.ServiceProcess.ServiceController.GetServices%2A> Sammen gir to metoder tilgang til alle tjenester på en datamaskin."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Datamaskinen som å hente enheten driver tjenestene."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av typen <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> der hvert element er knyttet til en enhet drivertjeneste på den angitte datamaskinen."
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> machineName </code> parameteren har ugyldig syntaks."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices
  id: GetServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter alle tjenester på den lokale datamaskinen, bortsett fra enheten driver tjenestene."
  remarks: "GetServices returnerer bare ikke-driveren-tjenester og tjenester som ikke er drivere fra den lokale datamaskinen. For å hente enheten driver services, kan du kalle den <xref:System.ServiceProcess.ServiceController.GetDevices%2A>metoden.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> Sammen gir to metoder tilgang til alle tjenester på en datamaskin."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the services that are running on the local computer.  \n  \n [!code-cs[ServiceController#6](~/add/codesnippet/csharp/m-system.serviceprocess._7_1.cs)]\n [!code-cpp[ServiceController#6](~/add/codesnippet/cpp/m-system.serviceprocess._7_1.cpp)]\n [!code-vb[ServiceController#6](~/add/codesnippet/visualbasic/m-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av typen <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> der hvert element er knyttet til en tjeneste på den lokale datamaskinen."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  id: GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter alle tjenester på den angitte datamaskinen, bortsett fra enheten driver tjenestene."
  remarks: "<xref:System.ServiceProcess.ServiceController.GetServices%2A>Returnerer bare ikke-driveren-tjenester og tjenester som ikke er drivere fra den angitte datamaskinen.</xref:System.ServiceProcess.ServiceController.GetServices%2A> For å hente enheten driver services, kan du kalle den <xref:System.ServiceProcess.ServiceController.GetDevices%2A>metoden.</xref:System.ServiceProcess.ServiceController.GetDevices%2A> Sammen gir to metoder tilgang til alle tjenester på en datamaskin."
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Datamaskinen som skal hentes tjenestene."
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av typen <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> der hvert element er knyttet til en tjeneste på den angitte datamaskinen."
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <code> machineName </code> parameteren har ugyldig syntaks."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.MachineName
  id: MachineName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir navnet på datamaskinen som denne tjenesten finnes."
  remarks: "Datamaskinnavnet er navnet på serveren som kjører denne tjenesten uten tegnene foran omvendt skråstrek (\\\\\\\\)."
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "Navnet på datamaskinen som kjører tjeneste som er knyttet til dette <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> forekomsten. Standard er den lokale datamaskinen (&quot;.&quot;)."
  overload: System.ServiceProcess.ServiceController.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Syntaksen maskinnavn er ugyldig."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Pause
  id: Pause
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Stopper en tjenesteoperasjon."
  remarks: "Du kan ikke kalle <xref:System.ServiceProcess.ServiceController.Continue%2A>for tjenesten til domenekontrolleren tjenestestatusen er `Paused`.</xref:System.ServiceProcess.ServiceController.Continue%2A>"
  example:
  - "The following example demonstrates the use of the Pause method to pause a service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._4_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Pause*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Refresh
  id: Refresh
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Oppdaterer verdier ved å tilbakestille egenskapene til gjeldende verdier."
  remarks: "Metoden oppdateringen fører til at den <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, og <xref:System.ServiceProcess.ServiceController.Status%2A>egenskapene som skal tilbakestilles til gjeldende verdier når de neste refereres til.</xref:System.ServiceProcess.ServiceController.Status%2A> </xref:System.ServiceProcess.ServiceController.DependentServices%2A> </xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example demonstrates the use of the Refresh method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._3_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter håndtaket for tjenesten."
  syntax:
    content: public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }
    return:
      type: System.Runtime.InteropServices.SafeHandle
      description: "En <xref:System.Runtime.InteropServices.SafeHandle>som inneholder referansen for tjenesten.</xref:System.Runtime.InteropServices.SafeHandle>"
  overload: System.ServiceProcess.ServiceController.ServiceHandle*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir navnet som identifiserer tjenesten som refererer til denne forekomsten."
  remarks: "Tjenestenavn identifiserer tjenesten i Service Control Manager. Hvis du endrer denne egenskapen, opprettes det <xref:System.ServiceProcess.ServiceController>serverforekomsten for å binde til en annen tjeneste, endres ikke hvilken Tjenestekontrollbehandlingens Microsoft Management Console snapin-modulen viser.</xref:System.ServiceProcess.ServiceController>       Når du implementere en egendefinert tjeneste, må verdien for denne egenskapen være identisk med navnet som er registrert for tjenesten i <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>egenskapen for den tilsvarende <xref:System.ServiceProcess.ServiceInstaller>klasse.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> I koden, og tjenestenavn vanligvis angitt den `main()` -funksjonen for den kjørbare filen.       Når du tilbakestiller egenskapen tjenestenavn, angir metoden som angir egenskapen denne forekomsten <xref:System.ServiceProcess.ServiceController.DisplayName%2A>til en tom streng (&quot;&quot;).</xref:System.ServiceProcess.ServiceController.DisplayName%2A>"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Navnet som identifiserer tjenesten som denne <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> serverforekomsten refererer til. Standarden er en tom streng (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceController.ServiceName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Tjenestenavn er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Syntaksen for egenskapen tjenestenavn er ugyldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Settet med tjenestene som avhenger av denne tjenesten."
  remarks: "Hvis alle tjenestene i matrisen ServicesDependedOn ikke kjører, kan du ikke starte denne tjenesten."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that the Messenger service is dependent on.  \n  \n [!code-cs[ServiceController#4](~/add/codesnippet/csharp/p-system.serviceprocess._2_1.cs)]\n [!code-cpp[ServiceController#4](~/add/codesnippet/cpp/p-system.serviceprocess._2_1.cpp)]\n [!code-vb[ServiceController#4](~/add/codesnippet/visualbasic/p-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "En matrise av <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> forekomster som er knyttet til en tjeneste som må kjøre for denne tjenesten til å kjøre."
  overload: System.ServiceProcess.ServiceController.ServicesDependedOn*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceType
  id: ServiceType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter tjenestetypen som refererer til dette objektet."
  remarks: "Tjenestetypen angir hvordan tjenesten brukes av systemet. Verdien for egenskapen ServiceType representerer et sett med flagg kombineres med bitvis OR-operator."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/p-system.serviceprocess._9_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/p-system.serviceprocess._9_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/p-system.serviceprocess._9_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceType ServiceType { get; }
    return:
      type: System.ServiceProcess.ServiceType
      description: "Én av de <xref href=&quot;System.ServiceProcess.ServiceType&quot;> </xref> verdier som brukes til å angi tjenestetypen nettverk."
  overload: System.ServiceProcess.ServiceController.ServiceType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start
  id: Start
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Starter tjenesten, kast argumenter."
  remarks: "Du kan ikke kalle <xref:System.ServiceProcess.ServiceController.Stop%2A>for tjenesten til domenekontrolleren tjenestestatusen er `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/m-system.serviceprocess._8_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/m-system.serviceprocess._8_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  id: Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Starter en tjeneste, sending av de angitte argumentene."
  remarks: "Du kan ikke kalle <xref:System.ServiceProcess.ServiceController.Stop%2A>for tjenesten til domenekontrolleren tjenestestatusen er `Running`.</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  syntax:
    content: public void Start (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "En matrise med argumenter som sendes til tjenesten ved oppstart."
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten kan ikke startes."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - eller - et medlem i matrisen er <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter en verdi som angir hvordan tjenesten representert av den <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> objekt starter."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "En verdi som angir hvordan tjenesten starter."
  overload: System.ServiceProcess.ServiceController.StartType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Status
  id: Status
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter status for tjenesten som det refereres til i denne forekomsten."
  remarks: "Statusen angir gjeldende status for tjenesten. Settet med mulige verdier inneholder flere som angir om en endring av status kommando venter."
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/p-system.serviceprocess._0_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/p-system.serviceprocess._0_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceControllerStatus Status { get; }
    return:
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Én av de <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> verdier som angir om tjenesten som kjører stoppes eller midlertidig, eller om en start stoppe, stanse midlertidig eller fortsette kommandoen venter."
  overload: System.ServiceProcess.ServiceController.Status*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Stopper tjenesten og ingen av tjenestene som er avhengige av denne tjenesten."
  remarks: "Hvis ingen av tjenestene som er avhengige av denne tjenesten for bruken, vil de stoppes før denne tjenesten er stoppet. Den <xref:System.ServiceProcess.ServiceController.DependentServices%2A>egenskapen inneholder settet med tjenestene som avhenger av dette.</xref:System.ServiceProcess.ServiceController.DependentServices%2A>       Hvis du stopper en tjeneste som avhenger av denne tjenesten, kalle Stop-metoden på tjenesten i Stop-metoden for den overordnede tjenesten. Den <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>egenskapen inneholder tjenestene som avhenger av denne tjenesten.</xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/m-system.serviceprocess._1_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/m-system.serviceprocess._1_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Stop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Det oppstod en feil under tilgang til en system-APIen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten ble ikke funnet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Veldig venter på tjenesten å nå den angitte statusen."
  remarks: "Bruk WaitForStatus til å stoppe en applikasjon behandles til tjenesten har nådd nødvendige statusen.      > [!NOTE] > Den <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>metoden venter omtrent 250 millisekunder mellom hver kontroll.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>Finner ikke tilfellet for tjenesten observerte endre til den `desiredStatus` og deretter umiddelbart til en annen status i dette intervallet.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/82fc1460-0a6f-432e-81a5-_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/82fc1460-0a6f-432e-81a5-_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/82fc1460-0a6f-432e-81a5-_1.vb)]"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Statusen til venter."
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Den <code> desiredStatus </code> -parameteren er ikke en av verdiene som er definert i den <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> opplisting."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Venter for tjenesten å nå den angitte statusen eller angitt for tidsavbrudd for ikke å utløpe."
  remarks: "Bruk <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>å stanse midlertidig et program for behandling før tjenesten har nådd den nødvendige statusen.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>      > [!NOTE] > Den <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>metoden venter omtrent 250 millisekunder mellom hver kontroll.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>Finner ikke tilfellet for tjenesten observerte endre til den `desiredStatus` og deretter umiddelbart til en annen status i dette intervallet.</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "Statusen til venter."
    - id: timeout
      type: System.TimeSpan
      description: "En <xref:System.TimeSpan>-objekt som angir hvor lenge man skal vente på tjenesten å nå den angitte statusen.</xref:System.TimeSpan>"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Den <code> desiredStatus </code> -parameteren er ikke en av verdiene som er definert i den <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref> opplisting."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "Den angitte verdien for den <code> timeout </code> parameteren utløper."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.ServiceProcess.ServiceController.#ctor
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceController.CanShutdown
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
- uid: System.ServiceProcess.ServiceController.Continue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
- uid: System.ServiceProcess.ServiceController.DependentServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceController
    name: ServiceController
    nameWithType: ServiceController
    fullName: ServiceController[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.DisplayName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceController.GetDevices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
- uid: System.ServiceProcess.ServiceController.GetServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
- uid: System.ServiceProcess.ServiceController.MachineName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
- uid: System.ServiceProcess.ServiceController.Refresh
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.ServiceProcess.ServiceController.ServiceName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceType
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.ServiceProcess.ServiceType
- uid: System.ServiceProcess.ServiceController.Start
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.StartType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceController.Status
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
- uid: System.ServiceProcess.ServiceControllerStatus
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceControllerStatus
  nameWithType: ServiceControllerStatus
  fullName: System.ServiceProcess.ServiceControllerStatus
- uid: System.ServiceProcess.ServiceController.Stop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceProcess.ServiceController.#ctor*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController.ServiceController
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceController.CanShutdown*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close
  nameWithType: ServiceController.Close
- uid: System.ServiceProcess.ServiceController.Continue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue
  nameWithType: ServiceController.Continue
- uid: System.ServiceProcess.ServiceController.DependentServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController.DisplayName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose
  nameWithType: ServiceController.Dispose
- uid: System.ServiceProcess.ServiceController.ExecuteCommand*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand
  nameWithType: ServiceController.ExecuteCommand
- uid: System.ServiceProcess.ServiceController.GetDevices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices
  nameWithType: ServiceController.GetDevices
- uid: System.ServiceProcess.ServiceController.GetServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices
  nameWithType: ServiceController.GetServices
- uid: System.ServiceProcess.ServiceController.MachineName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause
  nameWithType: ServiceController.Pause
- uid: System.ServiceProcess.ServiceController.Refresh*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh
  nameWithType: ServiceController.Refresh
- uid: System.ServiceProcess.ServiceController.ServiceHandle*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
- uid: System.ServiceProcess.ServiceController.ServiceName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceController.Start*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start
  nameWithType: ServiceController.Start
- uid: System.ServiceProcess.ServiceController.StartType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
- uid: System.ServiceProcess.ServiceController.Status*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
- uid: System.ServiceProcess.ServiceController.Stop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop
  nameWithType: ServiceController.Stop
- uid: System.ServiceProcess.ServiceController.WaitForStatus*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus
  nameWithType: ServiceController.WaitForStatus
