### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  id: InMemorySymmetricSecurityKey
  children:
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  type: Class
  summary: "Representerer nøkler som genereres ved hjelp av symmetriske algoritmer og lagres bare i den lokale datamaskinens minne."
  remarks: "Denne klassen brukes vanligvis bare av infrastrukturen til transformeringen XML ved hjelp av en symmetrisk nøkkel."
  syntax:
    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityKey
  - System.IdentityModel.Tokens.SymmetricSecurityKey
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> klasse ved hjelp av den symmetriske nøkkelen som er angitt."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den symmetriske nøkkelen.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>er nullengde."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.IdentityModel.Tokens.InMemorySymmetricSecurityKey&quot;> </xref> klasse ved hjelp av den symmetriske nøkkelen som er angitt og en verdi som angir om de binære dataene må klones."
  syntax:
    content: public InMemorySymmetricSecurityKey (byte[] symmetricKey, bool cloneBuffer);
    parameters:
    - id: symmetricKey
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den symmetriske nøkkelen.</xref:System.Byte>"
    - id: cloneBuffer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>skal klones matrise som ble sendt til den `symmetricKey` parameteren; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>symmetricKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>symmetricKey</code>er nullengde."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Dekrypterer den angitte krypterte nøkkelen."
  remarks: "Bruk statiske felt for den <xref:System.IdentityModel.Tokens.SecurityAlgorithms>klassen for å angi algoritme.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "Den kryptografiske algoritmen som ble brukt til å kryptere nøkkelen."
    - id: keyData
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den krypterte nøkkelen.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den dekrypterte nøkkelen.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Krypterer den angitte nøkkelen."
  remarks: "Bruk statiske felt for den <xref:System.IdentityModel.Tokens.SecurityAlgorithms>klassen for å angi algoritme.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "Den kryptografiske algoritmen til å kryptere nøkkelen med."
    - id: keyData
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder nøkkelen.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den krypterte nøkkelen.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, or <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Genererer en avledet nøkkel ved hjelp av angitte kryptografisk algoritme og parametere for gjeldende nøkkel."
  remarks: "Hvis du vil angi P SHA1 som algoritmen kryptografisk, kan du bruke den <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>felt.</xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>"
  syntax:
    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);
    parameters:
    - id: algorithm
      type: System.String
      description: "URIEN som representerer kryptografiske algoritmen som skal brukes til å generere nøkkelen avledede."
    - id: label
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder etikettparameteren for kryptografisk algoritmen.</xref:System.Byte>"
    - id: nonce
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den midlertidige IDen som brukes til å opprette en avledet nøkkel.</xref:System.Byte>"
    - id: derivedKeyLength
      type: System.Int32
      description: "Størrelsen på avledede nøkkelen."
    - id: offset
      type: System.Int32
      description: "Posisjonen avledede nøkkelen er plassert i bytematrise som er returnert fra denne metoden."
    return:
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den avledede nøkkelen.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. Støttede algoritmer er <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  id: GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en transformering at dekrypterer cipher tekst ved hjelp av den angitte kryptografiske algoritmen."
  remarks: "Bruk feltene som representerer dekryptering algoritmer i den <xref:System.IdentityModel.Tokens.SecurityAlgorithms>klassen for å angi algoritme.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "En kryptografisk algoritme dekrypterer cipher tekst, som kryptert XML."
    - id: iv
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder Initialiseringsvektoren (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) for den angitte algoritmen.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "En <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> som representerer dekrypteringstransformering."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  id: GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en overføring som krypterer XML med den kryptografiske algoritmen som er angitt."
  remarks: "Bruk feltene som representerer krypteringsalgoritmer i den <xref:System.IdentityModel.Tokens.SecurityAlgorithms>klassen for å angi algoritme.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);
    parameters:
    - id: algorithm
      type: System.String
      description: "En kryptografisk algoritme som krypterer XML."
    - id: iv
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder Initialiseringsvektoren (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) for den angitte algoritmen.</xref:System.Byte>"
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "En <xref href=&quot;System.Security.Cryptography.ICryptoTransform&quot;> </xref> som representerer transformeringen kryptering."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  id: GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter størrelsen, i biter med Initialiseringsvektoren (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) som kreves for den angitte kryptografiske algoritmen."
  remarks: "Bruk feltene som representerer krypteringsalgoritmer i den <xref:System.IdentityModel.Tokens.SecurityAlgorithms>klassen for å angi algoritme.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public override int GetIVSize (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Kryptografiske algoritmen størrelsen på Initialiseringsvektoren (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>)."
    return:
      type: System.Int32
      description: "Størrelsen, i biter med Initialiseringsvektoren (<xref uid=&quot;langword_csharp_IV&quot; name=&quot;IV&quot; href=&quot;&quot;></xref>) som kreves for kryptografisk algoritmen som er angitt i den <code> algorithm </code> parameteren."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>, and <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  id: GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en forekomst av den angitte kodede nummeralgoritmen."
  syntax:
    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Kodede nummeralgoritmen å hente en forekomst av."
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "En <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> som representerer kodede hash-algoritmen."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. Støttede algoritmer er <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature&quot;> </xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  id: GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en forekomst av den angitte symmetriske algoritmen."
  syntax:
    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Symmetriske algoritmen for å hente en forekomst av."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "En <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> som representerer den symmetriske algoritmen."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>algorithm</code>støttes ikke. The supported algorithms are <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption&quot;></xref>,  <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap&quot;></xref>, <xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap&quot;></xref>, and<xref href=&quot;System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap&quot;></xref>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  id: GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter byte som representerer den symmetriske nøkkelen."
  syntax:
    content: public override byte[] GetSymmetricKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: "En matrise av <xref:System.Byte>som inneholder den symmetriske nøkkelen.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en verdi som angir om den angitte algoritmen bruker asymmetriske nøkler."
  syntax:
    content: public override bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Den kryptografiske algoritmen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Når den angitte algoritmen bruker asymmetriske nøkler; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en verdi som angir om den angitte algoritmen som støttes av denne klassen."
  remarks: "De symmetriske algoritmene som støttes av denne klassen er algoritmer representeres av følgende felt:- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>- <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap></xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> </xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>"
  syntax:
    content: public override bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Den kryptografiske algoritmen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Når den angitte algoritmen som støttes av denne klassen. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter en verdi som angir om den angitte algoritmen bruker symmetriske nøkler."
  syntax:
    content: public override bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Den kryptografiske algoritmen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Når den angitte algoritmen bruker symmetriske nøkler; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Henter størrelsen, i biter av nøkkelen."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "Størrelse i biter av nøkkelen."
  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SymmetricSecurityKey
  isExternal: false
  name: System.IdentityModel.Tokens.SymmetricSecurityKey
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[])
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey(Byte[],Boolean)
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(String,Byte[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(String,Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform(String,Byte[])
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(String,Byte[])
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize(String)
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey()
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey()
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: InMemorySymmetricSecurityKey
  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: InMemorySymmetricSecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: InMemorySymmetricSecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GenerateDerivedKey
  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetDecryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetEncryptionTransform
  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetIVSize
  nameWithType: InMemorySymmetricSecurityKey.GetIVSize
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetKeyedHashAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: GetSymmetricKey
  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey
  isExternal: false
  name: KeySize
  nameWithType: InMemorySymmetricSecurityKey.KeySize
