### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Inneholder en dataflyt som bruker forhandle sikkerhet-protokollen til å godkjenne klienten og eventuelt serveren i klient server-kommunikasjon."
  remarks: "Bruk klassen NegotiateStream for godkjenning og sikre informasjon som sendes mellom en klient og en server. Bruker NegotiateStream, kan du gjøre følgende.      – Send klientens legitimasjon til serveren for representasjon eller delegering.      -Forespørselen servergodkjenning.      -Kryptering og/eller signere data før sending av den.       Godkjenning må utføres før sending av informasjon. -Klienter ber om godkjenning ved hjelp av den synkron <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoder som blokkerer før godkjenningen er fullført, eller den asynkrone <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder, som ikke blokker under venting på for å fullføre godkjenningen.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servere be om godkjenning ved hjelp av den synkron <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> Klienten og eventuelt serveren, er godkjent ved hjelp av forhandle. I Windows 95/98 systemer er Windows NT LAN Manager (NTLM) protokollen som brukes for godkjenning. På andre plattformer av Kerberos brukes protokollen for godkjenning hvis både klienten og serveren støtter. Ellers brukes NTLM. For detaljerte beskrivelser av disse protokollene, kan du se Platform SDK-dokumentasjonen på MSDN, på msdn.microsoft.com/library/. Klassen NegotiateStream utfører godkjenning ved hjelp av Security Support Provider Interface (SSPI).       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å finne ut hvilke sikkerhetstjenester vil bli brukt av NegotiateStream for å sikre dataene under overføring.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> Du kan få informasjon om eksterne klienten og serveren bruker den <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>egenskapen.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt.       Du sender data ved hjelp av synkron <xref:System.Net.Security.NegotiateStream.Write%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Du mottar data ved hjelp av den synkron <xref:System.Net.Security.NegotiateStream.Read%2A>eller asynkron <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Hvis sikkerhet tjenester som kryptering eller logger er aktivert, brukes disse automatisk til datakilden ved NegotiateStream.       NegotiateStream overfører data ved hjelp av en dataflyt som du oppgi ved oppretting av NegotiateStream. Når du angir denne underliggende dataflyten, har du mulighet til å angi om lukking av NegotiateStream lukker underliggende dataflyt også."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> klasse ved hjelp av den angitte <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som brukes av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> for sending og mottak av data.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> klasse parametersettet med de angitte <xref:System.IO.Stream>og flyten avslutning virkemåte.</xref:System.IO.Stream>"
  remarks: "Når du angir `true` for den `leaveStreamOpen` parameter, lukker den <xref:System.Net.Security.NegotiateStream>har ingen innvirkning på den `innerStream` flyten; du må lukke eksplisitt `innerStream` når du ikke lenger trenger den.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "En <xref:System.IO.Stream>objekt som brukes av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> for sending og mottak av data.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>for å angi at lukker dette <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> har ingen innvirkning på `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> til å angi at lukker dette <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> lukker også `innerStream`. Se kommentarer for mer informasjon."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling."
  remarks: "Godkjenningen bruker klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte klient-legitimasjonen."
  remarks: "Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte klient-legitimasjonen og kanal bindingen."
  remarks: "Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>brukes for Utvidet beskyttelse som er sendt til denne metoden i den `binding` parameteren vil hentes av et program fra <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen for den tilknyttede <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte legitimasjonen og godkjenningsalternativer."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>er ikke en gyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>er null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte legitimasjonen godkjenningsalternativer og kanal binding."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>brukes for Utvidet beskyttelse som er sendt til denne metoden i den `binding` parameteren vil hentes av et program fra <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen for den tilknyttede <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>er ikke en gyldig verdi."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon."
  remarks: "Godkjenningen bruker klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker den angitte klient-legitimasjonen."
  remarks: "Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker den angitte klient-legitimasjonen og kanal bindingen."
  remarks: "Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>, og gjensidig godkjenning forespørres.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>brukes for Utvidet beskyttelse som er sendt til denne metoden i den `binding` parameteren vil hentes av et program fra <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen for den tilknyttede <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker den angitte legitimasjonen og godkjenningsalternativer."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>er ikke en gyldig verdi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>er null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker den angitte legitimasjonen godkjenningsalternativer og kanal binding."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>brukes for Utvidet beskyttelse som er sendt til denne metoden i den `binding` parameteren vil hentes av et program fra <xref:System.Net.Security.SslStream.TransportContext%2A>egenskapen for den tilknyttede <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>er ikke en gyldig verdi."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, og sikkerhetsnivået <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Denne metoden blokkerer til operasjonen er fullført. Hvis du ikke blokkerer til operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker policyen angitte Utvidet beskyttelse."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, og sikkerhetsnivået <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Denne metoden blokkerer til operasjonen er fullført. Hvis du ikke blokkerer til operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker angitt legitimasjon og godkjenningsalternativer."
  remarks: "Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Denne metoden blokkerer til operasjonen er fullført. Hvis du ikke blokkerer til operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til serveren.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet til å prøve å r-godkjenning."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker angitt legitimasjon, godkjenningsalternativer og Utvidet beskyttelse policy."
  remarks: "Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Denne metoden blokkerer til operasjonen er fullført. Hvis du ikke blokkerer til operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet til å prøve å r-godkjenning."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, og sikkerhetsnivået <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker policyen angitte Utvidet beskyttelse."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, og sikkerhetsnivået <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker angitt legitimasjon og godkjenningsalternativer."
  remarks: "Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til serveren.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet til å prøve å r-godkjenning."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling som en asynkron operasjon. Godkjenningsprosessen bruker angitt legitimasjon, godkjenningsalternativer og Utvidet beskyttelse policy."
  remarks: "Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Returnerer <xref:System.Threading.Tasks.Task>Oppgaveobjekt som representerer den asynkrone operasjonen.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet til å prøve å r-godkjenning."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Denne metoden ikke blokker."
  remarks: "Godkjenningen bruker klientens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>, og sikkerhetsnivået <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> Den <xref:System.Net.Security.NegotiateStream>klassen vil konstruere SPN brukes for gjensidig godkjenning.</xref:System.Net.Security.NegotiateStream>       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om operasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte legitimasjonen. Denne metoden ikke blokker."
  remarks: "Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker angitt legitimasjon og kanal binding. Denne metoden ikke blokker."
  remarks: "Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte legitimasjonen og godkjenningsalternativer. Denne metoden ikke blokker."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av klienter til å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker den angitte legitimasjonen godkjenningsalternativer og kanal binding. Denne metoden ikke blokker."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Den <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>som brukes for Utvidet beskyttelse.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Den navnet SPN (Service Principal) som identifiserer serveren for å godkjenne."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Denne metoden ikke blokker."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om operasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker policyen angitte Utvidet beskyttelse. Denne metoden ikke blokker."
  remarks: "Godkjenningen bruker serverens <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Ingen navnet SPN (Service Principal) er angitt for serveren. Representasjonsnivået er <xref:System.Security.Principal.TokenImpersonationLevel>sikkerhetsnivået er <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker angitt legitimasjon og godkjenningsalternativer. Denne metoden ikke blokker."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om operasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Kalles av servere for å starte en asynkron operasjon for å godkjenne klienten og eventuelt serveren, i en klient servertilkobling. Godkjenningsprosessen bruker angitt legitimasjon, godkjenningsalternativer og Utvidet beskyttelse policy. Denne metoden ikke blokker."
  remarks: "Bruk av `requiredProtectionLevel` parameteren forespørselen sikkerhet tjenester for data som overføres ved hjelp av godkjente dataflyten. Angi for eksempel hvis du vil at dataene kryptert og signert av <xref:System.Net.Security.ProtectionLevel>verdi.</xref:System.Net.Security.ProtectionLevel> Vellykket godkjenning garanterer ikke som den forespurte <xref:System.Net.Security.ProtectionLevel>har fått.</xref:System.Net.Security.ProtectionLevel> Du må kontrollere <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Hvis den `policy` parameteren er `null`, brukes en policy for Utvidet beskyttelse som er <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>satt til <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden overbelastninger.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Asynkron godkjenningsoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) hvis godkjenningen mislykkes, du mottar en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Den <xref:System.Net.NetworkCredential>som brukes til å opprette identiteten til klienten.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Den <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> som brukes for Utvidet beskyttelse."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Én av de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> verdier, som angir security-tjenester i dataflyten."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier, som angir hvordan serveren kan bruke klientens legitimasjon for å få tilgang til ressurser.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når godkjenning er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Den <> </> *> og <> </> *> på policy for Utvidet beskyttelse sendt den <code> policy </code> parameteren er begge <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 og Windows 98 støttes ikke."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Den <code> policy </code> parameteren er satt til <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> på en plattform som ikke støtter Utvidet beskyttelse."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Starter en asynkron leseoperasjon som viser data fra dataflyten og lagrer den i den angitte matrisen."
  remarks: "Hvis kryptering, logge deg, eller kryptering og er aktivert, leseoperasjonen leser data fra den underliggende dataflyten kontrollerer integriteten til dataene og dekrypterer den. Hvis ingen sikkerhet tjenester som datakryptering eller logger er i bruk, starter denne metoden en asynkron leseoperasjon for underliggende dataflyten.       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke den <xref:System.Net.Security.NegotiateStream.Read%2A>metoden.</xref:System.Net.Security.NegotiateStream.Read%2A>       Asynkron leseoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndRead%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndRead%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) den <xref:System.Net.Security.NegotiateStream>klassen støtter ikke flere samtidige leseoperasjoner.</xref:System.Net.Security.NegotiateStream> Hvis du prøver å starte en leseoperasjon under en annen operasjon kjører allerede i den samme dataflyten en <xref:System.NotSupportedException>et unntak.</xref:System.NotSupportedException>       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som mottar byte lest fra dataflyten.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Den nullbaserte plasseringen i `buffer` vil begynne å lagre dataene lese fra denne dataflyten."
    - id: count
      type: System.Int32
      description: "Maksimalt antall byte som leses fra dataflyten."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når leseoperasjonen er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om leseoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finnes allerede en leseoperasjon pågår."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Starter en asynkron skriveoperasjon skriver <xref:System.Byte>s fra den angitte bufferen til dataflyten.</xref:System.Byte>"
  remarks: "Hvis kryptering, logge deg, eller kryptering og er aktivert, denne metoden lese dataene fra bufferen, krypterer tegn, eller krypterer logger den og overfører den ved hjelp av den underliggende dataflyten. Hvis ingen sikkerhet tjenester som datakryptering eller logger er i bruk, starter denne metoden en asynkron skriveoperasjon på underliggende dataflyten.       Denne metoden, er asynkront og blokkere ikke når operasjonen er fullført. Hvis du vil blokkere før operasjonen er fullført, kan du bruke den <xref:System.Net.Security.NegotiateStream.Read%2A>metoden.</xref:System.Net.Security.NegotiateStream.Read%2A>       Asynkron leseoperasjonen må være fullført kaller den <xref:System.Net.Security.NegotiateStream.EndWrite%2A>metoden.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> Vanligvis metoden startes av den `asyncCallback` delegere. Du finner mer detaljert informasjon om hvordan du bruker asynkrone programming modellen [kaller asynkront synkron metoder](~/add/includes/ajax-current-ext-md.md) den <xref:System.Net.Security.NegotiateStream>klassen støtter ikke flere samtidige skriveoperasjoner.</xref:System.Net.Security.NegotiateStream> Hvis du prøver å starte en skriveoperasjon mens en annen skriveoperasjon allerede kjører på samme dataflyten en <xref:System.NotSupportedException>et unntak.</xref:System.NotSupportedException>       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som leverer byte skrives til dataflyten.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Den nullbaserte plasseringen i `buffer` vil begynne å lese byte skrives til dataflyten."
    - id: count
      type: System.Int32
      description: "En <xref:System.Int32>verdi som angir antall byte som leses fra `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "En <xref:System.AsyncCallback>representanten som refererer til metoden som skal startes når Skriveoperasjonen er fullført.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "En brukerdefinert objekt som inneholder informasjon om Skriveoperasjonen. Dette objektet er sendt til den `asyncCallback` delegere når operasjonen er fullført."
    return:
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>objekt som angir statusen for den asynkrone operasjonen.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finnes allerede en skriveoperasjon pågår."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om det underliggende er lesbar.</xref:System.Boolean>"
  remarks: "Hvis vellykket godkjenning oppstod, denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.CanRead%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.CanRead%2A> Den underliggende dataflyten er angitt når du oppretter en forekomst av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis godkjenning oppstod og den underliggende er lesbar; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om det underliggende er søkbar.</xref:System.Boolean>"
  remarks: "Du bør ikke forsøk på å angi posisjonen for den <xref:System.Net.Security.NegotiateStream>-objekt, eller den underliggende dataflyten.</xref:System.Net.Security.NegotiateStream> Den underliggende dataflyten er angitt når du oppretter en forekomst av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Denne egenskapen returnerer alltid <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om den underliggende Dataflyten støtter tidsavbrudd.</xref:System.Boolean>"
  remarks: "Denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.CanTimeout%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.CanTimeout%2A> Den underliggende dataflyten er angitt når du oppretter en forekomst av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis den underliggende Dataflyten støtter tidsavbrudd; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om det underliggende er skrivbar.</xref:System.Boolean>"
  remarks: "Hvis vellykket godkjenning oppstod, denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.CanWrite%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.CanWrite%2A> Den underliggende dataflyten er angitt når du oppretter en forekomst av <xref:System.Net.Security.NegotiateStream>klassen.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis godkjenning oppstod og den underliggende er skrivbar; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Frigir uforvaltede ressursene som brukes av den <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> og eventuelt frigir administrerte ressurser."
  remarks: "Denne metoden kalles av offentlig `Dispose()`metoden og <xref:System.Object.Finalize%2A>metode.</xref:System.Object.Finalize%2A> `Dispose()`Aktiverer den beskyttede `Dispose(Boolean)` metoden med den `disposing` parameteren satt til `true`. <xref:System.Object.Finalize%2A>aktiverer `Dispose` med `disposing` satt til `false`.</xref:System.Object.Finalize%2A>       Når den `disposing` -parameteren er SANN, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.Net.Security.NegotiateStream>referanser.</xref:System.Net.Security.NegotiateStream> Denne metoden starter den `Dispose()` metode for hver referert objekt."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Slutter en ventende asynkron klienten godkjenning operasjon som ble startet med et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>"
  remarks: "Hvis operasjonen ikke er fullført, som denne metoden før det gjøres. Når godkjenningen lykkes, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt.       Du kan utføre denne operasjonen synkront ved bruk av <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metode.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>forekomsten ble returnert av et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>ikke ble opprettet av et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ingen ventende klientgodkjenning skal fullføres."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Slutter en ventende asynkron klienten godkjenning operasjon som ble startet med et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>"
  remarks: "Hvis operasjonen ikke er fullført, som denne metoden før det gjøres.       Når vellykket godkjenning, må du sjekke den <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>og <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Egenskaper for å avgjøre hvilke security-tjenester som brukes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Se den <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>til å fastslå om gjensidig godkjenning oppstod.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Hvis godkjenningen mislykkes, mottar du en <xref:System.Security.Authentication.AuthenticationException>eller <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> I dette tilfellet kan du prøve godkjenning med en annen legitimasjonstype på nytt.       For å utføre denne operasjonen synkront, kan du bruke den <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metoden.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>forekomsten ble returnert av et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>ikke ble opprettet av et kall til <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "Godkjenningen mislyktes. Du kan bruke dette objektet å prøve på nytt godkjenningen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det er ingen ventende godkjenning for å fullføre."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Slutter en asynkron leseoperasjonen ble startet med et kall til <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  remarks: "Hvis operasjonen ikke er fullført, som denne metoden før det gjøres.       For å utføre denne operasjonen synkront, kan du bruke den <xref:System.Net.Security.NegotiateStream.Read%2A>metoden.</xref:System.Net.Security.NegotiateStream.Read%2A>       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>forekomsten ble returnert av et kall til <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "En <xref:System.Int32>verdi som angir antall byte lest fra den underliggende dataflyten.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult ble ikke opprettet av et kall til <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Leseoperasjonen mislyktes."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Slutter en asynkron skriveoperasjon som ble startet med et kall til <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  remarks: "Hvis operasjonen ikke er fullført, som denne metoden før det gjøres.       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       For å utføre denne operasjonen synkront, kan du bruke den <xref:System.Net.Security.NegotiateStream.Write%2A>metoden.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "En <xref:System.IAsyncResult>forekomsten ble returnert av et kall til <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult ble ikke opprettet av et kall til <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Skriveoperasjonen mislyktes."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Gjør bufrede data skrives til den underliggende enheten."
  remarks: "Denne metoden aktiverer <xref:System.IO.Stream.Flush%2A>for underliggende dataflyten.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en verdi som angir hvordan serveren kan bruke klientens legitimasjon."
  remarks: "Du må godkjennes før du kaller opp denne metoden. Klienter angi representasjonsnivået be om godkjenning ved å kalle en av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Hvis du godkjenne uten å angi en <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>brukes.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Én av de <xref:System.Security.Principal.TokenImpersonationLevel>verdier.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Godkjenning mislyktes eller ikke har startet."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om godkjenningen var vellykket.</xref:System.Boolean>"
  remarks: "Godkjenn klienter ved å ringe det <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servere Godkjenn ved kall av <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis det oppstod en vellykket godkjenning; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om dette <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> bruker datakryptering.</xref:System.Boolean>"
  remarks: "Kryptering bidrar til å beskytte personvernet for dataene. som, hjelper det for å sikre at dataene er i transitt den ikke kan tydes av tredjeparter."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis data er kryptert før overføres via nettverket og dekrypteres når den når det eksterne endepunktet; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om både serveren og klienten har godkjent.</xref:System.Boolean>"
  remarks: "Gjensidig godkjenning er angitt av klienten når klienten ønsker serveren for å angi legitimasjon for godkjenning. Som standard klienter ber om gjensidig godkjenning.       Forhandle protokollen velger NTLM eller Kerberos avhengig sikkerhetsprotokollene som støttes av klienten og serveren. NTLM støtter ikke gjensidig godkjenning."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis serveren har godkjent; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om den lokale siden av tilkoblingen brukes av dette <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> ble godkjent som serveren.</xref:System.Boolean>"
  remarks: "Hvis godkjenning kan ikke eller denne egenskapen returnerer `false`.       For å godkjenne som serveren, kan du kalle den <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis det lokale sluttpunktet ble godkjent som serversiden av godkjente tilkoblingen. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter en <xref:System.Boolean>verdi som angir om dataene som sendes ved hjelp av denne dataflyten er signert.</xref:System.Boolean>"
  remarks: "Data logger bidrar til å beskytte dataene. som, hjelper det mottakeren bestemme om dataene har blitt endret i transitt."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis dataene er signert før overføres; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter lengden på den underliggende dataflyten."
  remarks: "Denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.Length%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.Length%2A> Hvis den underliggende dataflyten er søkbar, vil denne egenskapen vanligvis Iverksett et unntak. Kjøretid bestemmer underliggende dataflyt hvilken kjøretid unntak som er et."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "En <xref:System.Int64>som angir hvor lenge underliggende dataflyt.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Henting av verdien for denne egenskapen støttes ikke når det underliggende er en <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter eller angir gjeldende plassering i den underliggende dataflyten."
  remarks: "Denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.Position%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.Position%2A> Hvis den underliggende dataflyten er søkbar, vil denne egenskapen vanligvis Iverksett et unntak. Kjøretid bestemmer underliggende dataflyt hvilken kjøretid unntak som er et."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "En <xref:System.Int64>som angir posisjonen i underliggende dataflyten.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Leser data fra denne dataflyten og lagrer den i den angitte matrisen."
  remarks: "Metoden leser maksimalt `count` byte fra gjeldende flyten og lagrer dem i `buffer` Start fra `offset`.       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       For å utføre denne operasjonen asynkront, kan du bruke den <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metoden.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som mottar byte lest fra dataflyten.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "En <xref:System.Int32>som inneholder den nullbaserte plasseringen i `buffer` vil begynne å lagre dataene lese fra denne dataflyten.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "En <xref:System.Int32>som inneholder maksimalt antall byte som leses fra dataflyten.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "En <xref:System.Int32>verdi som angir antall byte lest fra den underliggende dataflyten.</xref:System.Int32> Når det er ingen flere data leses, returnerer 0."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Leseoperasjonen mislyktes."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "En leseoperasjon pågår allerede."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter eller angir hvor lang tid en leseoperasjon blokkerer venter data."
  remarks: "Denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.ReadTimeout%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.ReadTimeout%2A> Når du angir denne egenskapen i <xref:System.IO.Stream.ReadTimeout%2A>verdien for den underliggende dataflyten er satt til den angitte verdien.</xref:System.IO.Stream.ReadTimeout%2A>       Hvis det underliggende er en <xref:System.Net.Sockets.NetworkStream>, ReadTimeout i millisekunder og er <xref:System.Threading.Timeout.Infinite>som standard slik som lese operasjoner blir ikke tidsavbrutt.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "En <xref:System.Int32>som angir hvor lang tid det skal gå før en leseoperasjon mislykkes.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter informasjon om identiteten til en ekstern krever dele denne godkjente dataflyten."
  remarks: "Når av klienten, denne egenskapen returnerer en <xref:System.Security.Principal.GenericIdentity>som inneholder den navnet SPN (Service Principal) til serveren og godkjenning brukes.</xref:System.Security.Principal.GenericIdentity> Når av serveren, denne egenskapen returnerer en <xref:System.Security.Principal.WindowsIdentity>som beskriver klienten.</xref:System.Security.Principal.WindowsIdentity> Hvis den <xref:System.Security.Principal.WindowsIdentity>er ikke tilgjengelig informasjon om klient returneres til serveren i <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "En <xref:System.Security.Principal.IIdentity>-objektet som beskriver identiteten til det eksterne endepunktet.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Godkjenning mislyktes eller ikke har startet."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Oppstår <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Ikke kall denne metoden. Den er arvet, men som ikke støttes av <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Denne verdien blir ignorert."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Denne verdien blir ignorert."
    return:
      type: System.Int64
      description: "Oppstår alltid <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Søking støttes ikke i <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Angir hvor lang den underliggende dataflyten."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "En <xref:System.Int64>verdi som angir hvor lang dataflyten.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Skrive det angitte antallet <xref:System.Byte>s til underliggende dataflyt ved hjelp av den angitte bufferen og forskyvning.</xref:System.Byte>"
  remarks: "Hvis kryptering, logge deg, eller kryptering og er aktivert, denne metoden lese dataene fra bufferen, krypterer tegn, eller krypterer logger den og overfører den ved hjelp av den underliggende dataflyten. Hvis ingen sikkerhet tjenester som datakryptering eller logger er i bruk, denne metoden aktiverer <xref:System.IO.Stream.Write%2A>for underliggende dataflyten.</xref:System.IO.Stream.Write%2A>       Denne metoden blokkerer mens Skriveoperasjonen er fullført. Hvis du ikke blokkerer mens operasjonen er fullført, kan du bruke Write-metoden.       Du kan ikke kalle denne metoden før du har godkjent. For å godkjenne, kaller du én av de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, eller <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metoder.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Den <xref:System.Net.Security.NegotiateStream>klassen støtter ikke flere samtidige skriveoperasjoner.</xref:System.Net.Security.NegotiateStream> Hvis du prøver å starte en skriveoperasjon mens en annen skriveoperasjon allerede kjører på samme dataflyten en <xref:System.NotSupportedException>et unntak.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "En <xref:System.Byte>matrise som leverer byte skrevet til dataflyten.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "En <xref:System.Int32>som inneholder den nullbaserte plasseringen i `buffer` vil begynne å lese byte skrives til dataflyten.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "En <xref:System.Int32>som inneholder antall byte som leses fra `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Det finnes allerede en skriveoperasjon pågår."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dette objektet er lukket."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Det oppstod ikke godkjenning."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Henter eller angir hvor lang tid en skriveoperasjon blokkerer venter data."
  remarks: "Denne egenskapen returnerer verdien som returneres ved å bruke den <xref:System.IO.Stream.WriteTimeout%2A>egenskapen i den underliggende dataflyten.</xref:System.IO.Stream.WriteTimeout%2A> Den angitte verdien angir for å angi operasjoner i <xref:System.IO.Stream.WriteTimeout%2A>verdien for den underliggende dataflyten.</xref:System.IO.Stream.WriteTimeout%2A>       Hvis det underliggende er en <xref:System.Net.Sockets.NetworkStream>, WriteTimeout i millisekunder og er <xref:System.Threading.Timeout.Infinite>som standard slik som skrive operasjoner blir ikke tidsavbrutt.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "En <xref:System.Int32>som angir hvor lang tid det skal gå før en skriveoperasjon mislykkes.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
