### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessStartInfo
  id: ProcessStartInfo
  children:
  - System.Diagnostics.ProcessStartInfo.#ctor
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  - System.Diagnostics.ProcessStartInfo.Arguments
  - System.Diagnostics.ProcessStartInfo.CreateNoWindow
  - System.Diagnostics.ProcessStartInfo.Domain
  - System.Diagnostics.ProcessStartInfo.Environment
  - System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  - System.Diagnostics.ProcessStartInfo.ErrorDialog
  - System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  - System.Diagnostics.ProcessStartInfo.FileName
  - System.Diagnostics.ProcessStartInfo.LoadUserProfile
  - System.Diagnostics.ProcessStartInfo.Password
  - System.Diagnostics.ProcessStartInfo.PasswordInClearText
  - System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  - System.Diagnostics.ProcessStartInfo.UserName
  - System.Diagnostics.ProcessStartInfo.UseShellExecute
  - System.Diagnostics.ProcessStartInfo.Verb
  - System.Diagnostics.ProcessStartInfo.Verbs
  - System.Diagnostics.ProcessStartInfo.WindowStyle
  - System.Diagnostics.ProcessStartInfo.WorkingDirectory
  langs:
  - csharp
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
  type: Class
  summary: "Angir et sett med verdier som brukes når du starter en prosess."
  remarks: "ProcessStartInfo brukes sammen med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> Når du starter en prosess ved hjelp av <xref:System.Diagnostics.Process>klasse, du har tilgang til å behandle informasjon i tillegg til som er tilgjengelig når du kobler til en prosess som kjører.</xref:System.Diagnostics.Process>       Du kan bruke klassen ProcessStartInfo for bedre kontroll over du starte prosessen. Du må minst angi den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen, enten manuelt eller bruker konstruktøren.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnavnet er et program eller dokumentet. Her er et dokument definert for alle filtyper som har en åpen eller standard handling knyttet til den. Du kan vise registrerte filtyper og tilknyttede programmer for datamaskinen ved hjelp av den **Mappealternativer** dialogboksen, som er tilgjengelig via operativsystemet. Den **avansert** knappen fører til en dialogboks som viser om det er en åpen handling knyttet til en bestemt registrert filtype.       I tillegg kan du angi andre egenskaper som definerer handlinger som skal utføres med filen. Du kan angi en verdi som er spesifikke for den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen for den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Du kan for eksempel angi &quot;ut&quot; for en dokumenttype. Du kan også angi <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>egenskapsverdier skal kommandolinjeargumenter som sendes til filens åpne prosedyren.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> Hvis du angir et program i redigeringsprogrammet for tekst i for eksempel den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>-egenskapen, kan du bruke den <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>til å angi en tekstfil til er åpen i redigeringsprogrammet.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A>       Standard inndata er vanligvis tastaturet, og standard utdata og standard feilen er vanligvis av skjerm. Du kan bruke den <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, og <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A>egenskapene som skal føre til at prosessen for å få tilbakemelding fra, eller Returner utdata til en fil eller en annen enhet.</xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A> Hvis du bruker den <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, eller <xref:System.Diagnostics.Process.StandardError%2A>Egenskaper i den <xref:System.Diagnostics.Process>komponent, må du først angi den tilsvarende verdien på egenskapen ProcessStartInfo.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.StandardInput%2A> Ellers oppstår systemet det et unntak under du lese eller skrive til dataflyten.       Angi <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>til å angi om du vil starte prosessen ved hjelp av operativsystemet-grensesnittet.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       Du kan endre verdien for egenskapen noen ProcessStartInfo opptil gang prosessen starter. Når du har startet prosessen, har endring av disse verdiene ingen virkning.      > [!NOTE] > Denne klassen inneholder en kobling behov på klassen nivået som gjelder for alle medlemmer. En <xref:System.Security.SecurityException>forårsakes når umiddelbar oppkalleren ikke har tillatelse for fullstendig klarering.</xref:System.Security.SecurityException> For mer informasjon om krav for sikkerhet, kan du se [koblingen krav](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer, providing the destination URLs as ProcessStartInfo arguments.  \n  \n [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_2_1.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      public sealed class ProcessStartInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse uten å angi et navn som skal starte prosessen med."
  remarks: "Du må angi minst feltet <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen før du starter.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnavnet er et program eller dokumentet. I dette tilfellet er et dokument definert for alle filtyper som har en åpen eller standard handling knyttet til den. Du kan vise registrerte filtyper og tilknyttede programmer for datamaskinen ved hjelp av den **Mappealternativer** dialogboksen, som er tilgjengelig via operativsystemet. Den **avansert** knappen fører til en dialogboks som viser om det er en åpen handling knyttet til en bestemt registrert filtype.       Du kan eventuelt også angi andre egenskaper før du begynner prosessen. Den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen leverer handlinger som må utføres, for eksempel &quot;print&quot; med filen som er angitt i den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> </xref:System.Diagnostics.ProcessStartInfo.Verb%2A> <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>Egenskapen leverer en måte å sende kommandolinjeargumenter til filen når systemet åpner det.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>"
  syntax:
    content: public ProcessStartInfo ();
    parameters: []
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse og angir et filnavn for eksempel program eller dokument som du kan starte prosessen."
  remarks: "Filnavnet er et program eller dokumentet. I dette tilfellet er et dokument definert for alle filtyper som har en åpen eller standard handling knyttet til den. Du kan vise registrerte filtyper og tilknyttede programmer for datamaskinen ved hjelp av den **Mappealternativer** dialogboksen, som er tilgjengelig via operativsystemet. Den **avansert** knappen fører til en dialogboks som viser om det er en åpen handling knyttet til en bestemt registrert filtype.       Du kan endre den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen når du kaller denne konstruktøren, opptil gang prosessen starter.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Når du har startet prosessen, har endring av disse verdiene ingen virkning."
  syntax:
    content: public ProcessStartInfo (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Et program eller dokumentet som skal starte en prosess med."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse, angir et filnavn for applikasjonen som skal starte prosessen med, og angir et sett med kommandolinjeargumenter som sendes til programmet."
  remarks: "Filnavnet er et program eller dokumentet. I dette tilfellet er et dokument definert for alle filtyper som har en åpen eller standard handling knyttet til den. Du kan vise registrerte filtyper og tilknyttede programmer for datamaskinen ved hjelp av den **Mappealternativer** dialogboksen, som er tilgjengelig via operativsystemet. Den **avansert** knappen fører til en dialogboks som viser om det er en åpen handling knyttet til en bestemt registrert filtype.       Du kan endre den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eller <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>Egenskaper når du kaller denne konstruktøren, opptil gang prosessen starter.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Når du har startet prosessen, har endring av disse verdiene ingen virkning."
  syntax:
    content: public ProcessStartInfo (string fileName, string arguments);
    parameters:
    - id: fileName
      type: System.String
      description: "Et program som skal starte en prosess med."
    - id: arguments
      type: System.String
      description: "Kommandolinjeargumenter som sendes til programmet når prosessen starter."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  id: Arguments
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir settet med kommandolinjeargumenter som brukes for å starte programmet."
  remarks: ''
  example:
  - "The first example below creates a small application (argsecho.exe) that echos its arguments to the console. The second example creates an application that invokes argsecho.exe to demonstrate different variations for the Arguments property.  \n  \n [!code-vb[Process.Start_static#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#3](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_1.cpp)]  \n  \n [!code-vb[Process.Start_static#2](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_2.vb)]\n [!code-cs[Process.Start_static#2](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_2.cs)]\n [!code-cpp[Process.Start_static#2](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_2.cpp)]"
  syntax:
    content: public string Arguments { get; set; }
    return:
      type: System.String
      description: "En enkelt streng som inneholder argumenter som sendes til målprogrammet som er angitt i den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*> Standarden er en tom streng (&quot;&quot;). Lengden på argumentene legges til lengden på den fullstendige banen til prosessen må være mindre enn 2080 på Windows Vista og tidligere versjoner av Windows-operativsystemet. Lengden må være mindre enn 32699 på Windows 7 og nyere versjoner.       Argumenter analysere og tolkes av målprogrammet, slik at justeres med forventet til dette programmet. For.NET programmer som har vist i eksemplene nedenfor, tolkes mellomrom som skilletegn mellom flere argumenter. En enkelt argument som inneholder mellomrom, må stå i anførselstegn, men disse anførselstegn er ikke overført til målprogrammet. Inkluder i anførselstegn i endelige analysert argument, tre ganger escape hver merke."
  overload: System.Diagnostics.ProcessStartInfo.Arguments*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  id: CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om å starte denne prosessen i et nytt vindu."
  remarks: "Hvis den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen `true` eller <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>og <xref:System.Diagnostics.ProcessStartInfo.Password%2A>Egenskaper er ikke `null`CreateNoWindow egenskapsverdien ignoreres og et nytt vindu er opprettet.</xref:System.Diagnostics.ProcessStartInfo.Password%2A> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>"
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_19_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_19_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_19_1.cs)]
  syntax:
    content: public bool CreateNoWindow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis du skal starte prosessen uten å opprette et nytt vindu som inneholder den. Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Domain
  id: Domain
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som identifiserer domenet som skal brukes for å starte prosessen."
  syntax:
    content: public string Domain { get; set; }
    return:
      type: System.String
      description: "Active Directory-domenet skal brukes ved oppstart av. Egenskapen domenet er primært interessant for brukere i enterprise-miljøer som bruker Active Directory."
  overload: System.Diagnostics.ProcessStartInfo.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Environment
  id: Environment
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter miljøvariabler som gjelder for denne prosessen og de underordnede prosessene."
  remarks: "The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information. Although you cannot directly set the Environment property, you can modify the generic dictionary returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.Environment.Add(\"TempPath\", \"C:\\\\Temp\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the Environment property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.  \n  \n On .NET Framework applications, using the Environment property is the same as using the <xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A> property."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Environment { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "En generell ordliste som inneholder miljøvariablene som gjelder for denne prosessen og de underordnede prosessene. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.Environment*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  id: EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter Søk baner for filer, mapper for midlertidige filer, programspesifikk alternativer og andre lignende informasjon."
  remarks: 'Selv om du ikke kan angi egenskapen EnvironmentVariables, kan du endre den <xref:System.Collections.Specialized.StringDictionary>returneres av egenskapen.</xref:System.Collections.Specialized.StringDictionary> For eksempel følgende kode legger til en miljøvariabel TempPath: `myProcess.StartInfo.EnvironmentVariables.Add(&quot;TempPath&quot;, &quot;C:\\Temp&quot;)`.  Du må angi den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen `false` systemfeilkoden når du har endret egenskapen EnvironmentVariables.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Hvis <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>er `true`, en <xref:System.InvalidOperationException>oppstår når er den <xref:System.Diagnostics.Process.Start%2A>-metoden.</xref:System.Diagnostics.Process.Start%2A> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>'
  syntax:
    content: public System.Collections.Specialized.StringDictionary EnvironmentVariables { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "En streng ordliste som gir miljøvariabler som gjelder for denne prosessen og underordnede prosesser. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  id: ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om en feildialogboksen vises for brukeren hvis prosessen ikke kan startes."
  remarks: >-
    > [!NOTE]

    >  <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> must be `true` if you want to set ErrorDialog to `true`.
  syntax:
    content: public bool ErrorDialog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis en feildialogboksen skal vises på skjermen hvis ikke kan starte prosessen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  id: ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir vindusreferansen skal brukes når en feildialogboksen vises for en prosess som ikke kan startes."
  remarks: "Hvis <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>er `true`, angir egenskapen ErrorDialogParentHandle det overordnede vinduet for dialogboksen som vises.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> Det er lurt å angi en overordnet for å beholde dialogboksen foran programmet."
  syntax:
    content: public IntPtr ErrorDialogParentHandle { get; set; }
    return:
      type: System.IntPtr
      description: "En peker til håndtaket for feildialogboksen resultater fra en prosess starte feil."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.FileName
  id: FileName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir programmet eller dokumentet til å starte."
  remarks: "Du må angi minst egenskapen FileName før du begynner prosessen. Filnavnet er et program eller dokumentet. Et dokument er definert for alle filtyper som har en åpen eller standard handling knyttet til den. Du kan vise registrerte filtyper og tilknyttede programmer for datamaskinen ved hjelp av den **Mappealternativer** dialogboksen, som er tilgjengelig via operativsystemet. Den **avansert** knappen fører til en dialogboks som viser om det er en åpen handling knyttet til en bestemt registrert filtype.       Settet med tilgjengelige filtyper avhenger delvis av verdien for den <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Hvis <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>er `true`, kan du starte alle dokumenter og utføre operasjoner på filen, for eksempel skriver ut, med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Når <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>er `false`, kan du starte bare kjørbare filer med den <xref:System.Diagnostics.Process>komponent.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       Du kan starte ClickOnce-programmet ved å angi egenskapen FileName dit (for eksempel en webadresse) som du installerte programmet. Start ikke ClickOnce-programmet ved å angi plasseringen installert på harddisken."
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_27_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_27_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_27_1.cs)]
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "Navnet på programmet som skal starte, eller navnet på et dokument som en filtype som er tilknyttet et program, og som har en standardverdi åpne handling som er tilgjengelig i den. Standarden er en tom streng (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  id: LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om Windows-brukerprofilen skal lastes inn fra registret."
  remarks: "Denne egenskapen refereres Hvis prosessen startes ved hjelp av brukernavn, passord og domene.       Hvis verdien er `true`, brukerprofil i den `HKEY_USERS` registernøkkelen er lastet inn. Kan ta tid å laste inn profilen. Derfor er det best å bruke denne verdien bare hvis du må få tilgang til informasjonen i den `HKEY_CURRENT_USER` registernøkkel.       Profilen er fjernet i Windows Server 2003 og Windows 2000 etter at den nye prosessen er avsluttet, uavhengig om prosessen har opprettet underordnede prosesser.       Profilen er fjernet etter den nye prosessen i Windows XP, og alle underordnede prosesser som den har opprettet er avsluttet."
  syntax:
    content: public bool LoadUserProfile { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis Windows brukerprofilen skal lastes; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Password
  id: Password
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en sikker streng som inneholder brukerpassordet som skal brukes når du starter prosessen."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and Password are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n> [!NOTE]\n>  Setting the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, and the Password properties in a <xref:System.Diagnostics.ProcessStartInfo> object is the recommended practice for starting a process with user credentials.  \n  \n A <xref:System.Security.SecureString> object is like a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.  \n  \n For more information about secure strings and an example of how to obtain a password to set this property, see the <xref:System.Security.SecureString> class.  \n  \n> [!NOTE]\n>  If you provide a value for the Password property, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public System.Security.SecureString Password { get; set; }
    return:
      type: System.Security.SecureString
      description: "Brukerpassordet som skal brukes når du starter prosessen."
  overload: System.Diagnostics.ProcessStartInfo.Password*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  id: PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir brukerpassord i klartekst skal brukes ved oppstart av."
  syntax:
    content: public string PasswordInClearText { get; set; }
    return:
      type: System.String
      description: "Brukerpassord i ren tekst."
  overload: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  id: RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om feil resultatet av en applikasjon, skrives til det &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; dataflyten."
  remarks: "Når en <xref:System.Diagnostics.Process>skriver tekst til den standard feilflyt teksten vises vanligvis i konsollen.</xref:System.Diagnostics.Process> Ved å omdirigere den <xref:System.Diagnostics.Process.StandardError%2A>dataflyten du kan endre eller undertrykke feil resultatet av en prosess.</xref:System.Diagnostics.Process.StandardError%2A> Du kan for eksempel filtrere teksten, formaterer det på en annen måte, eller skrive utdataene både konsollen og en angitt loggfil.      > [!NOTE] > Må du angi <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>til `false` Hvis du vil angi RedirectStandardError `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Ellers lesing fra den <xref:System.Diagnostics.Process.StandardError%2A>dataflyten oppstår det et unntak.</xref:System.Diagnostics.Process.StandardError%2A>       Den omadresserte <xref:System.Diagnostics.Process.StandardError%2A>kan kopiere dataflyten synkron eller asynkron.</xref:System.Diagnostics.Process.StandardError%2A> Metoder som <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>og <xref:System.IO.StreamReader.ReadToEnd%2A>utføre synkron leseoperasjoner i utdata feilflyt av prosessen.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Disse synkron lese operasjoner ikke fyller ut før den tilknyttede <xref:System.Diagnostics.Process>skriver til den <xref:System.Diagnostics.Process.StandardError%2A>flyten eller lukker dataflyten.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process>       I motsetning <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>starter Asynkrone leseoperasjoner på den <xref:System.Diagnostics.Process.StandardError%2A>dataflyten.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.BeginErrorReadLine%2A> Denne metoden gjør det mulig for en angitt hendelsesbehandling for dataflyten-utdata, og returnerer umiddelbart til oppkalleren, som kan utføre andre arbeid mens utdataene dataflyten er rettet mot hendelsesbehandlingen.      > [!NOTE] > Programmet som behandler asynkrone utdataene kalle den <xref:System.Diagnostics.Process.WaitForExit%2A>metode for å sikre at utdatabufferen har blitt tømt.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synkron lese operasjoner introduserer en avhengighet mellom oppkalleren lesing fra den <xref:System.Diagnostics.Process.StandardError%2A>strøm- og barnet behandle skriving til denne dataflyten.</xref:System.Diagnostics.Process.StandardError%2A> Disse avhengighetene kan føre til vranglås betingelser. Når oppkalleren leser fra omadresserte dataflyten for en underordnet prosess, er det avhengige barnet. Oppkalleren venter på leseoperasjonen inntil barnet skriver til dataflyten eller lukker dataflyten. Når den underordnede prosessen skriver nok data til å fylle den omadresserte dataflyten, er det avhengige av overordnet. Den underordnede prosessen venter på neste Skriveoperasjonen til overordnet leser fra fullstendig dataflyten eller lukker dataflyten. Vranglås betingelsen resultater når oppkalleren og underordnet prosess venter hverandre for å fullføre en operasjon, og ingen kan fortsette. Du kan unngå vranglås ved evaluering av avhengigheter mellom oppkaller og underordnet prosess.       For eksempel viser C# koden nedenfor hvordan du lese fra en omadressert dataflyt og venter til den underordnede prosessen å avslutte.      ```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```Kodeeksemplet unngår en vranglås betingelse ved å kalle `p.StandardError.ReadToEnd` før `p.WaitForExit`. En vranglås betingelse kan skje hvis overordnet behandle kall `p.WaitForExit` før `p.StandardError.ReadToEnd` og underordnet prosess skriver nok tekst for å fylle omdirigerte dataflyten. Den overordnede prosessen vil vente på ubestemt tid for den underordnede prosessen å avslutte. Den underordnede prosessen vil vente på ubestemt tid for overordnet å lese fra fullstendige <xref:System.Diagnostics.Process.StandardError%2A>dataflyten.</xref:System.Diagnostics.Process.StandardError%2A>       Det er et lignende problem når du lese alle text fra standard utdata og standard feil dataflyter. For eksempel utfører følgende C# kode en leseoperasjon på begge dataflyter.      ```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```Kodeeksemplet unngår betingelsen vranglås ved å utføre Asynkrone leseoperasjoner på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> En vranglås betingelse resultat hvis overordnet behandle kall `p.StandardOutput.ReadToEnd` etterfulgt av `p.StandardError.ReadToEnd` og underordnet prosess skriver nok tekst slik at det fyller feilflyt. Den overordnede prosessen vil vente på ubestemt tid underordnet prosess å lukke den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> Den underordnede prosessen vil vente på ubestemt tid for overordnet å lese fra fullstendige <xref:System.Diagnostics.Process.StandardError%2A>dataflyten.</xref:System.Diagnostics.Process.StandardError%2A>       Du kan bruke Asynkrone leseoperasjoner unngå disse avhengigheter og deres potensielle vranglås. Du kan eventuelt unngå betingelsen vranglås ved oppretting av to tråder og lese utdataene til hver dataflyt i en egen tråd."
  example:
  - "The following example uses the `net use` command together with a user-supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  \n  \n [!code-cs[Process_StandardError#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_31_1.cs)]\n [!code-cpp[Process_StandardError#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_31_1.cpp)]\n [!code-vb[Process_StandardError#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_31_1.vb)]"
  syntax:
    content: public bool RedirectStandardError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis feilutdata må skrives til &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  id: RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om inndata for et program er lest fra den &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; dataflyten."
  remarks: "En <xref:System.Diagnostics.Process>kan lese inndatateksten fra den standard inndatastrømmen, vanligvis tastaturet.</xref:System.Diagnostics.Process> Ved å omdirigere den <xref:System.Diagnostics.Process.StandardInput%2A>dataflyten programmatisk kan du angi inndataene til en prosess.</xref:System.Diagnostics.Process.StandardInput%2A> For eksempel i stedet for bruker inndata fra tastaturet, kan du lage tekst fra innholdet i en angitt fil eller utdata fra et annet program.      > [!NOTE] > Må du angi <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>til `false` Hvis du vil angi RedirectStandardInput `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Hvis ikke skriving til den <xref:System.Diagnostics.Process.StandardInput%2A>dataflyten oppstår det et unntak.</xref:System.Diagnostics.Process.StandardInput%2A>"
  example:
  - "The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process. The `sort` command is a console application that reads and sorts text input.  \n  \n The example starts the `sort` command with redirected input. It then prompts the user for text, and passes the text to the `sort` process through the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream. The `sort` results are displayed to the user on the console.  \n  \n [!code-cs[Process_StandardInput#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_43_1.cs)]\n [!code-cpp[Process_StandardInput#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_43_1.cpp)]\n [!code-vb[Process_StandardInput#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_43_1.vb)]"
  syntax:
    content: public bool RedirectStandardInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis inndataene kan lese fra &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  id: RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om den tekstbaserte resultatet av en applikasjon, skrives til det &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; dataflyten."
  remarks: "Når en <xref:System.Diagnostics.Process>skriver tekst til den standard dataflyten teksten vises vanligvis i konsollen.</xref:System.Diagnostics.Process> Ved å angi RedirectStandardOutput `true` å omdirigere den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten du kan endre eller undertrykke resultatet av en prosess.</xref:System.Diagnostics.Process.StandardOutput%2A> Du kan for eksempel filtrere teksten, formaterer det på en annen måte, eller skrive utdataene både konsollen og en angitt loggfil.      > [!NOTE] > Må du angi <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>til `false` Hvis du vil angi RedirectStandardOutput `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Ellers lesing fra den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten oppstår det et unntak.</xref:System.Diagnostics.Process.StandardOutput%2A>       Den omadresserte <xref:System.Diagnostics.Process.StandardOutput%2A>kan kopiere dataflyten synkron eller asynkron.</xref:System.Diagnostics.Process.StandardOutput%2A> Metoder som <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, og <xref:System.IO.StreamReader.ReadToEnd%2A>utføre synkron leseoperasjoner i output-dataflyt av prosessen.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Disse synkron lese operasjoner ikke fyller ut før den tilknyttede <xref:System.Diagnostics.Process>skriver til den <xref:System.Diagnostics.Process.StandardOutput%2A>flyten eller lukker dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process>       I motsetning <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>starter Asynkrone leseoperasjoner på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.BeginOutputReadLine%2A> Dette gjør det angitte hendelsesbehandlingen (se <xref:System.Diagnostics.Process.OutputDataReceived>) for dataflyten utdata og umiddelbart går tilbake til oppkalleren, som kan utføre andre arbeid mens utdataene dataflyten er rettet mot hendelsesbehandlingen.</xref:System.Diagnostics.Process.OutputDataReceived>      > [!NOTE] > Programmet som behandler asynkrone utdataene kalle den <xref:System.Diagnostics.Process.WaitForExit%2A>metode for å sikre at utdatabufferen har blitt tømt.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synkron lese operasjoner introduserer en avhengighet mellom oppkalleren lesing fra den <xref:System.Diagnostics.Process.StandardOutput%2A>strøm- og barnet behandle skriving til denne dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> Disse avhengighetene kan føre til vranglås betingelser. Når oppkalleren leser fra omadresserte dataflyten for en underordnet prosess, er det avhengige barnet. Oppkalleren venter på leseoperasjonen inntil barnet skriver til dataflyten eller lukker dataflyten. Når den underordnede prosessen skriver nok data til å fylle den omadresserte dataflyten, er det avhengige av overordnet. Den underordnede prosessen venter på neste Skriveoperasjonen til overordnet leser fra fullstendig dataflyten eller lukker dataflyten. Vranglås betingelsen resultater når oppkalleren og underordnet prosess venter hverandre for å fullføre en operasjon, og ingen kan fortsette. Du kan unngå vranglås ved evaluering av avhengigheter mellom oppkaller og underordnet prosess.       For eksempel viser C# koden nedenfor hvordan du lese fra en omadressert dataflyt og venter til den underordnede prosessen å avslutte.      ```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```Kodeeksemplet unngår en vranglås betingelse ved å kalle `p.StandardOutput.ReadToEnd` før `p.WaitForExit`. En vranglås betingelse kan skje hvis overordnet behandle kall `p.WaitForExit` før `p.StandardOutput.ReadToEnd` og underordnet prosess skriver nok tekst for å fylle omdirigerte dataflyten. Den overordnede prosessen vil vente på ubestemt tid for den underordnede prosessen å avslutte. Den underordnede prosessen vil vente på ubestemt tid for overordnet å lese fra fullstendige <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A>       Det er et lignende problem når du lese alle text fra standard utdata og standard feil dataflyter. For eksempel utfører følgende C# kode en leseoperasjon på begge dataflyter.      ```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```Kodeeksemplet unngår betingelsen vranglås ved å utføre Asynkrone leseoperasjoner på den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> En vranglås betingelse resultat hvis overordnet behandle kall `p.StandardOutput.ReadToEnd` etterfulgt av `p.StandardError.ReadToEnd` og underordnet prosess skriver nok tekst slik at det fyller feilflyt. Den overordnede prosessen vil vente på ubestemt tid underordnet prosess å lukke den <xref:System.Diagnostics.Process.StandardOutput%2A>dataflyten.</xref:System.Diagnostics.Process.StandardOutput%2A> Den underordnede prosessen vil vente på ubestemt tid for overordnet å lese fra fullstendige <xref:System.Diagnostics.Process.StandardError%2A>dataflyten.</xref:System.Diagnostics.Process.StandardError%2A>       Du kan bruke Asynkrone leseoperasjoner unngå disse avhengigheter og deres potensielle vranglås. Du kan eventuelt unngå betingelsen vranglås ved oppretting av to tråder og lese utdataene til hver dataflyt i en egen tråd."
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_20_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_20_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_20_1.vb)]
  syntax:
    content: public bool RedirectStandardOutput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis utdata må skrives til &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  id: StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir den foretrukne kodingen for feilutdata."
  remarks: "Hvis verdien for egenskapen StandardErrorEncoding `null`, prosessen bruker standard feil standardkodingen for feilutdata. Egenskapen StandardErrorEncoding må angis før prosessen er startet. Angi denne egenskapen er det ikke sikkert at prosessen vil bruke den angitte kodingen; prosessen vil bruke bare koding den støtter. Applikasjonen som skal testes for å finne ut hvilken koding støttes."
  syntax:
    content: public System.Text.Encoding StandardErrorEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Et objekt som representerer den foretrukne kodingen for feilutdata. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  id: StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir den foretrukne kodingen for standard utdata."
  remarks: "Hvis verdien for egenskapen StandardOutputEncoding `null`, prosessen bruker standard utdata standardkodingen for standard utdata. Egenskapen StandardOutputEncoding må angis før prosessen er startet. Angi denne egenskapen er det ikke sikkert at prosessen vil bruke den angitte kodingen. Applikasjonen som skal testes for å finne ut hvilken koding prosessen støtter."
  syntax:
    content: public System.Text.Encoding StandardOutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Et objekt som representerer den foretrukne kodingen for standard utdata. Standard <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UserName
  id: UserName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir brukernavnet som skal brukes ved oppstart av."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if UserName and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the UserName property is not `null` or an empty string, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public string UserName { get; set; }
    return:
      type: System.String
      description: "Brukernavnet som skal brukes for å starte prosessen."
  overload: System.Diagnostics.ProcessStartInfo.UserName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  id: UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir en verdi som angir om du vil bruke operativsystemet-grensesnittet ikke starte prosessen."
  remarks: "Når egenskapen settes `false` kan du omadressere inndata, output og feil dataflyter.      > [!NOTE] > UseShellExecute må være `false` hvis den <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>egenskapen er ikke `null` eller en tom streng eller et <xref:System.InvalidOperationException>vil bli utløst når den <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName>-metoden.</xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A>       Når du bruker operativsystemet grensesnittet for å starte prosesser, kan du starte alle dokumenter (som alle registrerte filtyper som er knyttet til en kjørbar fil som har en åpen standardhandling) og utføre operasjoner på filen, for eksempel skriver ut, ved hjelp av den <xref:System.Diagnostics.Process>objektet.</xref:System.Diagnostics.Process> Når UseShellExecute er `false`, kan du starte bare kjørbare filer ved hjelp av den <xref:System.Diagnostics.Process>objektet.</xref:System.Diagnostics.Process>      > [!NOTE] > UseShellExecute må være `true` Hvis du angir den <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>egenskapen `true`.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>       Den <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen virkemåten forskjellig avhengig av verdien for egenskapen UseShellExecute.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Når UseShellExecute er `true`, <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen angir plasseringen for den kjørbare filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Hvis <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>er en tom streng antas det at gjeldende katalog inneholder den kjørbare filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>       Når UseShellExecute er `false`, <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>egenskapen brukes ikke til å finne den kjørbare filen.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Den brukes i stedet bare av prosessen som er startet og har betydning bare i konteksten til den nye prosessen. Når UseShellExecute er `false`, <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>kan ha en fullstendig bane til den kjørbare filen eller enkelt kjørbare navn som systemet prøver å finne i mapper som er angitt i PATH-miljøvariabelen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A>"
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_44_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_44_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_44_1.vb)]
  syntax:
    content: public bool UseShellExecute { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis grensesnittet som skal brukes ved oppstart av; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Hvis prosessen skal opprettes direkte fra den kjørbare filen. Standard <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verb
  id: Verb
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir verbet skal brukes når du åpner programmet eller dokumentet som er angitt av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "Hver filtype har et eget sett med verb som kan oppnås ved hjelp av den <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> For eksempel den &quot;`print`&quot; verbet skrives ut et dokument som ble angitt ved hjelp av <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Standardverbet kan angis ved hjelp av en tom streng (&quot;&quot;). Eksempler på verb er &quot;Rediger&quot;, &quot;Åpne&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; og &quot;Printto&quot;. Du må bruke bare verb som vises i settet med verb som returneres av den <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>       Når du bruker egenskapen Verb, du må inkludere filtypen når du angir verdien for den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filnavnet trenger ikke å ha en filtype Hvis du angir en verdi for egenskapen Verb manuelt."
  example:
  - "The following code example starts a new process by using the specified verb and file name. This code example is part of a larger example provided for the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#4](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_9_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#4](~/add/codesnippet/csharp/p-system.diagnostics.pro_9_1.cs)]"
  syntax:
    content: public string Verb { get; set; }
    return:
      type: System.String
      description: "Handling for å ta med filen som åpnes av prosessen. Standarden er en tom streng (&quot;&quot;), som betyr ingen handling."
  overload: System.Diagnostics.ProcessStartInfo.Verb*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  id: Verbs
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter settet med verb som er tilknyttet filtypen som er angitt av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "Egenskapen verb kan du bestemme verb som kan brukes med filen fra den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Du kan angi den <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>egenskapen med verdien for en hvilken som helst verbet i settet.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> Eksempler på verb er &quot;Rediger&quot;, &quot;Åpne&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; og &quot;Printto&quot;.       Når du bruker egenskapen verb, du må inkludere filtypen når du angir verdien for den <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Filtypen bestemmer hvilke verb som mulig."
  example:
  - "The following code example displays the defined verbs for the chosen file name. If the user selects one of the defined verbs, the example starts a new process using the selected verb and the input file name.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_7_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_7_1.cs)]"
  syntax:
    content: public string[] Verbs { get; }
    return:
      type: System.String[]
      description: "Handlinger som systemet kan brukes til filen som er angitt av den <xref:System.Diagnostics.ProcessStartInfo.FileName*>egenskapen.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  overload: System.Diagnostics.ProcessStartInfo.Verbs*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  id: WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Henter eller angir tilstanden vinduet skal brukes når prosessen er startet."
  remarks: ''
  example:
  - >-
    [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_42_1.vb)]
     [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_42_1.cs)]
     [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_42_1.cpp)]
  syntax:
    content: public System.Diagnostics.ProcessWindowStyle WindowStyle { get; set; }
    return:
      type: System.Diagnostics.ProcessWindowStyle
      description: "En av opplistingsverdiene som som angir om prosessen startes i et vindu som er maksimert minimert, normal (ingen maksimert eller minimert), eller det er ikke synlig. Standard <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.WindowStyle*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Vindusstilen er ikke én av de <xref href=&quot;System.Diagnostics.ProcessWindowStyle&quot;> </xref> opplisting medlemmer."
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  id: WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Når den <> </> *> egenskapen <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, henter eller angir arbeidsmappen for prosessen startes. Når <> </> *> er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, henter eller angir mappen som inneholder prosessen startes."
  remarks: "> [!IMPORTANT]\n>  The WorkingDirectory property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the directory is already part of the system path variable, you do not have to repeat the directory's location in this property.  \n  \n The WorkingDirectory property behaves differently when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` than when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the WorkingDirectory property specifies the location of the executable. If WorkingDirectory is an empty string, the current directory is understood to contain the executable.  \n  \n> [!NOTE]\n>  When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the working directory of the application that starts the executable is also the working directory of the executable.  \n  \n When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, the WorkingDirectory property is not used to find the executable. Instead, its value applies to the process that is started and only has meaning within the context of the new process."
  syntax:
    content: public string WorkingDirectory { get; set; }
    return:
      type: System.String
      description: "Når <> </> *> er <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, fullstendige navnet på mappen som inneholder prosessen startes. Når den <> </> *> egenskapen <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, arbeidsmappen for prosessen startes. Standarden er en tom streng (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessStartInfo.Domain
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessStartInfo.FileName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessWindowStyle
  parent: System.Diagnostics
  isExternal: false
  name: ProcessWindowStyle
  nameWithType: ProcessWindowStyle
  fullName: System.Diagnostics.ProcessWindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
- uid: System.Diagnostics.ProcessStartInfo.#ctor*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo.ProcessStartInfo
- uid: System.Diagnostics.ProcessStartInfo.Arguments*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
- uid: System.Diagnostics.ProcessStartInfo.Domain*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
- uid: System.Diagnostics.ProcessStartInfo.FileName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
