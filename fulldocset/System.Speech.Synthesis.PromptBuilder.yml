### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.PromptBuilder
  id: PromptBuilder
  children:
  - System.Speech.Synthesis.PromptBuilder.#ctor
  - System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  - System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  - System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.ClearContent
  - System.Speech.Synthesis.PromptBuilder.Culture
  - System.Speech.Synthesis.PromptBuilder.EndParagraph
  - System.Speech.Synthesis.PromptBuilder.EndSentence
  - System.Speech.Synthesis.PromptBuilder.EndStyle
  - System.Speech.Synthesis.PromptBuilder.EndVoice
  - System.Speech.Synthesis.PromptBuilder.IsEmpty
  - System.Speech.Synthesis.PromptBuilder.StartParagraph
  - System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartSentence
  - System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  - System.Speech.Synthesis.PromptBuilder.ToXml
  langs:
  - csharp
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
  type: Class
  summary: "Oppretter et tomt <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref> objekt og inneholder metoder for å legge til innhold, ved å velge stemmer, kontrollerer stemme attributter og kontrollere uttalen av tale."
  remarks: "PromptBuilder, kan du legge til en rekke innholdstyper til en melding, inkludert ren tekst, SSML markup (som en streng eller en fil) som er registrert lyd eller med et annet PromptBuilder-objekt.       Hvis du vil føye til tekst til et objekt for PromptBuilder og kontrollere eventuelt stemme attributter som utheving, ofte og volum, bruk av <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>metoder.</xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>  Du kan også kontrollere stemme attributter som en gruppe med den <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>og <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>metoder.</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> </xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>       Du kan legge til tekst og kontrollere hva data eller hvordan det uttales ved hjelp av den <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, eller <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>metoder.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>       Endre merkede stemme i meldingen med en av de overbelastet <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>metoder, gi navn til en bestemt stemme vil bruke, og angi kreves stemme egenskaper, for eksempel alder og kjønn.</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>       Hvis du vil generere tale fra et PromptBuilder-objekt, kan du sende den som et argument til den <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>metoden.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>       Hvis du vil ha mer informasjon, se [konstruere komplekse spør](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4)."
  syntax:
    content: public class PromptBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Oppretter en ny forekomst av den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  id: '#ctor(System.Globalization.CultureInfo)'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Oppretter en ny forekomst av den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> klasse og angir en kultur."
  remarks: "Denne konstruktøren angir verdien for den <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Den <xref:System.Speech.Synthesis.SpeechSynthesizer>objektet vil prøve å velge en installert stemme som støtter språket som er angitt av den `culture` parameteren til å behandle ledeteksten.</xref:System.Speech.Synthesis.SpeechSynthesizer> Hvis en stemme med den angitte kulturen finnes, vil bli brukt. Hvis en stemme med den angitte kulturen ikke blir funnet, brukes standard stemmen.       Til riktig Uttal ordene på språket som er angitt av den `culture` parameteren en motor for syntese (tekst til tale eller TTS) som støtter språket må være installert. En installert TTS-motor kalles en stemme. Hvis du vil ha informasjon om hvilke stemmer er installert for en bestemt kultur, kan du bruke den <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoden.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows og System.Speech API godta alle gyldige språket land-koder som verdier for `culture`. TTS motorer som ble sendt med Windows 7 støtter følgende språk land koder:-en-US. Engelsk (USA) - zh-CN. Kinesisk (Kina) - zh-TW. Kinesisk (Taiwan) to-bokstav språkkoder for eksempel &quot;no&quot; er også tillatt."
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo(\"en-US\"));  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML:  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Gir informasjon om en bestemt kultur, for eksempel språket, navnet på skriving systemet, kalenderen som skal brukes for språket og hvordan til å formatere datoer og sortere strenger."
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  id: AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer angitte lydfilen til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  syntax:
    content: public void AppendAudio (string path);
    parameters:
    - id: path
      type: System.String
      description: "En fullstendig bane til lydfilen."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  id: AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer lydfilen på den angitte URIEN til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  remarks: ''
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n    // Add a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"How are you today?\");  \n    builder.AppendAudio(new Uri (\"http://www.speech.microsoft.com/ding.wav\"));  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  How are you today?  \n  <audio src=\"http://www.speech.microsoft.com/ding.wav\" />  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "URIEN for lydfilen."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  id: AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Føyer til den angitte lydfil alternativ tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  remarks: "Tale syntese motoren leser den alternative teksten hvis lydfilen ikke kan spilles."
  example:
  - "The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n  \n    // Concatenate a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendAudio(new Uri (\"C:\\\\OnHold.wav\"), \"Your call will be answered in the order it was received\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  <audio src=\"C:\\OnHold.wav\"> Your call will be answered in the order it was received. </audio>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile, string alternateText);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "URIEN for lydfilen."
    - id: alternateText
      type: System.String
      description: "En streng som inneholder alternativ tekst som representerer lyden."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  id: AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Legger til et bokmerke til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "En syntese-motor genererer en <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>hendelse hvis det oppstår et bokmerke når du snakker bedt om å bruke den <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, eller <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>metoder.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>"
  example:
  - "The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt and append bookmarks.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.AppendBookmark(\"Daytime forecast\");  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.AppendBookmark(\"Nightime forecast\");  \n  \n        // Add a handler for the BookmarkReached event.  \n        synth.BookmarkReached +=  \n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write the name and position of the bookmark to the console.  \n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \n    {  \n      Console.WriteLine(\"Bookmark ({0}) reached at: {1} \",  \n        e.Bookmark, e.AudioPosition);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBookmark (string bookmarkName);
    parameters:
    - id: bookmarkName
      type: System.String
      description: "En streng som inneholder navnet på det nye bokmerket."
  overload: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  id: AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer en pause til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Denne metoden angir ikke en varighet for bruddet. Den <xref:System.Speech.Synthesis.SpeechSynthesizer>bestemmer en varighetsverdi basert på linguistic kontekst.</xref:System.Speech.Synthesis.SpeechSynthesizer>"
  example:
  - "The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.\");  \n        builder.AppendBreak();  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  id: AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer en pause til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir styrken (varighet)."
  remarks: "Verdiene i den <xref:System.Speech.Synthesis.PromptBreak>opplisting representere en rekke skille intervallene (stanses midlertidig) mellom ordgrensene.</xref:System.Speech.Synthesis.PromptBreak> Tale syntese motoren bestemmer nøyaktige varigheten for intervallet. Når en pause forespørres, sendes en av disse verdiene i tekst til tale (TTS)-motoren som inneholder en tilordning mellom disse verdiene, og de tilhørende millisekunder break verdiene."
  example:
  - "The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(PromptBreak.Medium);  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);
    parameters:
    - id: strength
      type: System.Speech.Synthesis.PromptBreak
      description: 'Angir hvor lenge pausen, med følgende økende verdier:'
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  id: AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer en pause på den angitte varigheten til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "En pause kan brukes til å kontrollere stanses midlertidig og andre prosodic grensene mellom ord. En pause er valgfrie. Hvis en pause ikke finnes, bestemmer synthesizeren mellomrom mellom ord avhengig linguistic konteksten."
  example:
  - "The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(new TimeSpan(15000000));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendBreak (TimeSpan duration);
    parameters:
    - id: duration
      type: System.TimeSpan
      description: "Klokkeslettet i merker, der én aksemerkene er lik 100 nanosekunder."
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  id: AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer en <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt til et annet <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: ''
  example:
  - "The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\showtimes.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\showtimes.wav\");  \n  \n        // Build child prompts.  \n        PromptBuilder theatreA = new PromptBuilder();  \n        theatreA.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30\");  \n        theatreA.AppendBreak(PromptBreak.Large);  \n        PromptBuilder theatreB = new PromptBuilder();  \n        theatreB.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Build the parent prompt and append the two child prompts.  \n        PromptBuilder showTimes = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        showTimes.AppendText(  \n          \"The following are the show times for tonight's movies:\");  \n        showTimes.AppendPromptBuilder(theatreA);  \n        showTimes.AppendPromptBuilder(theatreB);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(showTimes);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "Innhold å tilføye."
  overload: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  id: AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer filen SSML på den angitte banen til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Den SSML filen må være en XML-format som samsvarer med den [tale syntese Markup Language (SSML) versjon 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) spesifikasjonen.       Du kan også legge SSML markup som en streng med <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(\"c:\\\\test\\\\Weather.ssml\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (string path);
    parameters:
    - id: path
      type: System.String
      description: "En fullstendig bane til SSML-filen som skal tilføyes."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  id: AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer SSML filen på den angitte URIEN til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Den SSML filen må være en XML-format som samsvarer med den [tale syntese Markup Language (SSML) versjon 1.0](http://www.w3.org/TR/speech-synthesis/) spesifikasjonen.       Du kan også legge SSML markup som en streng med <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(new Uri(\"c:\\\\test\\\\Weather.ssml\"));  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (Uri ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Uri
      description: "En fullstendig kvalifisert URI i filen SSML skal tilføyes."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  id: AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer en `XMLReader` objektet som refererer til en SSML ledeteksten den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Den SSML filen må være en XML-format som samsvarer med den [tale syntese Markup Language (SSML) versjon 1.0](http://www.w3.org/TR/speech-synthesis/) spesifikasjonen.       Du kan også legge SSML markup som en streng med <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.  \n  \n```c#  \nusing System;  \nusing System.Xml;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Create the path to the SSML file.  \n        string weatherFile = Path.GetFullPath(\"c:\\\\test\\\\Weather.xml\");  \n        PromptBuilder builder = null;  \n  \n        // Create an XML Reader from the file, create a PromptBuilder and   \n        // append the XmlReader.  \n        if (File.Exists(weatherFile))  \n        {  \n          XmlReader reader = XmlReader.Create(weatherFile);  \n          builder = new PromptBuilder();  \n          builder.AppendSsml(reader);  \n          reader.Close();  \n        }  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendSsml (System.Xml.XmlReader ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Xml.XmlReader
      description: "Et fullstendig kvalifisert navn til XML-filen som skal tilføyes."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  id: AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Legger til den angitte strengen som inneholder SSML markup til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "You must use the appropriate escape characters when appending SSML markup. Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:  \n  \n```c#  \nbuilder.AppendSsmlMarkup(\"<say-as interpret-as = \\\"characters\\\"> chair </say-as>\");  \n```  \n  \n> [!NOTE]\n>  The string used as an argument to AppendSsmlMarkup cannot include a `speak` element.  \n  \n When using AppendSsmlMarkup to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:  \n  \n-   International Phonetic Alphabet (IPA)  \n  \n-   Universal Phone Set (UPS)  \n  \n-   SAPI Phone Set  \n  \n Any SSML-compliant speech engine will speak phones from the IPA.  \n  \n You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods. To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods."
  syntax:
    content: public void AppendSsmlMarkup (string ssmlMarkup);
    parameters:
    - id: ssmlMarkup
      type: System.String
      description: "En streng som inneholder SSML markup."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir teksten som skal føyes til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Hvis du vil føye tekst som er formatert som SSML markup language, kan du bruke <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the AppendText method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a text string.  \n        PromptBuilder speakText = new PromptBuilder();  \n        speakText.AppendText(\"Say the name of the song you want to hear\");  \n  \n        // Speak the contents of the prompt.  \n        synth.Speak(speakText);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  id: AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir hvor mye utheving for teksten."
  remarks: "Tale syntese motorer i Windows støtter ikke parameteren utheving på dette tidspunktet. Angi verdier for parameteren utheving produsere ingen lyd endring i syntetisert tale utdataene."
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
    - id: emphasis
      type: System.Speech.Synthesis.PromptEmphasis
      description: "Verdien for utheving eller belastningen skal brukes på teksten."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  id: AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir snakker frekvensen for teksten."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the AppendText method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder speakRate = new PromptBuilder();  \n        speakRate.AppendText(\"Your order for\");  \n        speakRate.AppendText(\"one kitchen sink and one faucet\", PromptRate.Slow);  \n        speakRate.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(speakRate);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
    - id: rate
      type: System.Speech.Synthesis.PromptRate
      description: "Verdien for tale som skal brukes på teksten."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  id: AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir volumet for å snakke teksten."
  remarks: "<xref:System.Speech.Synthesis.PromptVolume>Innstillingen for <xref:System.Speech.Synthesis.PromptVolume>er fullstendig volum, som er lik <xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> De andre innstillingene redusere volumet for taleutdata i forhold til full volum."
  example:
  - "The following example uses the AppendText method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt that applies different volume settings.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is the default speaking volume.\", PromptVolume.Default);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the extra loud speaking volume.\", PromptVolume.ExtraLoud);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the medium speaking volume.\", PromptVolume.Medium);  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
    - id: volume
      type: System.Speech.Synthesis.PromptVolume
      description: "Verdien for snakker volumet (loudness) til å bruke på teksten."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  id: AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir teksten som alias skal være talte i stedet for føyer teksten."
  remarks: "Dette gjør at et dokument inneholde både en sier og et skriftlig skjema for en melding. For eksempel skjemaet skriftlig kan være en koden, for eksempel uspesifiserte ISAPI, og skjemaet sier kan utvidede teksten for koden, i dette tilfellet tale Application Programming Interface."
  example:
  - "The following example appends a text string (\"Speech Synthesis Markup Language\") and its alias (\"SSML\") to a <xref:System.Speech.Synthesis.PromptBuilder> object. The synthesizer will pronounce \"S S M L\".  \n  \n```  \nPromptBuilder alias = new PromptBuilder();  \nalias.AppendTextWithAlias(\"Speech Synthesis Markup Language\",\"SSML\");   \n```"
  syntax:
    content: public void AppendTextWithAlias (string textToSpeak, string substitute);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder tekstrepresentasjonen."
    - id: substitute
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  id: AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir innholdstypen ved hjelp av et medlem av den <xref href=&quot;System.Speech.Synthesis.SayAs&quot;> </xref> opplisting."
  remarks: "Innholdstype som er angitt av `sayAs` kan gi veiledning til tale syntese motoren om hvordan du uttal innholdet i `textToSpeak`."
  example:
  - "```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and define the data types for some of the added strings.  \n        PromptBuilder sayAs = new PromptBuilder();  \n        sayAs.AppendText(\"Your\");  \n        sayAs.AppendTextWithHint(\"1st\", SayAs.NumberOrdinal);  \n        sayAs.AppendText(\"request was for\");  \n        sayAs.AppendTextWithHint(\"1\", SayAs.NumberCardinal);  \n        sayAs.AppendText(\"room, on\");  \n        sayAs.AppendTextWithHint(\"10/19/2012,\", SayAs.MonthDayYear);  \n        sayAs.AppendText(\"with early arrival at\");  \n        sayAs.AppendTextWithHint(\"12:35pm\", SayAs.Time12);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(sayAs);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
    - id: sayAs
      type: System.Speech.Synthesis.SayAs
      description: "Innholdstypen for teksten."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  id: AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og en <xref:System.String>som angir innholdstypen for teksten.</xref:System.String>"
  remarks: "Du kan bruke denne metoden til å angi en innholdstype som ikke er inkludert i den <xref:System.Speech.Synthesis.SayAs>opplisting.</xref:System.Speech.Synthesis.SayAs> Motoren for TTS må imidlertid støtte parameteren du angir."
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, string sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder teksten som skal være talte."
    - id: sayAs
      type: System.String
      description: "Innholdstypen for teksten."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  id: AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Tilføyer tekst til den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir uttalen for teksten."
  remarks: "The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.  \n  \n Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons. Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.  \n  \n Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA). A phone is a letter or character that represents a discreet sound of speech. Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA. To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  \n  \n The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.  \n  \n Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet. In those cases, it is possible to type the Latin character and have the proper representation for a phone. Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired. Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;). For example, a schwa (&\\#x0259;) would be represented by `ə`.  \n  \n To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>."
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class. It then appends the text string \"My name is\" to the instance. Finally, it appends a string containing the proper name \"DuBois\" and specifies the pronunciation of the name.  \n  \n```c#  \npublic void ProperName()  \n{  \n    PromptBuilder builder = new PromptBuilder();  \n    builder.AppendText(\"My name is\");  \n  \n    // Add a proper name and its pronunciation.  \n    builder.AppendTextWithPronunciation(\"DuBois\", \"duˈbwɑ\");     \n}  \n```  \n  \n The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-us\">  \n  My name is <phoneme ph=\"duˈbwɑ\"> DuBois </phoneme>  \n</speak>  \n```"
  syntax:
    content: public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "En streng som inneholder skriftlig formatet word bruker konvensjonelt alfabetet for et språk."
    - id: pronunciation
      type: System.String
      description: "En streng som inneholder telefoner for å være talte fra International alfabetet (IPA)."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  id: ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Fjerner innhold fra den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  syntax:
    content: public void ClearContent ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.ClearContent*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  id: Culture
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Henter eller angir kulturen informasjonen for den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the Culture property to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.  \n  \n A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods. A culture specified for a portion of content using one of the above methods will override the Culture property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.  \n  \n To correctly pronounce words in the language specified by the Culture property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \n  \n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \n  \n-   en-US. English (United States)  \n  \n-   zh-CN. Chinese (China)  \n  \n-   zh-TW. Chinese (Taiwan)  \n  \n Two-letter language codes such as \"en\" are also permitted.  See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\\(VS.85\\).aspx) for a comprehensive list of language codes."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Som skal legges til."
  overload: System.Speech.Synthesis.PromptBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  id: EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir slutten på et avsnitt i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt. Se <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>et eksempel.</xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>"
  syntax:
    content: public void EndParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  id: EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir slutten på en setning i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt. Se <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>et eksempel.</xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>"
  syntax:
    content: public void EndSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  id: EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir slutten på en stil i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Metoden EndStyle stopper gjeldende snakker stil. Stilen snakker tilbakestilles til innstillingen som var aktiv før den <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>metoden startet en ny snakker stil.</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> Se <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>et eksempel.</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>"
  syntax:
    content: public void EndStyle ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  id: EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir slutten på bruk av en stemme i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Metoden EndVoice stopper bruken av gjeldende stemmen for taleutdata. Stemmen tilbakestilles til innstillingen som var aktiv før den <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>metoden startet en ny talemelding.</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>"
  syntax:
    content: public void EndVoice ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  id: IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Henter om den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> er tom."
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "Som skal legges til."
  overload: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  id: StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir starten på et avsnitt i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  id: StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir starten av et avsnitt i den angitte kulturen i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt.       Den `culture` parameter for et avsnitt kan være forskjellig fra <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen for et <xref:System.Speech.Synthesis.PromptBuilder>objekt som inneholder det.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Da, verdien for den `culture` parameteren overstyrer den <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Den <xref:System.Speech.Synthesis.SpeechSynthesizer>vil prøve å velge en installert stemme som støtter språket som er angitt av den `culture` parameteren snakke avsnittet.</xref:System.Speech.Synthesis.SpeechSynthesizer> Hvis en stemme med den angitte kulturen finnes, vil bli brukt. Hvis en stemme med den angitte kulturen ikke blir funnet, brukes standard stemmen. Hvis du vil slutte å bruke stemmen angitt av StartParagraph, kan du kalle <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>       Til riktig Uttal ordene på språket som er angitt av den `culture` parameteren en motor for syntese (tekst til tale eller TTS) som støtter språket må være installert. En installert TTS-motor kalles en stemme. Hvis du vil ha informasjon om hvilke stemmer er installert for en bestemt kultur, kan du bruke den <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoden.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows og System.Speech API godta alle gyldige språket land-koder som verdier for `culture`. TTS motorer som ble sendt med Windows 7 støtter følgende språk land koder:-en-US. Engelsk (USA) - zh-CN. Kinesisk (Kina) - zh-TW. Kinesisk (Taiwan) to-bokstav språkkoder for eksempel &quot;no&quot; er også tillatt."
  syntax:
    content: public void StartParagraph (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Gir informasjon om en bestemt kultur, for eksempel språk, navnet på skriving systemet, kalenderen som skal brukes for språket og hvordan til å formatere datoer og sortere strenger."
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  id: StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir starten på en setning i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  id: StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir starten av en setning i den angitte kulturen i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Lang ledetekstene kan gjengis mer tale Personal hvis de er delt i setninger og avsnitt.       Den `culture` parameter for en setning kan være forskjellig fra den `culture` parameteren for avsnittet som inneholder setningen eller <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>for den <xref:System.Speech.Synthesis.PromptBuilder>objekt som inneholder dem.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>       Da, verdien for den `culture` parameteren overstyrer den <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen og `culture` parameteren for avsnittet som inneholder setningen.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Den <xref:System.Speech.Synthesis.SpeechSynthesizer>vil prøve å velge en installert stemme som støtter språket som er angitt av den `culture` parameteren snakke setningen.</xref:System.Speech.Synthesis.SpeechSynthesizer> Hvis en stemme med den angitte kulturen finnes, vil bli brukt. Hvis en stemme med den angitte kulturen ikke blir funnet, brukes standard stemmen. Hvis du vil slutte å bruke stemmen angitt av StartSentence, kan du kalle <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>       Til riktig Uttal ordene på språket som er angitt av den `culture` parameteren en motor for syntese (tekst til tale eller TTS) som støtter språket må være installert. En installert TTS-motor kalles en stemme. Hvis du vil ha informasjon om hvilke stemmer er installert for en bestemt kultur, kan du bruke den <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoden.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows og System.Speech API godta alle gyldige språket land-koder som verdier for `culture`. TTS motorer som ble sendt med Windows 7 støtter følgende språk land koder:-en-US. Engelsk (USA) - zh-CN. Kinesisk (Kina) - zh-TW. Kinesisk (Taiwan) to-bokstav språkkoder for eksempel &quot;no&quot; er også tillatt."
  syntax:
    content: public void StartSentence (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Gir informasjon om en bestemt kultur, for eksempel språk, navnet på skriving systemet, kalenderen som skal brukes for språket og hvordan til å formatere datoer og sortere strenger."
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  id: StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir starten på en stil i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "StartStyle-metoden bruker en <xref:System.Speech.Synthesis.PromptStyle>objektet som argument.</xref:System.Speech.Synthesis.PromptStyle> Du kan bruke egenskapene for den <xref:System.Speech.Synthesis.PromptStyle>objektet for å angi utheving, ved å snakke ofte og volumet (loudness) til å bruke tale sender mens stilen er aktiv.</xref:System.Speech.Synthesis.PromptStyle> Hvis du vil slutte å bruke gjeldende stil, kan du kalle den <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>metoden.</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>      > [!NOTE] >-Tale-syntese motorer i Windows støtter ikke parameteren utheving på dette tidspunktet. Angi verdier for parameteren utheving produsere ingen lyd endring i syntetisert tale utdataene.   >- <xref:System.Speech.Synthesis.PromptVolume>Innstillingen for <xref:System.Speech.Synthesis.PromptVolume>er fullstendig volum, som er lik <xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> De andre innstillingene redusere volumet for taleutdata i forhold til full volum."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the StartStyle method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void StartStyle (System.Speech.Synthesis.PromptStyle style);
    parameters:
    - id: style
      type: System.Speech.Synthesis.PromptStyle
      description: "Stilen til å starte."
  overload: System.Speech.Synthesis.PromptBuilder.StartStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  id: StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir kulturen av stemmen skal brukes."
  remarks: "Den `culture` parameter for StartVoice kan være forskjellig fra <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen for et <xref:System.Speech.Synthesis.PromptBuilder>objekt som inneholder det.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>  Da, verdien for den `culture` parameteren overstyrer den <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>egenskapen.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Den <xref:System.Speech.Synthesis.SpeechSynthesizer>vil prøve å velge en installert stemme som støtter språket som er angitt av den `culture` parameteren snakke innholdet omsluttet av StartVoice og <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Hvis en stemme med den angitte kulturen finnes, vil bli brukt. Hvis en stemme med den angitte kulturen ikke blir funnet, brukes standard stemmen. Hvis du vil slutte å bruke stemmen angitt av StartVoice, kan du kalle <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>       Til riktig Uttal ordene på språket som er angitt av den `culture` parameteren en motor for syntese (tekst til tale eller TTS) som støtter språket må være installert. En installert TTS-motor kalles en stemme. Hvis du vil ha informasjon om hvilke stemmer er installert for en bestemt kultur, kan du bruke den <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoden.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows og System.Speech API godta alle gyldige språket land-koder som verdier for `culture`. TTS motorer som ble sendt med Windows 7 støtter følgende språk land koder:-en-US. Engelsk (USA) - zh-CN. Kinesisk (Kina) - zh-TW. Kinesisk (Taiwan) to-bokstav språkkoder for eksempel &quot;no&quot; er også tillatt."
  syntax:
    content: public void StartVoice (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Gir informasjon om en bestemt kultur, for eksempel språk, navnet på skriving systemet, kalenderen som skal brukes for språket og hvordan til å formatere datoer og sortere strenger."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  id: StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir kjønn stemmen skal brukes."
  remarks: "Bruk av <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoder og <xref:System.Speech.Synthesis.VoiceInfo>klassen for å hente navn og attributter for installert tekst til tale (TTS) stemmer du kan velge.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Å slutte å bruke stemmen angitt av StartVoice kall <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Kjønn stemmen skal brukes."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  id: StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir vilkårene for den nye kommentarer."
  remarks: "Bruk av <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoder og <xref:System.Speech.Synthesis.VoiceInfo>klassen for å hente navn og attributter for installert tekst til tale (TTS) stemmer du kan velge.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Å slutte å bruke stemmen angitt av StartVoice kall <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);
    parameters:
    - id: voice
      type: System.Speech.Synthesis.VoiceInfo
      description: "Kriteriet for stemmen skal brukes."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  id: StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir navnet på stemmen skal brukes."
  remarks: "Hvis du vil ha informasjon om hvilke stemmer er installert, kan du bruke en av de <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoder.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Å slutte å bruke stemmen angitt av StartVoice kall <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (string name);
    parameters:
    - id: name
      type: System.String
      description: "Navnet på stemmen skal brukes."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir kjønn og alderen på den nye kommentarer."
  remarks: "Bruk av <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoder og <xref:System.Speech.Synthesis.VoiceInfo>klassen for å hente navn og attributter for installert tekst til tale (TTS) stemmer du kan velge.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Å slutte å bruke stemmen angitt av StartVoice kall <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Kjønn nye stemmen skal brukes."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "Alder på stemmen skal brukes."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Angir at synthesizeren å endre kommentarer i den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objekt og angir kjønnet, alder og en foretrukne stemme som samsvarer med den angitte kjønn og alder."
  remarks: "En syntese-motor teller treff den finner for de angitte parameterne, og returnerer stemmen når antallet er lik den `voiceAlternate` parameteren.       Bruk av <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metoder og <xref:System.Speech.Synthesis.VoiceInfo>klassen for å hente navn og attributter for installert tekst til tale (TTS) stemmer du kan velge.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Å slutte å bruke stemmen angitt av StartVoice kall <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Kjønn stemmen skal brukes."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "Alder på stemmen skal brukes."
    - id: voiceAlternate
      type: System.Int32
      description: "Et heltall som angir en foretrukne stemme når flere stemme samsvarer med den `gender` og `age` parametere."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  id: ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Returnerer SSML som er generert fra den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet."
  remarks: "Metoden ToXml gjør forsøk på å formatere returnerte SSML på noen måte."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Write the contents of the PromptBuilder object to the console as  \n        // an SSML-compatible XML file.  \n        string myXml = style.ToXml();  \n        Console.WriteLine(\"This is the SSML equivalent of the PromptBuilder: \\n\\n\" + myXml);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public string ToXml ();
    parameters: []
    return:
      type: System.String
      description: "Returnerer SSML som er generert fra den <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> objektet som én enkelt linje."
  overload: System.Speech.Synthesis.PromptBuilder.ToXml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
- uid: System.Speech.Synthesis.PromptBreak
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBreak
  nameWithType: PromptBreak
  fullName: System.Speech.Synthesis.PromptBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
- uid: System.Speech.Synthesis.PromptBuilder
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
- uid: System.Speech.Synthesis.PromptEmphasis
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptEmphasis
  nameWithType: PromptEmphasis
  fullName: System.Speech.Synthesis.PromptEmphasis
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
- uid: System.Speech.Synthesis.PromptRate
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptRate
  nameWithType: PromptRate
  fullName: System.Speech.Synthesis.PromptRate
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
- uid: System.Speech.Synthesis.PromptVolume
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptVolume
  nameWithType: PromptVolume
  fullName: System.Speech.Synthesis.PromptVolume
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
- uid: System.Speech.Synthesis.SayAs
  parent: System.Speech.Synthesis
  isExternal: false
  name: SayAs
  nameWithType: SayAs
  fullName: System.Speech.Synthesis.SayAs
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
- uid: System.Speech.Synthesis.PromptStyle
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptStyle
  nameWithType: PromptStyle
  fullName: System.Speech.Synthesis.PromptStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio
  nameWithType: PromptBuilder.AppendAudio
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark
  nameWithType: PromptBuilder.AppendBookmark
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak
  nameWithType: PromptBuilder.AppendBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder
  nameWithType: PromptBuilder.AppendPromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml
  nameWithType: PromptBuilder.AppendSsml
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup
  nameWithType: PromptBuilder.AppendSsmlMarkup
- uid: System.Speech.Synthesis.PromptBuilder.AppendText*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText
  nameWithType: PromptBuilder.AppendText
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias
  nameWithType: PromptBuilder.AppendTextWithAlias
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint
  nameWithType: PromptBuilder.AppendTextWithHint
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation
  nameWithType: PromptBuilder.AppendTextWithPronunciation
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent
  nameWithType: PromptBuilder.ClearContent
- uid: System.Speech.Synthesis.PromptBuilder.Culture*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph
  nameWithType: PromptBuilder.EndParagraph
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence
  nameWithType: PromptBuilder.EndSentence
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle
  nameWithType: PromptBuilder.EndStyle
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice
  nameWithType: PromptBuilder.EndVoice
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph
  nameWithType: PromptBuilder.StartParagraph
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence
  nameWithType: PromptBuilder.StartSentence
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle
  nameWithType: PromptBuilder.StartStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice
  nameWithType: PromptBuilder.StartVoice
- uid: System.Speech.Synthesis.PromptBuilder.ToXml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml
  nameWithType: PromptBuilder.ToXml
