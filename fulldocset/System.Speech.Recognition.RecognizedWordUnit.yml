### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  summary: "Gir atomic enheten gjenkjenner tale."
  remarks: "Alle resultatene som returneres av en recognition-motor konstruert RecognizedWordUnit objekter.       En matrise av objekter RecognizedWordUnit er tilgjengelige for alle recognition operasjoner via den <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>egenskap i den <xref:System.Speech.Recognition.RecognizedPhrase>objektet.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>       I tillegg til å gi et mål av recognition sikkerhet (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) gir en forekomst av RecognizedWordUnit: – normalisert og nøyaktige (eller Leksikalsk) tekstrepresentasjoner for et gjenkjent ord.</xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> Hvis du vil ha mer informasjon, se <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, og <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> </xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> </xref:System.Speech.Recognition.ReplacementText>      -Uttale informasjon med tegn fra en støttet alfabetet, for eksempel International alfabetet (IPA) eller den universelle telefon angitt (UPS). Hvis du vil ha mer informasjon se <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>      -Formatering for utskrift. Du finner mer informasjon, kan du se den <xref:System.Speech.Recognition.DisplayAttributes>klassen og <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>egenskapen.</xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> </xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of RecognizedWordUnit objects. The RecognizedWordUnit objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Text: {Text}")]

      public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> klasse."
  remarks: "Hvis `text` eller `pronunciation` er `null`, &quot;&quot;, eller <xref:System.String.Empty>og <xref:System.Speech.Recognition.RecognizedWordUnit>brukes i en operasjon for gjenkjenning recognition motoren genererer passende verdier i alle utdata <xref:System.Speech.Recognition.RecognizedWordUnit>forekomsten.</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.String.Empty>       Direkte konstruksjon av <xref:System.Speech.Recognition.RecognizedWordUnit>forekomster brukes bare når emulerer recognition operasjoner ved hjelp av <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>eller <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>metoder av <xref:System.Speech.Recognition.SpeechRecognitionEngine>klassen og den <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>eller <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>metodene for <xref:System.Speech.Recognition.SpeechRecognizer>klasse.</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       For faktiske programmer, ikke direkte konstruere <xref:System.Speech.Recognition.RecognizedWordUnit>, i stedet skaffes via den <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>egenskap i den <xref:System.Speech.Recognition.RecognizedPhrase>objektet.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>"
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```c#  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "Normalisert teksten for et gjenkjent ord.       Denne verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, eller <xref:System.String>.</xref:System.String>"
    - id: confidence
      type: System.Single
      description: "En <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;> </xref> verdi fra 0,0 til 1,0 som angir sikkerhet for word gjenkjenning."
    - id: pronunciation
      type: System.String
      description: "Et gjenkjent ord fonetisk stavemåten.       Denne verdien kan være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, eller <xref:System.String>.</xref:System.String>"
    - id: lexicalForm
      type: System.String
      description: "Ikke-normalisert teksten for et gjenkjent ord.       Argumentet er obligatorisk og kan ikke være <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, &quot;&quot;, eller <xref:System.String>.</xref:System.String>"
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: "Definerer bruk av mellomrom til å vise gjenkjent ord."
    - id: audioPosition
      type: System.TimeSpan
      description: "Plasseringen av gjenkjent ord i lyd inndataflyten.       Denne verdien kan være <xref:System.TimeSpan>.</xref:System.TimeSpan>"
    - id: audioDuration
      type: System.TimeSpan
      description: "Lengden på den lyd inndata tilsvarer gjenkjent ordet.       Denne verdien kan være <xref:System.TimeSpan>.</xref:System.TimeSpan>"
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Henter en verdi som er tilordnet kontrolleres, som representerer sannsynligheten for at et gjenkjent ord samsvarer med en gitt inndata."
  remarks: "Konfidensnivået resultater angir ikke absolutt sannsynligheten for at et ord gjenkjennes på riktig måte. I stedet mekanisme konfidensnivået resultater for sammenligning av relative nøyaktigheten av flere recognition alternativer for en gitt inndata. Dette gjør det enklere å returnere mest nøyaktige recognition resultatet. For eksempel hvis en gjenkjent ord har konfidensnivået ligge på 0,8, betyr dette ikke at ordet er en 80% sannsynlighet for blir riktig treff for inndata.  Det vil si at det er et større sannsynlighet for å være riktig treff for inndataene enn andre resultater som har konfidensnivået scores mindre enn 0,8.       Konfidensnivået ligge på sin egen er meningsløst Hvis du ikke har alternative resultatene skal sammenlignes med, fra samme recognition-operasjon eller fra forrige anerkjennelser på samme inndataene.       Verdiene som returneres av konfidensnivået er relativ og unike hver recognition-motoren. Det er ingen definisjon av hvordan konfidensnivået verdier mellom to ulike recognition motorer sammenligne eller hvordan konfidensnivået for individuelle <xref:System.Speech.Recognition.RecognizedWordUnit>objekter definerer den <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>av en <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       En motor for talegjenkjenning kan tilordnes lav konfidensnivået ligge sier inndata for ulike årsaker, inkludert bakgrunnen forstyrrelser, inarticulate tale, eller uventet ord eller word-sekvenser. Hvis programmet bruker en <xref:System.Speech.Recognition.SpeechRecognitionEngine>forekomsten, kan du endre konfidensnivået ved som tale inndataene godkjennes eller avvises med én av de <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>metoder.</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> Konfidensnivået terskelverdi for den delte gjenkjenneren administreres av <xref:System.Speech.Recognition.SpeechRecognizer>, er tilknyttet en brukerprofil og lagres i Windows-registret.</xref:System.Speech.Recognition.SpeechRecognizer> Programmer kan ikke skrive endringene i registret for egenskaper av delt gjenkjenner."
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "En relativ mål av sikkerhet for riktig recognition for et ord. Verdien er fra 0,0 1.0 for til konfidensnivået henholdsvis."
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Henter informasjon om brukes til å opprette tekst-utdataene fra gjeldende formatering <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> forekomsten."
  remarks: "Den <xref:System.Speech.Recognition.DisplayAttributes>objektet som ble returnert av egenskapen DisplayAttributes angir innledende og avsluttende mellomrom som skal brukes med en gitt word eventuell.</xref:System.Speech.Recognition.DisplayAttributes>       Du finner mer informasjon om hvordan du bruker denne informasjon om formatering av <xref:System.Speech.Recognition.DisplayAttributes>opplisting.</xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the DisplayAttributes property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "Angir bruk av mellomrom for visning av innholdet i en <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> objektet."
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Henter ikke-normalisert teksten for et gjenkjent ord."
  remarks: "I de fleste tilfeller verdiene som returneres av <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>og LexicalForm er identiske.</xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> Gjenkjenning motorer kan imidlertid bruke tale normalization for å returnere mer brukervennlig eller hverdagslige tekstrepresentasjoner av inndata.       Tale normalization er bruken av spesielle konstruksjoner eller symboler til express tale i skriving. Normalization kan for eksempel erstatte ordene &quot;en valuta og&16; noe&quot; med &quot;$1.16&quot; i utdatateksten."
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using LexicalForm), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: "Returnerer en <xref:System.String>som inneholder tekst i en gjenkjent ord uten noen normalization.</xref:System.String>"
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Henter fonetisk stavingen av et gjenkjent ord."
  remarks: "Innholdet i uttale angir hvilken uttale motor for talegjenkjenning brukes til å samsvare med tale inndataene til en av de innlastede <xref:System.Speech.Recognition.Grammar>objekter.</xref:System.Speech.Recognition.Grammar> Uttaler kan defineres i tale recognition-motoren intern leksikon, i et leksikon-dokument som er koblet fra en recognition grammatikk i en lastet <xref:System.Speech.Recognition.Grammar>-objekt eller innebygd i et recognition grammatikk i en lastet <xref:System.Speech.Recognition.Grammar>objektet.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar> En motor for talegjenkjenning kan også opprette uttaler for uvanlig ord der uttaler ikke er definert i en leksikon eller grammatikk som motor for Talegjenkjenning for øyeblikket har tilgang til.       Mange Windows-baserte Unicode-skrifter, for eksempel Courier New støtter visning av IPA strenger. Hvis du vil ha mer informasjon, se [International alfabetet](http://go.microsoft.com/fwlink/?LinkId=58363)."
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using Pronunciation). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: "En tegnstreng fra en støttet alfabetet, for eksempel International alfabetet (IPA) eller den universelle telefon angitt (UPS)."
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Henter normalisert teksten for et gjenkjent ord."
  remarks: "I de fleste tilfeller verdiene som returneres av tekst og <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>vil være identiske.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> Gjenkjenning motorer kan imidlertid bruke tale normalization for å returnere mer brukervennlig eller hverdagslige tekstrepresentasjoner av inndata.       Tale normalization er bruken av spesielle konstruksjoner eller symboler til express tale i skriving. Normalization kan for eksempel erstatte ordene &quot;en valuta og&16; noe&quot; med &quot;$1.16&quot; i utdatateksten."
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using Text), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "En streng som inneholder utgående normalisert tekst for et gitt inndata ord."
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
