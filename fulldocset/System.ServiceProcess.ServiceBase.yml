### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceBase
  id: ServiceBase
  children:
  - System.ServiceProcess.ServiceBase.#ctor
  - System.ServiceProcess.ServiceBase.AutoLog
  - System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  - System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  - System.ServiceProcess.ServiceBase.CanPauseAndContinue
  - System.ServiceProcess.ServiceBase.CanShutdown
  - System.ServiceProcess.ServiceBase.CanStop
  - System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceBase.EventLog
  - System.ServiceProcess.ServiceBase.ExitCode
  - System.ServiceProcess.ServiceBase.MaxNameLength
  - System.ServiceProcess.ServiceBase.OnContinue
  - System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  - System.ServiceProcess.ServiceBase.OnPause
  - System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  - System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  - System.ServiceProcess.ServiceBase.OnShutdown
  - System.ServiceProcess.ServiceBase.OnStart(System.String[])
  - System.ServiceProcess.ServiceBase.OnStop
  - System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  - System.ServiceProcess.ServiceBase.ServiceHandle
  - System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  - System.ServiceProcess.ServiceBase.ServiceName
  - System.ServiceProcess.ServiceBase.Stop
  langs:
  - csharp
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
  type: Class
  summary: "Inneholder en basisklasse for en tjeneste som skal finnes som en del av et tjenesteprogram. ServiceBase må være avledet fra når du oppretter en ny serviceklasse."
  remarks: "Derive from ServiceBase when defining your service class in a service application. Any useful service overrides the [OnStart(String\\[\\])](assetId:///M:System.ServiceProcess.ServiceBase.OnStart(System.String[])?qualifyHint=False&autoUpgrade=True) and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.  \n  \n A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.  \n  \n By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.  \n  \n An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.  \n  \n When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.  \n  \n The executable calls the ServiceBase derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.  \n  \n The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.  \n  \n You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.  \n  \n You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in ServiceBase. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the ServiceBase object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.  \n  \n You can use `InstallUtil.exe` to install services on your system.  \n  \n> [!NOTE]\n>  You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging."
  syntax:
    content: >-
      [System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))]

      public class ServiceBase : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Oppretter en ny forekomst av den <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> klasse."
  remarks: "Ikke opprette en forekomst av <xref:System.ServiceProcess.ServiceBase>klassen.</xref:System.ServiceProcess.ServiceBase> I stedet må være utledet fra <xref:System.ServiceProcess.ServiceBase>og starte den utledede klassen.</xref:System.ServiceProcess.ServiceBase> Minimum du må implementere i konstruktøren for en klasse som er arvet fra <xref:System.ServiceProcess.ServiceBase>er å angi den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>for komponenten.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> </xref:System.ServiceProcess.ServiceBase> Ingen andre behandling kreves spesielt i konstruktøren. Du må behandle de fleste initialisering i <xref:System.ServiceProcess.ServiceBase.OnStart%2A>i stedet for i konstruktøren.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Ellers er ikke garantere objektene som skal startes når du starter en tjeneste på nytt etter at den har blitt stoppet.       Hvis du vil overstyre konstruktøren i den utledede klassen, kan du kalle konstruktøren basisklassen i koden.       Den <xref:System.ServiceProcess.ServiceBase>konstruktøren angir <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>til `true`.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A> </xref:System.ServiceProcess.ServiceBase> Hvis du ikke vil automatisk logging av forespørsler til tjenesten fra Tjenestekontrollbehandling (SCM), angi <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>til `false`.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>       Hvis den kjørbare filen inneholder en tjeneste, kaller systemet tjenestens konstruktøren når Start velges fra SCM, og kjøres i ødeleggeren Hvis Stopp kalles.       Hvis den kjørbare filen inneholder flere tjenester, kaller starten på én tjeneste fører til at konstruktører kalles for tjenestene på i den kjørbare filen, men den angitte tjenesten er startet. Destruktører for tjenestene kjøres sammen når tjenestene er stoppet, ikke individuelt når hver tjenesten er stoppet.      > [!NOTE] > Hvis du vil overstyre basisklassen konstruktøren, du må eksplisitt kalle den i konstruktøren for den utledede klassen."
  syntax:
    content: public ServiceBase ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.AutoLog
  id: AutoLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir om å rapportere Start, Stopp, Pause og Fortsett kommandoer i hendelsesloggen."
  remarks: "Angi AutoLog til `true` instruerer tjenesten bruke programhendelsesloggen rapporten kommandoen feil, i tillegg til informasjon om endring for Start, Stopp, Pause og fortsette hendelser i tjenesten. Navnet på tjenesten brukes som loggen <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>.</xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>       Å rapportere informasjon til en egendefinert hendelsesloggen i stedet for programloggen må du angi AutoLog `false` og skrive til instruksjoner i kommandoen behandling metodene <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>aktivitetsfeedene for riktig.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A>      > [!NOTE] > <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>Som utstyr kildestreng for hendelsesloggen, må angis før tjenesten prøver å skrive til hendelsesloggen.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> Forsøk på å få tilgang til hendelsesloggen før kildenavnet er angitt, oppstår det et unntak."
  syntax:
    content: public bool AutoLog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>til rapportinformasjon i hendelsesloggen; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.AutoLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  id: CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten kan håndtere varsler om endringer i datamaskinen power status."
  remarks: "Når datamaskinen power statusendringer Tjenestekontrollbehandling (SCM) kontrollerer om tjenesten godtar power hendelsen kommandoer ved hjelp av verdien for CanHandlePowerEvent.       Hvis CanHandlePowerEvent `true`, kommandoen er sendt til tjenesten og <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>-metoden hvis definert.</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> Hvis <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>er ikke implementert i den utledede klassen behandler SCM hendelsen power via tom basisklassen <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName>metode.</xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A>"
  syntax:
    content: public bool CanHandlePowerEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten behandler datamaskinen power statusen endringer som er angitt i den <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref> klasse, ellers, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne egenskapen, er endret etter at tjenesten ble startet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  id: CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten kan håndtere økten endre mottatt fra en Terminal Server-økt."
  syntax:
    content: public bool CanHandleSessionChangeEvent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten kan håndtere Terminal Server endre øktshendelsene; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Denne egenskapen, er endret etter at tjenesten ble startet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten kan midlertidig og fortsetter."
  remarks: "Angi verdien for egenskapen CanPauseAndContinue i konstruktøren for tjenesten.       Når en tjenesten er stoppet, stanser hva det gjør. Når du fortsette tjenesten (enten via tjenestekontrollbehandlingen eller programmatisk), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>kjører.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Sende en Pause-forespørsel til tjenesten sparer systemressurser. Pause kan ikke frigi alle systemressurser, men har stoppet. <xref:System.ServiceProcess.ServiceBase.OnPause%2A>og <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>ofte implementert for å utføre mindre behandling enn <xref:System.ServiceProcess.ServiceBase.OnStop%2A>og <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> </xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A></xref:System.ServiceProcess.ServiceBase.OnPause%2A>       Når CanPauseAndContinue er `true`, overstyre <xref:System.ServiceProcess.ServiceBase.OnPause%2A>og <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>til å angi behandling skal utføres når Tjenestekontrollbehandling (SCM) sender en Pause eller fortsette forespørsel til tjenesten.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>skal brukes til å angre behandling i <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Hvis CanPauseAndContinue `false`, SCM vil ikke sende Pause eller Continue-forespørsler til tjenesten, så den <xref:System.ServiceProcess.ServiceBase.OnPause%2A>og <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>metoder ikke blir kalt selv om de implementeres.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> I SCM, den `Pause` og `Continue` kontrollene er deaktivert når CanPauseAndContinue `false`."
  syntax:
    content: public bool CanPauseAndContinue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten kan være midlertidig; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten er allerede startet. Egenskapen CanPauseAndContinue kan ikke endres når tjenesten er startet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten skal varsles når systemet avsluttes."
  remarks: "Hvis CanShutdown `true`, tjenesten er varslet når systemet avsluttes. Ved avslutning, <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>metoden hvis den er implementert i den utledede klassen.</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>      > [!NOTE] > Bare systemet kan føre til at den <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>metode for å utføre; tjenesten kan kalle den, men det anbefales ikke.</xref:System.ServiceProcess.ServiceBase.OnShutdown%2A>"
  syntax:
    content: public bool CanShutdown { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten som skal varsles når systemet avslutter; Ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  Standard <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.CanShutdown*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten er allerede startet. Egenskapen CanShutdown kan ikke endres når tjenesten er startet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir en verdi som angir om tjenesten kan stoppes når den er startet."
  remarks: "Når Stopp kalles på en tjeneste, bekrefter Tjenestekontrollbehandling (SCM) om tjenesten godtar Stopp-kommandoer i verdien for CanStop. Verdien for CanStop er de fleste tjenester `true`, men noen tjenester i operativsystemet, for eksempel ikke tillater brukeren å stoppe dem.       Hvis CanStop `true`, Stopp-kommandoen er sendt til tjenesten og <xref:System.ServiceProcess.ServiceBase.OnStop%2A>-metoden hvis den er definert.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> Hvis <xref:System.ServiceProcess.ServiceBase.OnStop%2A>er ikke implementert i den utledede klassen, SCM håndtakene stoppet kommando via tom basisklassen <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName>metode.</xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase.OnStop%2A>"
  syntax:
    content: public bool CanStop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Hvis tjenesten kan stoppes og <xref:System.ServiceProcess.ServiceBase.OnStop*>metode kalt; ellers <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceBase.CanStop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten er allerede startet. Egenskapen CanStop kan ikke endres når tjenesten er startet."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Disposes av ressursene (enn minnet) som brukes av den <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  remarks: "Kall avhending i den utledede klassen (og, i den <xref:System.ServiceProcess.ServiceBase>klassen) når du er ferdig med å bruke den utledede klassen.</xref:System.ServiceProcess.ServiceBase> Fjerningsmetoden forlater den utledede klassen ubrukelig tilstand. Etter å avhending, må du frigi alle referanser til den utledede klassen og <xref:System.ServiceProcess.ServiceBase>slik de ble bruker minnet kan gode av datasanering.</xref:System.ServiceProcess.ServiceBase>      > [!NOTE] > Alltid kall avhending før du slipper siste referanse til klassen som er avledet fra <xref:System.ServiceProcess.ServiceBase>.</xref:System.ServiceProcess.ServiceBase> Ellers ressursene <xref:System.ServiceProcess.ServiceBase>og den utledede klassen bruker vil ikke bli frigjort før datasanering kaller objektenes destruktører.</xref:System.ServiceProcess.ServiceBase>       <xref:System.ServiceProcess.ServiceBase.OnStop%2A>implementeres ofte for å behandle koden i <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, kombinert med et kall til avhending.</xref:System.ServiceProcess.ServiceBase.OnPause%2A></xref:System.ServiceProcess.ServiceBase.OnStop%2A> Hvis du vil gjøre dette i den utledede klassen, er det vanlige å implementere <xref:System.ServiceProcess.ServiceBase.OnStart%2A>til å tildele hva avhending utgitt.</xref:System.ServiceProcess.ServiceBase.OnStart%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.ServiceProcess.ServiceBase.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.EventLog
  id: EventLog
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter en hendelseslogg du kan bruke til å skrive notification service kommandoen kaller, for eksempel starte og stoppe, til hendelsesloggen for programmet."
  remarks: "Konstruktøren initialiserer EventLog-egenskapen til en forekomst med den <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>og <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName>angitt egenskaper.</xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> </xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> Kilden er den <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>av tjenesten, og loggen er datamaskinens programmet logg.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A> Disse verdiene er angitt automatisk og kan ikke endres for automatisk logging av tjenesten kommandoer.       Når <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>er `true`, Start Stopp, Pause, Fortsett og egendefinerte kommandoer registreres automatisk i programhendelsesloggen.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A> Du kan bruke EventLog-egenskapen til å skrive flere meldinger til denne loggen også. Komponenten kall <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>ved hjelp av dette EventLog-medlemmet.</xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName>       Angi for å rapportere informasjon til en egendefinert hendelsesloggen i stedet for programloggen <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>til `false` og skrive til instruksjoner i metodene kommandoen behandling <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>aktivitetsfeedene for riktig.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public virtual System.Diagnostics.EventLog EventLog { get; }
    return:
      type: System.Diagnostics.EventLog
      description: "En <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> forekomsten kilden er registrert i programloggen."
  overload: System.ServiceProcess.ServiceBase.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ExitCode
  id: ExitCode
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir sluttkoden for tjenesten."
  remarks: "Egenskapen ExitCode til en ikke-null-verdi før du stopper tjenesten for å angi en feil i Service Control Manager."
  syntax:
    content: public int ExitCode { get; set; }
    return:
      type: System.Int32
      description: "Sluttkoden for tjenesten."
  overload: System.ServiceProcess.ServiceBase.ExitCode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  id: MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
  type: Field
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Angir maksimumsstørrelsen for en tjeneste."
  remarks: "Tjenestenavn og visningsnavnet ha størrelsesbegrensninger må observerte når du angir egenskapene for serviceklassen."
  syntax:
    content: public const int MaxNameLength = 80;
    return:
      type: System.Int32
      description: "Som skal legges til."
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnContinue
  id: OnContinue
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, OnContinue som kjøres når en Continue-kommando er sendt til tjenesten ved Tjenestekontrollbehandling (SCM). Angir handlinger som skal utføres når en tjeneste gjenopptar normal fungere etter blir stoppet midlertidig."
  remarks: "Implementere OnContinue å synkronisere programmets svar på <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</xref:System.ServiceProcess.ServiceBase.OnPause%2A> Når du fortsette tjenesten (enten via tjenestekonsollen eller programmatisk), OnContinue behandling kjører, og tjenesten aktiveres på nytt.       OnContinue er forventet å være overskrives når den <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>egenskapen `true`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>       Hvis <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>er `false`, SCM vil ikke sende Pause eller Continue-forespørsler til tjenesten, så den <xref:System.ServiceProcess.ServiceBase.OnPause%2A>og OnContinue metoder ikke blir kalt selv om de implementeres.</xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> I SCM, den `Pause` og `Continue` Kontroller deaktiveres når <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>er `false`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>"
  syntax:
    content: protected virtual void OnContinue ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnContinue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  id: OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører OnCustomCommand ved Tjenestekontrollbehandling (SCM) sender en egendefinert kommando til tjenesten. Angir handlinger som skal utføres når det oppstår en kommando med den angitte parameterverdien."
  remarks: "OnCustomCommand lar deg angi flere funksjoner utover starter, stopper, stopper midlertidig og fortsetter tjenester.       SCM ikke undersøke kommandoen egendefinert for å bekrefte om tjenesten støtter det `command` parameter ble sendt. Den egendefinerte kommandoen sender direkte til tjenesten. Hvis tjenesten ikke gjenkjenner den `command` parameteren den har ikke noe.       Egendefinerte kommandoer er utløst av en <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>setningen i en <xref:System.ServiceProcess.ServiceController>komponent.</xref:System.ServiceProcess.ServiceController> </xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> Bruk en switch-setningen eller hvis.. deretter betingelse som skal håndtere egendefinerte kommandoer du definere i tjenesten.       De eneste verdiene for en egendefinert kommando som du kan definere i programmets eller bruke i OnCustomCommand er de mellom 128 og 255. Heltall under 128 tilsvarer systemreservert verdier.       Hvis den <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>egenskapen `true`, egendefinerte kommandoer, som alle andre kommandoer, skrive oppføringer i hendelsesloggen for å rapportere om utførelse av metode var vellykket eller mislykket.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: protected virtual void OnCustomCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "Kommandoen meldingen til tjenesten."
  overload: System.ServiceProcess.ServiceBase.OnCustomCommand*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPause
  id: OnPause
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører når en kommando for Pause sendes til tjenesten ved Tjenestekontrollbehandling (SCM). Angir handlinger som skal utføres når en tjenesten stopper."
  remarks: "Bruk OnPause til å angi behandlingen som oppstår når tjenesten mottar en Pause-kommando. OnPause er forventet å være overskrives når den <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>egenskapen `true`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>       Når du fortsetter en midlertidig stanset tjeneste (enten via tjenestekonsollen eller programmatisk), den <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>behandling kjøres, og tjenesten aktiveres på nytt.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Pause-kommandoen kan bare programmet til å reagere på en bestemt hendelse. OnPause endrer ingenting tjenesten som du ikke definerer gjør.       Sende en Pause-forespørsel til tjenesten kan spare systemressurser fordi Pause ikke må Frigi alle systemressurser. Hvis tråder har blitt åpnet av prosessen, Stans en tjeneste i stedet for å stoppe den kan Tillat trådene skal være åpen, obviating måtte tildele dem på nytt når tjenesten fortsetter. Hvis du definerer Pause for å frigjøre alle systemressurser, fungerer den som en Stop-kommando.       Angi <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>til `true`, og overstyre OnPause og <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>til å angi behandling skal utføres når SCM sender en Pause eller fortsette forespørsel til tjenesten.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>skal brukes til å angre behandling i OnPause.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A>       Hvis <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>er `false`, SCM vil ikke sende Pause eller Continue-forespørsler til tjenesten, så OnPause og <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>metoder ikke blir kalt selv om implementert.</xref:System.ServiceProcess.ServiceBase.OnContinue%2A> </xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> I SCM, den `Pause` og `Continue` Kontroller deaktiveres når <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>er `false`.</xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A>"
  syntax:
    content: protected virtual void OnPause ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnPause*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  id: OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører når datamaskinens power statusen er endret. Dette gjelder for bærbare datamaskiner når de går til hvilemodus som en avslutning av systemet."
  remarks: "Bruk OnPowerEvent til å angi behandlingen som oppstår når systemhendelsen som er angitt i den <xref:System.ServiceProcess.PowerBroadcastStatus>opplisting oppstår, for eksempel når datamaskinen er plassert i hvilemodus eller angir lite batteristrøm.</xref:System.ServiceProcess.PowerBroadcastStatus>       OnPowerEvent er forventet å være overskrives når den <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>egenskapen `true`.</xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>"
  syntax:
    content: protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);
    parameters:
    - id: powerStatus
      type: System.ServiceProcess.PowerBroadcastStatus
      description: "En <xref href=&quot;System.ServiceProcess.PowerBroadcastStatus&quot;> </xref> som angir et varsel fra systemet om power statusen."
    return:
      type: System.Boolean
      description: "Når implementert i en avledet klasse, bestemmer behovene programmet hvilken verdi som skal returneres. For eksempel hvis en <xref uid=&quot;langword_csharp_QuerySuspend&quot; name=&quot;QuerySuspend&quot; href=&quot;&quot;> </xref> kringkasting statusen er sendt, kan det føre til programmet til å avslå spørringen ved å returnere <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceBase.OnPowerEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  id: OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Utfører når en endringshendelse mottas fra en Terminal Server-økt."
  remarks: "Du må angi den <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>egenskapen `true` å aktivere kjøring av denne metoden.</xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A>"
  syntax:
    content: protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);
    parameters:
    - id: changeDescription
      type: System.ServiceProcess.SessionChangeDescription
      description: "En struktur som identifiserer endringen."
  overload: System.ServiceProcess.ServiceBase.OnSessionChange*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  id: OnShutdown
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører når systemet avsluttes. Angir hva som skal skje umiddelbart før systemet avsluttes."
  remarks: "Bruk OnShutdown til å angi behandlingen som oppstår når systemet avsluttes.       Denne hendelsen oppstår når operativsystemet avsluttes, ikke når datamaskinen er slått av.       OnShutdown er forventet å være overskrives når den <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>egenskapen `true`.</xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>"
  syntax:
    content: protected virtual void OnShutdown ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  id: OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører når en kommando for Start sendes til tjenesten ved Tjenestekontrollbehandling (SCM) eller når operativsystemet starter (for en tjeneste som starter automatisk). Angir handlinger som skal utføres når tjenesten starter."
  remarks: "Use OnStart to specify the processing that occurs when the service receives a Start command. OnStart is the method in which you specify the behavior of the service. OnStart can take arguments as a way to pass data, but this usage is rare.  \n  \n> [!CAUTION]\n>  Do not use the constructor to perform processing that should be in OnStart. Use OnStart to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before OnStart. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in OnStart, the needed resources would not be created again the second time the service is called.  \n  \n Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode>. In such a situation, OnStart would be called at system startup.  \n  \n OnStart is expected to be overridden in the derived class. For the service to be useful, OnStart and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.  \n  \n Process initialization arguments for the service in the OnStart method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`."
  syntax:
    content: protected virtual void OnStart (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "Data som er sendt av start-kommandoen."
  overload: System.ServiceProcess.ServiceBase.OnStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.OnStop
  id: OnStop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Når implementert i en avledet klasse, utfører når en Stop-kommandoen blir sendt til tjenesten ved Tjenestekontrollbehandling (SCM). Angir handlinger som skal utføres når en tjenesten stopper."
  remarks: "Bruk OnStop til å angi behandlingen som oppstår når tjenesten mottar en Stop-kommando.       Når SCM mottar en Stop-kommando, bruker verdien for <xref:System.ServiceProcess.ServiceBase.CanStop%2A>å kontrollere om tjenesten godtar Stopp kommandoer.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Hvis <xref:System.ServiceProcess.ServiceBase.CanStop%2A>er `true`kommandoen Stopp er sendt til tjenesten, og metoden OnStop kalles hvis den er definert.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Hvis OnStop ikke er implementert i tjenesten, behandler SCM kommandoen stoppet.       Hvis <xref:System.ServiceProcess.ServiceBase.CanStop%2A>er `false`, SCM ignorerer kommandoen Stopp.</xref:System.ServiceProcess.ServiceBase.CanStop%2A> Det er ikke sendt til tjenesten. Kommandoen Stopp returnerer og oppstår det et unntak.       OnStop forventes skal overstyres i den utledede klassen. For tjenesten er nyttig <xref:System.ServiceProcess.ServiceBase.OnStart%2A>og OnStop må begge være implementert i service-klasse.</xref:System.ServiceProcess.ServiceBase.OnStart%2A>"
  syntax:
    content: protected virtual void OnStop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.OnStop*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  id: RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Forespørsler mer tid for en ventende operasjon."
  remarks: "Metoden RequestAdditionalTime skal kalles av den overstyrte <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, eller <xref:System.ServiceProcess.ServiceBase.OnStop%2A>metoder for å be om flere tid for en ventende operasjon for å hindre at Tjenestekontrollbehandling (SCM) merker tjenesten som ikke svarer.</xref:System.ServiceProcess.ServiceBase.OnStop%2A> </xref:System.ServiceProcess.ServiceBase.OnStart%2A> </xref:System.ServiceProcess.ServiceBase.OnPause%2A> </xref:System.ServiceProcess.ServiceBase.OnContinue%2A>  Hvis ventende operasjon ikke er en Fortsett, pause, starte eller stoppe, en <xref:System.InvalidOperationException>forårsakes.</xref:System.InvalidOperationException>"
  syntax:
    content: public void RequestAdditionalTime (int milliseconds);
    parameters:
    - id: milliseconds
      type: System.Int32
      description: "Den forespurte tid i millisekunder."
  overload: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten er ikke i en ventende tilstand."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  id: Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerer den kjørbare filen for en tjeneste med Tjenestekontrollbehandling (SCM)."
  remarks: "Kalle denne overbelastningen den `main()` funksjonen tjenesten kjører registrere service med tjenestekontrollbehandlingen. Når du kaller kjøres, tjenestekontrollbehandlingen sender en Start-kommando som resulterer i et kall til den <xref:System.ServiceProcess.ServiceBase.OnStart%2A>metoden i tjenesten.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Tjenesten er ikke startet til kommandoen Start er utført.       Kjør-metoden kalles i samme måte som <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>for Windows Forms-programmer.</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>       Hvis <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>er `true`, skrives en oppføring i hendelsesloggen hvis tjenesten som er angitt av den `service` parameteren ikke starter.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase service);
    parameters:
    - id: service
      type: System.ServiceProcess.ServiceBase
      description: "En <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> som angir en tjenesten skal starte."
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>service</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  id: Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerer den kjørbare filen for flere tjenester med Tjenestekontrollbehandling (SCM)."
  remarks: "Kalle denne overbelastningen den `main()` funksjonen tjenesten kjører ikke registrere tjenestene med tjenestekontrollbehandlingen. Når du kaller kjøres, tjenestekontrollbehandlingen problemer Start kommandoer, som er et resultat i kall til den <xref:System.ServiceProcess.ServiceBase.OnStart%2A>metoder i tjenesten.</xref:System.ServiceProcess.ServiceBase.OnStart%2A> Tjenesten er ikke startet før kjøres på Start-kommandoer.       Kjør-metoden kalles i samme måte som den <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>metode for Windows Forms-programmer.</xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName>       Hvis <xref:System.ServiceProcess.ServiceBase.AutoLog%2A>er `true`, skrives en oppføring i hendelsesloggen hvis alle tjenestene i matrisen ikke starter.</xref:System.ServiceProcess.ServiceBase.AutoLog%2A>"
  syntax:
    content: public static void Run (System.ServiceProcess.ServiceBase[] services);
    parameters:
    - id: services
      type: System.ServiceProcess.ServiceBase[]
      description: "En matrise med ServiceBase-forekomster som viser tjenester skal starte."
  overload: System.ServiceProcess.ServiceBase.Run*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Du har ikke angitt en tjenesten skal starte. Matrisen kanskje <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> eller tom."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter tjenesten kontrollhåndtaket for tjenesten."
  remarks: "Tjenesten kontrollhåndtaket brukes til å kommunisere med Tjenestekontrollbehandling (SCM).  Referansen kan brukes til å oppdatere den tjenestekontrollbehandlingen statusinformasjon for tjenesten kall ved hjelp av den uforvaltede `SetServiceStatus` funksjonen."
  syntax:
    content: protected IntPtr ServiceHandle { get; }
    return:
      type: System.IntPtr
      description: "En <xref:System.IntPtr>-struktur som inneholder service control håndtaket for tjenesten.</xref:System.IntPtr>"
  overload: System.ServiceProcess.ServiceBase.ServiceHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  id: ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Registrerer kommandoen behandlingsprogrammet og starter tjenesten."
  syntax:
    content: public void ServiceMainCallback (int argCount, IntPtr argPointer);
    parameters:
    - id: argCount
      type: System.Int32
      description: "Antall argumenter i argumentmatrisen."
    - id: argPointer
      type: System.IntPtr
      description: "En <xref:System.IntPtr>-strukturen som peker til en matrise av argumenter.</xref:System.IntPtr>"
  overload: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Henter eller angir det korte navnet brukes til å identifisere tjenesten på systemet."
  remarks: "Tjenestenavn identifiserer tjenesten i Service Control Manager. Verdien for denne egenskapen må være identisk med navnet som er registrert for tjenesten i <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName>egenskapen for den tilsvarende installasjonsprogrammet klasse.</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> I kode er vanligvis tjenestenavn for tjenesten, angitt i den `main()` -funksjonen for den kjørbare filen.       Tjenestenavn brukes også til å angi den <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>knyttet til den <xref:System.ServiceProcess.ServiceBase.EventLog%2A>egenskapen.</xref:System.ServiceProcess.ServiceBase.EventLog%2A> </xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> Dette <xref:System.ServiceProcess.ServiceBase.EventLog%2A>er en forekomst som skriver informasjon om kommandoen skal for programmet.</xref:System.ServiceProcess.ServiceBase.EventLog%2A>       Tjenestenavn som leverer kildestreng for hendelsesloggen, må angis før tjenesten skriver til hendelsesloggen. Forsøk på å få tilgang til hendelsesloggen før kildenavnet er angitt, gjør at det oppstod et unntak."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Navnet på tjenesten."
  overload: System.ServiceProcess.ServiceBase.ServiceName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tjenesten er allerede startet. Egenskapen tjenestenavn kan ikke endres når tjenesten er startet."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Det angitte navnet er en tom streng eller er lenger enn <xref href=&quot;System.ServiceProcess.ServiceBase.MaxNameLength&quot;> </xref>, eller det angitte navnet inneholder Videresend skråstrek eller omvendt skråstrek tegn."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceBase.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceBase
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Stopper tjenesten kjøres."
  remarks: "Stop-metoden angir tjenestestatus til å angi en Stopp venter og samtaler den <xref:System.ServiceProcess.ServiceBase.OnStop%2A>metoden.</xref:System.ServiceProcess.ServiceBase.OnStop%2A>  Når programmet er stoppet, satt tilstanden tjenesten til stoppet. Hvis programmet er en vertsbaserte tjeneste, er programdomenet fjernet."
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceBase.Stop*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceBase.#ctor
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase()
  nameWithType: ServiceBase.ServiceBase()
  fullName: System.ServiceProcess.ServiceBase.ServiceBase()
- uid: System.ServiceProcess.ServiceBase.AutoLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
  fullName: System.ServiceProcess.ServiceBase.AutoLog
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
  fullName: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
  fullName: System.ServiceProcess.ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
  fullName: System.ServiceProcess.ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceBase.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceBase.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceBase.EventLog
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
  fullName: System.ServiceProcess.ServiceBase.EventLog
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
  fullName: System.ServiceProcess.ServiceBase.ExitCode
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceBase.MaxNameLength
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: MaxNameLength
  nameWithType: ServiceBase.MaxNameLength
  fullName: System.ServiceProcess.ServiceBase.MaxNameLength
- uid: System.ServiceProcess.ServiceBase.OnContinue
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue()
  nameWithType: ServiceBase.OnContinue()
  fullName: System.ServiceProcess.ServiceBase.OnContinue()
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand(Int32)
  nameWithType: ServiceBase.OnCustomCommand(Int32)
  fullName: System.ServiceProcess.ServiceBase.OnCustomCommand(Int32)
- uid: System.ServiceProcess.ServiceBase.OnPause
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause()
  nameWithType: ServiceBase.OnPause()
  fullName: System.ServiceProcess.ServiceBase.OnPause()
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent(PowerBroadcastStatus)
  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)
  fullName: System.ServiceProcess.ServiceBase.OnPowerEvent(PowerBroadcastStatus)
- uid: System.ServiceProcess.PowerBroadcastStatus
  parent: System.ServiceProcess
  isExternal: false
  name: PowerBroadcastStatus
  nameWithType: PowerBroadcastStatus
  fullName: System.ServiceProcess.PowerBroadcastStatus
- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange(SessionChangeDescription)
  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)
  fullName: System.ServiceProcess.ServiceBase.OnSessionChange(SessionChangeDescription)
- uid: System.ServiceProcess.SessionChangeDescription
  parent: System.ServiceProcess
  isExternal: false
  name: SessionChangeDescription
  nameWithType: SessionChangeDescription
  fullName: System.ServiceProcess.SessionChangeDescription
- uid: System.ServiceProcess.ServiceBase.OnShutdown
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown()
  nameWithType: ServiceBase.OnShutdown()
  fullName: System.ServiceProcess.ServiceBase.OnShutdown()
- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart(String[])
  nameWithType: ServiceBase.OnStart(String[])
  fullName: System.ServiceProcess.ServiceBase.OnStart(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.OnStop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop()
  nameWithType: ServiceBase.OnStop()
  fullName: System.ServiceProcess.ServiceBase.OnStop()
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime(Int32)
  nameWithType: ServiceBase.RequestAdditionalTime(Int32)
  fullName: System.ServiceProcess.ServiceBase.RequestAdditionalTime(Int32)
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase)
  nameWithType: ServiceBase.Run(ServiceBase)
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase)
- uid: System.ServiceProcess.ServiceBase
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase
- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run(ServiceBase[])
  nameWithType: ServiceBase.Run(ServiceBase[])
  fullName: System.ServiceProcess.ServiceBase.Run(ServiceBase[])
- uid: System.ServiceProcess.ServiceBase[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase
  fullName: System.ServiceProcess.ServiceBase[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceBase
    name: ServiceBase
    nameWithType: ServiceBase
    fullName: ServiceBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceBase.ServiceHandle
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
  fullName: System.ServiceProcess.ServiceBase.ServiceHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback(Int32,IntPtr)
  nameWithType: ServiceBase.ServiceMainCallback(Int32,IntPtr)
  fullName: System.ServiceProcess.ServiceBase.ServiceMainCallback(Int32,IntPtr)
- uid: System.ServiceProcess.ServiceBase.ServiceName
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
  fullName: System.ServiceProcess.ServiceBase.ServiceName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceBase.Stop
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop()
  nameWithType: ServiceBase.Stop()
  fullName: System.ServiceProcess.ServiceBase.Stop()
- uid: System.ServiceProcess.ServiceBase.#ctor*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceBase
  nameWithType: ServiceBase.ServiceBase
- uid: System.ServiceProcess.ServiceBase.AutoLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: AutoLog
  nameWithType: ServiceBase.AutoLog
- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandlePowerEvent
  nameWithType: ServiceBase.CanHandlePowerEvent
- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanHandleSessionChangeEvent
  nameWithType: ServiceBase.CanHandleSessionChangeEvent
- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceBase.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceBase.CanShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceBase.CanShutdown
- uid: System.ServiceProcess.ServiceBase.CanStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: CanStop
  nameWithType: ServiceBase.CanStop
- uid: System.ServiceProcess.ServiceBase.Dispose*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Dispose
  nameWithType: ServiceBase.Dispose
- uid: System.ServiceProcess.ServiceBase.EventLog*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: EventLog
  nameWithType: ServiceBase.EventLog
- uid: System.ServiceProcess.ServiceBase.ExitCode*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ExitCode
  nameWithType: ServiceBase.ExitCode
- uid: System.ServiceProcess.ServiceBase.OnContinue*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnContinue
  nameWithType: ServiceBase.OnContinue
- uid: System.ServiceProcess.ServiceBase.OnCustomCommand*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnCustomCommand
  nameWithType: ServiceBase.OnCustomCommand
- uid: System.ServiceProcess.ServiceBase.OnPause*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPause
  nameWithType: ServiceBase.OnPause
- uid: System.ServiceProcess.ServiceBase.OnPowerEvent*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnPowerEvent
  nameWithType: ServiceBase.OnPowerEvent
- uid: System.ServiceProcess.ServiceBase.OnSessionChange*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnSessionChange
  nameWithType: ServiceBase.OnSessionChange
- uid: System.ServiceProcess.ServiceBase.OnShutdown*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnShutdown
  nameWithType: ServiceBase.OnShutdown
- uid: System.ServiceProcess.ServiceBase.OnStart*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStart
  nameWithType: ServiceBase.OnStart
- uid: System.ServiceProcess.ServiceBase.OnStop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: OnStop
  nameWithType: ServiceBase.OnStop
- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: RequestAdditionalTime
  nameWithType: ServiceBase.RequestAdditionalTime
- uid: System.ServiceProcess.ServiceBase.Run*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Run
  nameWithType: ServiceBase.Run
- uid: System.ServiceProcess.ServiceBase.ServiceHandle*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceBase.ServiceHandle
- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceMainCallback
  nameWithType: ServiceBase.ServiceMainCallback
- uid: System.ServiceProcess.ServiceBase.ServiceName*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: ServiceName
  nameWithType: ServiceBase.ServiceName
- uid: System.ServiceProcess.ServiceBase.Stop*
  parent: System.ServiceProcess.ServiceBase
  isExternal: false
  name: Stop
  nameWithType: ServiceBase.Stop
