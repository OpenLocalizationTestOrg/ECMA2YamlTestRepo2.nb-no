### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "Unntaket oppstod når et kall til den <xref:System.Threading.Thread.Abort*>metoden.</xref:System.Threading.Thread.Abort*> Denne klassen kan ikke arves."
  remarks: "Når det gjøres et kall til den <xref:System.Threading.Thread.Abort%2A>metode for å fjerne en tråd, common language runtime oppstår en ThreadAbortException.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException er et bestemt unntak som kan bli oppdaget, men det vil automatisk oppstå på nytt på slutten av den `catch` blokk. Når dette unntaket aktiveres, kjøretiden utfører alle de `finally` blokker før du avslutter tråden. Fordi tråden kan gjøre en ubegrensede beregning i de `finally` Blokker eller kall <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>for å avbryte avbruddet, vises ikke garantere at tråden avsluttes noensinne.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Hvis du vil vente til den avbrutte tråden er avsluttet, kan du kalle den <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>metoden.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>er et blokkerer kall som ikke returnerer før tråden faktisk stopper.</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > Når common language runtime (CLR) stopper bakgrunnen threadsafter har avsluttet alle forgrunnen tråder i en administrert kjørbar fil, bruker ikke <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> Du kan derfor bruke ThreadAbortException til å oppdage når bakgrunnstråder avsluttes av CLR.       ThreadAbortException bruker HRESULT COR_E_THREADABORTED, som har verdien 0x80131530.      > [!NOTE] > Verdien for arvet <xref:System.Exception.Data%2A>egenskapen er alltid `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Henter et objekt som inneholder programspesifikk informasjon som er relatert til avbruddet tråd."
  remarks: "Objektet som returneres av denne egenskapen er angitt i den `stateInfo` -parameteren for den <xref:System.Threading.Thread.Abort%2A>metoden.</xref:System.Threading.Thread.Abort%2A> Nøyaktige innhold og bruk av dette objektet er definert. Det brukes vanligvis til å formidle informasjon beskrivende tråden blir avbrutt."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Et objekt som inneholder programspesifikk informasjon."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
