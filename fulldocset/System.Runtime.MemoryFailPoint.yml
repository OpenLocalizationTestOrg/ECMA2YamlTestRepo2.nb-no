### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Kontrollerer om nok minneressurser før du utfører en operasjon. Denne klassen kan ikke arves."
  remarks: "> [!NOTE]> Denne klassen er ment for bruk i Avansert utvikling.       Opprette en forekomst av klassen MemoryFailPoint oppretter en port for minne. En port for minne søker etter tilstrekkelige ressurser før du oppretter en aktivitet som krever en stor mengde minne. Gjør sjekken resulterer i en <xref:System.InsufficientMemoryException>som oppstod et unntak.</xref:System.InsufficientMemoryException> Dette unntaket hindrer en operasjon startes reduserer risikoen for feil grunn av manglende ressurser. Dette aktiverer du redusere ytelsen for å unngå et <xref:System.OutOfMemoryException>unntak og skader tilstand som kan skyldes feil håndtering av unntaket tilfeldig steder i koden.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Denne typen implementerer den <xref:System.IDisposable>grensesnittet.</xref:System.IDisposable> Når du er ferdig ved hjelp av typen, må du fjerne den direkte eller indirekte. Hvis du vil fjerne av typen direkte, kan du kalle den <xref:System.IDisposable.Dispose%2A>metoden i en `try` / `catch` block.</xref:System.IDisposable.Dispose%2A> Hvis du vil fjerne den indirekte, bruke et språk som `using` (i C#) eller `Using` (i Visual Basic). For mer informasjon, se &quot;Ved hjelp av et objekt som implementerer IDisposable&quot; i den <xref:System.IDisposable>grensesnittet emnet.</xref:System.IDisposable>       Etter at det oppstår en <xref:System.InsufficientMemoryException>unntak, et program kan skille mellom beregnet som en operasjon, ikke vil kunne fullføre og en delvis fullført operasjon som kan ha ødelagt tilstanden programmet.</xref:System.InsufficientMemoryException> Dette gjør det mulig for et program for å fylle på en pessimistisk eskaleringspolicyen som kan kreve utlasting av gjeldende <xref:System.AppDomain>eller resirkulering prosessen.</xref:System.AppDomain>       MemoryFailPoint kontrollerer om tilstrekkelig minne etterfølgende virtuelt adresseområde er tilgjengelige i alle datasanering heaps og kan øke størrelsen på filen bytte.  MemoryFailPoint garanterer ikke om langsiktige tilgjengeligheten av minnet under levetiden for porten, men brukere bør bruke alltid den <xref:System.Runtime.MemoryFailPoint.Dispose%2A>metode for å sikre at ressursene som er knyttet til MemoryFailPoint er frigjort.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Hvis du vil bruke en port for minne, må du opprette et MemoryFailPoint-objekt, og angi hvor mange megabyte (MB) minne som neste operasjon er forventet å bruke. Hvis ikke er nok minne tilgjengelig, en <xref:System.InsufficientMemoryException>unntak.</xref:System.InsufficientMemoryException>       Parameteren for konstruktøren må være et positivt heltall. En negativ verdi opphøyer et <xref:System.ArgumentOutOfRangeException>unntak.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint brukes på en oppløsning på 16 MB. Alle verdier som er mindre enn 16 MB, behandles som 16 MB, og andre verdier behandles som det neste største multiplumet av 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> klasse, ved å angi hvor mye minne som kreves for vellykket kjøring."
  remarks: "Kan fastslå hvor mye minne som brukes av programmet til å behandle et arbeidselement systemleverandørene.  For å beregne hvor mye minne programmet ditt må behandle en forespørsel, bør du bruke den <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>metoden for å bestemme mengden ledig minne før og etter å kalle metoden som behandler arbeidselementet.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Se den <xref:System.Runtime.MemoryFailPoint>klasse for et kodeeksempel som bestemmer dynamisk verdien for den `sizeInMegabytes` parameteren.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "Nødvendig minnestørrelsen, i megabyte. Dette må være en positiv verdi."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Den angitte minnestørrelsen er negativt."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Det er ikke nok minne til å starte kjøring av kode som er beskyttet av porten."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Frigir alle ressursene som brukes av den <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Kall avhending når du er ferdig med <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Fjerningsmetoden forlater den <xref:System.Runtime.MemoryFailPoint>i en ubrukelig tilstand.</xref:System.Runtime.MemoryFailPoint> Etter kall <xref:System.Runtime.MemoryFailPoint>, må du frigi alle referanser til den <xref:System.Runtime.MemoryFailPoint>Slik saneringsoppsamlingen kan gjenvinne minnet som den <xref:System.Runtime.MemoryFailPoint>ble bruker.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Hvis du vil ha mer informasjon, se [Rydder opp uforvaltede ressurser](~/add/includes/ajax-current-ext-md.md) og [implementere metoden fjerne](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid kall fjerne før du slipper siste referanse til <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Ellers ressurser den bruker vil ikke bli frigjort før saneringsoppsamling kall av <xref:System.Runtime.MemoryFailPoint>objektets `Finalize` metode.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Sikrer at frigis ressurser og andre operasjoner for opprydding utføres når saneringsoppsamlingen reclaims den <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> objektet."
  remarks: "Saneringsoppsamlingen kaller metoden Fullfør når det gjeldende objektet er klar til å fullføres."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
