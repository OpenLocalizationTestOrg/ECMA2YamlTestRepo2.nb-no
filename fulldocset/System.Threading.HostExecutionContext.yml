### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "Innkapsler og overfører vert utføringskontekst på tvers av tråder."
  remarks: "HostExecutionContext er en del av en større <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> Vert-konteksten overfører eller flyter med utføringskontekst."
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klasse."
  remarks: "Standardkonstruktøren oppretter en vert utføringskontekst der <xref:System.Threading.HostExecutionContext.State%2A>egenskapsverdi `null`.</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Initialiserer en ny forekomst av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klasse ved hjelp av den angitte tilstanden."
  remarks: "<xref:System.Threading.HostExecutionContext>Er inkludert i <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> </xref:System.Threading.HostExecutionContext> Den `state` representerer en sikker referanse som inneholder den `IUnknown` peker for verten."
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Et objekt som representerer tilstanden vert kjøring av konteksten."
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Oppretter en kopi av utføringskontekst gjeldende verten."
  remarks: "Kopien kan brukes som parameter for en <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>metodekallet.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "En <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> -objekt som representerer vert konteksten for gjeldende tråd."
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Frigir alle ressursene som brukes av den gjeldende forekomsten av den <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> klasse."
  remarks: "Kall `Dispose` når du er ferdig med <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> Den `Dispose` metoden forlater den <xref:System.Threading.HostExecutionContext>i en ubrukelig tilstand.</xref:System.Threading.HostExecutionContext> Etter kall `Dispose`, må du frigi alle referanser til den <xref:System.Threading.HostExecutionContext>Slik saneringsoppsamlingen kan gjenvinne minnet som den <xref:System.Threading.HostExecutionContext>ble bruker.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       Hvis du vil ha mer informasjon, se [Rydder opp uforvaltede ressurser](~/add/includes/ajax-current-ext-md.md) og [implementere metoden fjerne](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Alltid kall `Dispose` før du slipper siste referanse til <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> Ellers ressurser den bruker vil ikke bli frigjort før saneringsoppsamling kall av <xref:System.Threading.HostExecutionContext>objektets `Finalize` metode.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Når overstyrt i en avledet klasse, frigir uforvaltede ressursene som brukes av den <xref:System.Threading.WaitHandle>, og eventuelt frigir administrerte ressurser.</xref:System.Threading.WaitHandle>"
  remarks: "Denne metoden kalles av den <xref:System.Threading.HostExecutionContext.Dispose>overlasten for metoden og sluttbehandleren.</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>Aktiverer beskyttede metoden med den `disposing` parameteren satt til `true`.</xref:System.Threading.HostExecutionContext.Dispose> Sluttbehandleren aktiverer metoden med `disposing` satt til `false`.       Når den `disposing` parameteren er `true`, denne metoden Frigjør alle ressurser holdes av administrerte objekter som denne <xref:System.Threading.HostExecutionContext>referanser.</xref:System.Threading.HostExecutionContext> Denne metoden starter den `Dispose` metode for hver referert objekt.       Denne metoden kan kalles flere ganger av andre objekter. Når denne metoden, pass ikke referere til objekter som tidligere har blitt fjernet i en tidligere kall."
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>å frigjøre både administrerte og uforvaltede ressurser. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> frigi bare uforvaltede ressurser."
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Henter eller angir tilstanden til utføringskontekst vert."
  remarks: "Egenskapsverdien tilstand representerer en sikker referanse som inneholder den `IUnknown` peker for verten."
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "Et objekt som representerer tilstanden vert kjøring av konteksten."
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
