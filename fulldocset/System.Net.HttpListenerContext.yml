### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "Gir tilgang til forespørselen og svar objektene brukes av den <xref href=&quot;System.Net.HttpListener&quot;> </xref> klasse. Denne klassen kan ikke arves."
  remarks: "Denne klassen gir informasjon relatert til en klient Hypertext Transfer Protocol (HTTP) forespørsler som behandles av en <xref:System.Net.HttpListener>objektet.</xref:System.Net.HttpListener> Denne klassen har også metoder som gir en <xref:System.Net.HttpListener>-objektet til å godta tilkobling WebSocket.</xref:System.Net.HttpListener>       <xref:System.Net.HttpListener.GetContext%2A>Metoden returnerer forekomster av klassen HttpListenerContext.</xref:System.Net.HttpListener.GetContext%2A> For objektet som representerer klientforespørselen, bruker du <xref:System.Net.HttpListenerContext.Request%2A>egenskapen.</xref:System.Net.HttpListenerContext.Request%2A> Å hente objektet som representerer svaret som sendes til klienten av den <xref:System.Net.HttpListener>, bruker den <xref:System.Net.HttpListenerContext.Response%2A>egenskapen.</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> Hvis du vil hente brukerinformasjon om klienten sender forespørselen, for eksempel påloggingsnavnet og om den er godkjent, kan du spørre egenskaper i den <xref:System.Security.Principal.IPrincipal>objektet som ble returnert av den <xref:System.Net.HttpListenerContext.User%2A>egenskapen.</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       Lukker objektets HttpListenerContext sender svar til klienten og Frigjør noen ressursene som brukes av HttpListenerContext. Avbryter objektets HttpListenerContext forkastes svar til klienten Hvis det ikke er allerede sendt, og Frigjør noen ressursene som brukes av HttpListenerContext. Du kan ikke referere den metoder eller egenskaper etter lukker eller avbryter et HttpListenerContext-objekt. Hvis du gjør dette, får du en <xref:System.ObjectDisposedException>unntak.</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Godta WebSocket tilkobling som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>objektet fullfører når WebSocket-tilkoblingen har godtatt.</xref:System.Threading.Tasks.Task%601>       Størrelsen på mottaksbufferen er 16,385 byte. WebSocket Behold aktiv-intervallet er satt til standardverdien for 30 000 (30 sekundene)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Støttede WebSocket undertype-protokollen."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen. Den &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; egenskap i oppgaveobjektet returnerer en <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objektet."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>en tom streng - eller - <code>subProtocol</code> inneholder ugyldige tegn."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Det oppstod en feil under sending av svaret til å fullføre WebSocket-håndtrykk."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Godta WebSocket tilkobling angir støttes undertype WebSocket-protokollen og WebSocket Behold aktiv-intervallet som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>objektet fullfører når WebSocket-tilkoblingen har godtatt.</xref:System.Threading.Tasks.Task%601>       Størrelsen på mottaksbufferen er 16,385 byte."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Støttede WebSocket undertype-protokollen."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket-protokollen Behold aktiv-intervallet i millisekunder."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen. Den &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; egenskap i oppgaveobjektet returnerer en <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objektet."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>en tom streng - eller - <code>subProtocol</code> inneholder ugyldige tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>er for liten."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Det oppstod en feil under sending av svaret til å fullføre WebSocket-håndtrykk."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Godta WebSocket tilkobling angir den støttede undertype WebSocket-protokollen, mottar bufferstørrelsen og WebSocket Behold aktiv-intervallet som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>> objektet fullfører når WebSocket-tilkoblingen har godtatt.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Støttede WebSocket undertype-protokollen."
    - id: receiveBufferSize
      type: System.Int32
      description: "Motta bufferstørrelse i byte."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket-protokollen Behold aktiv-intervallet i millisekunder."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen. Den &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; egenskap i oppgaveobjektet returnerer en <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objektet."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>en tom streng - eller - <code>subProtocol</code> inneholder ugyldige tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>er for liten.       - eller - <code>receiveBufferSize</code> er mindre enn 16 byte - eller - <code>receiveBufferSize</code> er større enn 64 kB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Det oppstod en feil under sending av svaret til å fullføre WebSocket-håndtrykk."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Godta WebSocket tilkobling angir den støttede undertype WebSocket-protokollen, mottar bufferstørrelsen, WebSocket Behold aktiv-intervallet og den interne bufferen som en asynkron operasjon."
  remarks: "Denne operasjonen blokkere ikke. Det returnerte <xref:System.Threading.Tasks.Task%601>objektet fullfører når WebSocket-tilkoblingen har godtatt.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Støttede WebSocket undertype-protokollen."
    - id: receiveBufferSize
      type: System.Int32
      description: "Motta bufferstørrelse i byte."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket-protokollen Behold aktiv-intervallet i millisekunder."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "En intern buffer som brukes for denne operasjonen."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Returnerer &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oppgaveobjektet som representerer den asynkrone operasjonen. Den &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; egenskap i oppgaveobjektet returnerer en <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> objektet."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>en tom streng - eller - <code>subProtocol</code> inneholder ugyldige tegn."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>er for liten.       - eller - <code>receiveBufferSize</code> er mindre enn 16 byte - eller - <code>receiveBufferSize</code> er større enn 64 kB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Det oppstod en feil under sending av svaret til å fullføre WebSocket-håndtrykk."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Henter den <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> som representerer en klient-forespørsel for en ressurs."
  remarks: "Hvis du lukker dette <xref:System.Net.HttpListenerContext>, den sender svar til klienten, Lukk den <xref:System.Net.HttpListenerResponse>som inneholder svar, og lukk det <xref:System.Net.HttpListenerRequest>objektet som ble returnert av denne egenskapen.</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "En <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> objektet som representerer klientforespørselen."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Henter den <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> objektet som skal sendes til klienten som svar på klientens forespørsel."
  remarks: "Programmet konfigurerer svaret ved å angi egenskaper den <xref:System.Net.HttpListenerResponse>objektet som ble returnert av denne egenskapen.</xref:System.Net.HttpListenerResponse> Når du har konfigurert svaret du sende den til klienten ved å lukke svaret, eller ved å lukke dette <xref:System.Net.HttpListenerContext>objektet.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "En <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> objektet brukes til å sende svar tilbake til klienten."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Henter et objekt som brukes til å hente identitet, godkjenningsinformasjon og sikkerhetsroller for klienten som forespørsel er representert av dette <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> objektet."
  remarks: "En <xref:System.Net.HttpListener>angir den krever godkjenning ved hjelp av den <xref:System.Net.HttpListener.AuthenticationSchemes%2A>egenskapen eller ved å angi en <xref:System.Net.AuthenticationSchemeSelector>delegere ved hjelp av den <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>egenskapen.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       Hvis du vil finne klientens påloggingsnavn og godkjenningsinformasjon, kan du se den <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>egenskap i objektet som returneres av denne egenskapen.</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "En <xref:System.Security.Principal.IPrincipal>-objektet som beskriver klienten, eller <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> hvis den <xref href=&quot;System.Net.HttpListener&quot;> </xref> som angitt dette <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> krever ikke godkjenning.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
